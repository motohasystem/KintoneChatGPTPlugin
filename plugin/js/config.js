/*! For license information please see config.js.LICENSE.txt */
(()=>{var e={"./node_modules/@shin-chan/kypes/src/index.js":e=>{e.exports={}},"./src/ts/config/settings.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Settings:()=>r});var i=n("../lib/KintoneConfigBuilder.ts/dist/index.js"),o=n("./src/ts/constants.ts");function s(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class r{}s(r,"preference",{title:"ChatGPT連携プラグインの設定",description:""}),s(r,"input",[{label:"OpenAI APIの設定",desc:"API呼び出しに必要な項目を指定します。",type:i.FieldType.Label},{label:"API key",desc:"API keyを指定してください。インデキシングにもここで指定したAPI Keyを利用します。",code:o.CONSTANTS.API_KEY,type:i.FieldType.Text,required:!0,secret:!0,URL:["https://api.openai.com/v1/chat/completions","https://api.openai.com/v1/embeddings"],method:"POST",header:"Authorization Bearer"},{label:"ChatGPTの利用モデル",desc:'利用モデル名を入力してください。デフォルトは "gpt-3.5-turbo" です。',code:o.CONSTANTS.MODEL_ID,type:i.FieldType.Text,default:"gpt-3.5-turbo",required:!0},{label:"MAX Tokens",desc:"レスポンスの最大トークン長を指定してください。",code:o.CONSTANTS.NUMBER_MAX_TOKENS,type:i.FieldType.Number,default:"1024",required:!0},{label:"役割プロンプト(system)",desc:"ChatGPTの役割を与えます。あなたはカウンセラーです。のような役割をプロンプトしてください。",code:o.CONSTANTS.SYSTEM_PROMPT,type:i.FieldType.MultilineText,rows:3,cols:50,required:!1},{label:"対話例プロンプト(user / assistant)",desc:"会話の例をChatGPTに教えます。この項目が長くなる場合はMAX Tokensの値を増やしてください。",code:o.CONSTANTS.TABLE_FEWSHOTS_PROMPT,type:i.FieldType.IncrementalTable,required:!1,table_cols:[{header:o.CONSTANTS.TABLE_FEWSHOTS.role,type:i.FieldType.Dropdown,accept:["user","assistant"]},{header:o.CONSTANTS.TABLE_FEWSHOTS.content,type:i.FieldType.MultilineText}]},{label:"",desc:"==============================================",type:i.FieldType.Separator},{label:"kintoneのフィールド設定",desc:"ChatGPTに問い合わせる入力フィールドと、回答を出力する出力フィールド、実行ボタン配置用のスペースIDを設定します。",type:i.FieldType.Label},{label:"入力フィールド選択",desc:"入力として使用するフィールドを選択してください",code:o.CONSTANTS.INPUT_FIELD,type:i.FieldType.Dropdown_FieldSelect,accept:["SINGLE_LINE_TEXT","MULTI_LINE_TEXT"],required:!0},{label:"出力フィールド選択",desc:"ChatGPTの返答を入力するフィールドを選択してください。",code:o.CONSTANTS.OUTPUT_FIELD,type:i.FieldType.Dropdown_FieldSelect,accept:["MULTI_LINE_TEXT"],required:!0},{label:"実行ボタン配置スペース選択",desc:"API呼び出しボタンを配置するスペースを選択してください。スペースにIDを指定していない場合、リストに出てこないのでご注意ください。",code:o.CONSTANTS.BTN_SPACE_FIELD,type:i.FieldType.Dropdown_FieldSelect,accept:["SPACER"],required:!0},{label:"",desc:"==============================================",type:i.FieldType.Separator},{label:"embedding設定",desc:"embedding機能を利用する際の設定項目です。通常は設定不要です。利用方法については、キン担ラボまでお問い合わせください。",type:i.FieldType.Label},{label:"インデキシングアプリID",desc:"ベクトル情報を格納しているアプリのIDを指定してください。",code:o.CONSTANTS.APPID_INDEXING,type:i.FieldType.Number,required:!1},{label:"インデキシングモデル指定",desc:'インデキシングに利用するモデル名を入力してください。デフォルトは "text-embedding-ada-002" です。',code:o.CONSTANTS.INDEXING_MODEL_ID,type:i.FieldType.Text,default:"text-embedding-ada-002",required:!1},{label:"ベクトル情報格納フィールドの指定",desc:"インデキシングアプリの中でベクトル情報を格納している複数行テキストをフィールドコードで指定してください。",code:o.CONSTANTS.FIELDCODE_VECTORIZED,type:i.FieldType.Text,required:!1}])},"./src/ts/constants.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CONSTANTS:()=>i});const i={PLUGIN_NAME:"ChatGPT連携プラグイン",EMPTY_LABEL:"----",API_KEY:"api_key",MODEL_ID:"model_id",STATIC_PROMPT:"static_prompt",UNIQUE_PROMPT:"unique_prompt",INPUT_FIELD:"input_field",OUTPUT_FIELD:"output_field",BTN_SPACE_FIELD:"btn_space_field",NUMBER_MAX_TOKENS:"NUMBER_MAX_TOKENS",SYSTEM_PROMPT:"system_prompt",TABLE_FEWSHOTS_PROMPT:"table_fewshot_prompt",TABLE_FEWSHOTS:{role:"役割",content:"プロンプト"},APPID_INDEXING:"appid_indexing",EMBEDDING_API_KEY:"embedding_api_key",INDEXING_MODEL_ID:"indexigin_model_id",FIELDCODE_VECTORIZED:"fieldcode_vectorized"}},"../lib/KintoneConfigBuilder.ts/dist/common.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSecretItem=t.FieldType=void 0,function(e){e[e.Dropdown=0]="Dropdown",e[e.Dropdown_FieldSelect=1]="Dropdown_FieldSelect",e[e.Radio=2]="Radio",e[e.Text=3]="Text",e[e.Number=4]="Number",e[e.MultilineText=5]="MultilineText",e[e.Checkbox=6]="Checkbox",e[e.IncrementalTable=7]="IncrementalTable",e[e.Label=8]="Label",e[e.Separator=9]="Separator"}(t.FieldType||(t.FieldType={})),t.isSecretItem=function(e){return"secret"in e}},"../lib/KintoneConfigBuilder.ts/dist/config-builder.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigBuilder=void 0,n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");const o=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),r=n("../lib/KintoneConfigBuilder.ts/dist/common.js"),l=n("../lib/KintoneConfigBuilder.ts/dist/field-builder.js"),a=n("../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js");class d{constructor(e,t){i(this,"props",void 0),i(this,"layout",void 0),i(this,"config",void 0),i(this,"field_builder",void 0),this.props=e,this.config=t,this.field_builder=new l.FieldBuilder(e)}static is_layout_info(e){return!!d.LAYOUT_PARTS.includes(e)}static is_includes_layout_info(e){return e.reduce(((e,t)=>(d.is_layout_info(t)&&(e=!0),e)),!1)}build_incremental_table(e,t){console.log({input_field:e}),console.log({saved_rows:t});const n=new a.IncrementalTableBuilder(e,t,this.field_builder).build(),i=e.table_cols.map((e=>{const t=o.Utils.createElement("span","title");t.textContent=e.header;return o.Utils.createElement("th","kintoneplugin-table-th",[t])}));i.push(o.Utils.createElement("th","kintoneplugin-table-th-blankspace"));const s=o.Utils.createElement("tr","",i),r=o.Utils.createElement("thead","",[s]),l=o.Utils.createElement("tbody","",n);return o.Utils.createElement("table","kintoneplugin-table ms-0",[r,l],"",{id:"table-".concat(e.code)})}static get_grand_tr(e){if(null==e)throw"ERROR: nullが渡されたため祖父要素を取得できません";const t=e,n=null==t?void 0:t.parentNode;return null==n?void 0:n.parentNode}static get_formparts(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const n={};for(const i in e){if(!e.hasOwnProperty(i))continue;const o=e[i],s=o.label,r=o.code,l=o.type;t.includes(l)&&(n[r]={code:r,label:s,option:l})}const i=Object.keys(n).map((e=>({key:e,value:n[e]}))).sort(((e,t)=>e.value.label.toString().toLowerCase()<t.value.label.toString().toLowerCase()?-1:e>t?1:0));return Object.assign({},...i.map((e=>({[e.key]:e.value}))))}static addOnChangeEvent(e){for(const t of e)t.addEventListener("change",(e=>{const t=e.target;if(null==t)return;const n=t[t.selectedIndex];let i=n.getAttribute("option");null==i&&(i="");let o=n.getAttribute("code");null==o&&(o="");const s=t.closest("tr");if(console.log(s),null==s)return;const r=s.getElementsByTagName("input");r[0].value=i,r[1].value=o}))}build_fields_dropdown(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const l=o.Utils.createElement("select","select-kintone-field");if(l.id=i,null!=s){const e=o.Utils.createElement("option");e.label=s,l.appendChild(e)}const a=d.get_formparts(e,t);return this.field_builder.compose_fielditems(a,n,r).forEach((e=>{l.appendChild(e)})),o.Utils.createElement("div","",[o.Utils.createElement("div","kintoneplugin-select-outer",[o.Utils.createElement("div","kintoneplugin-select",[l])])])}async build_fields_dropdown_other_app(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if(null==e||e==s.ConfigUtilities.DEFAULT_OPTION){const e=o.Utils.createElement("select","select-kintone-field");if(e.id=i,null!=r){const t=o.Utils.createElement("option");t.label=r,e.appendChild(t)}return o.Utils.createElement("div","",[o.Utils.createElement("div","kintoneplugin-select-outer",[o.Utils.createElement("div","kintoneplugin-select",[e])])])}const l=await kintone.api("/k/v1/app/form/fields","GET",{app:parseInt(e)});return this.build_fields_dropdown(l.properties,t,n,i,r)}static make_parts_block(e,t,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",s=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];console.log("make_parts_block()");const l=o.Utils.buildElement({tagName:"div",className:"mb-3",innerHTML:n}),a=o.Utils.buildElement({tagName:"div",className:"h4 mb-2",textContent:t});if(s){const e=o.Utils.buildElement({tagName:"span",className:"text-danger",textContent:"*"});a.appendChild(e)}if(r){const e=o.Utils.buildElement({tagName:"span",className:"badge bg-secondary rounded-pill ms-2",textContent:"secret"});a.appendChild(e)}return o.Utils.buildElement({tagName:"div",className:i+" ms-4 mt-4",childElements:[a,l,e]})}static addFieldSelectEvent(e,t,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;kintone.api("/k/v1/app/form/fields","GET",{app:n}).then((n=>{var s,r;const l=Object.keys(n.properties).map((e=>n.properties[e])).filter((e=>"SINGLE_LINE_TEXT"==e.type)).map((e=>({code:e.code,label:e.label,option:e.type}))).map((e=>{const t=o.Utils.createElement("option","");return t.label=e.label,t.setAttribute("code",e.code),t.setAttribute("option",e.option),e.code==i&&t.setAttribute("selected",""),t})),a=o.Utils.createElement("select","select-kintone-field",l);a.addEventListener("change",(e=>{var n;console.log({event:e});const i=e.target;if(null==i)return;const o=i[i.selectedIndex],s=d(o);null===(n=t.firstChild)||void 0===n||n.remove(),t.appendChild(s)}));const d=e=>{let t;e?(t=e.getAttribute("code"),null==t&&(t="")):t="";const n=o.Utils.createElement("input","kintoneplugin-input-text",[]);n.setAttribute("value",t),n.setAttribute("disabled","");return o.Utils.createElement("td","kintoneplugin-table-td-control",[o.Utils.createElement("div","kintoneplugin-table-td-control-value",[o.Utils.createElement("div","kintoneplugin-input-outer",[n])])])},c=o.Utils.createElement("div","kintoneplugin-table-td-control-value",[o.Utils.createElement("div","kintoneplugin-select-outer",[o.Utils.createElement("div","kintoneplugin-select",[a])])]);null===(s=e.firstChild)||void 0===s||s.remove(),e.appendChild(c),null===(r=t.firstChild)||void 0===r||r.remove();const u=a.item(a.selectedIndex),p=d(u);t.appendChild(p)}))}static set_switch_event(e,t,n){e.querySelectorAll('input[type="radio"]').forEach((e=>{e.addEventListener(t,n)}))}make_string_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"text";if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const n=e.code,i=this.get_saved_value(this.config,e);console.log({saved_value:i});const s="".concat(t,"-").concat(n),l=o.Utils.createElement("div","kintoneplugin-input-outer",[o.Utils.ce("input","kintoneplugin-input-text",[],"",{type:t,id:s,value:i})]),a="required"in(c=e)&&1==c.required;var c;const u=(e=>!!(0,r.isSecretItem)(e)&&("secret"in e&&1==e.secret))(e);return d.make_parts_block(l,e.label,e.desc,"",a,u)}get_saved_value(e,t){if((0,r.isSecretItem)(t)){console.log({input_field:t});const e=kintone.plugin.app.getProxyConfig(t.URL[0],t.method);if(console.log({proxy_config:e}),null==e)return"";let n=t.header;"Authorization Bearer"==n&&(n="Authorization");const i=t.data;if(null!=n){const t=e.headers[n];if(t.startsWith("Bearer")){return t.split(/ /)[1]}return t}if(null!=i)return e.data[i];throw new Error("get_saved_value(): 秘匿情報フィールドとして格納されている情報が不正です。(".concat(e,")"))}let n=e[t.code];return null==n&&(n=null!=t.default?t.default:""),n}make_multiline_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const t=e.code;let n=this.config[t];null==n&&(n=null!=e.default?e.default:""),console.log({saved_value:n});const i="multiline-".concat(t),s=e.cols?e.cols.toString():"60",r=e.rows?e.rows.toString():"10",l=o.Utils.createElement("div","kintoneplugin-input-outer",[o.Utils.ce("textarea","",[],n,{id:i,rows:r,cols:s})]),a="required"in(c=e)&&1==c.required;var c;return d.make_parts_block(l,e.label,e.desc,"",a)}make_checkbox_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");if(null==e||null==e.accept)throw new Error("ConfigBuidler.make_checkbox_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");const t=e.code;let n=this.config[t];null==n&&(n=[]),console.log({saved_value:n});const i="".concat(t),s=e.accept.map((e=>{const t="".concat(i,"-").concat(e);console.log({saved_value:n}),console.log({box_value:e});const s={type:"checkbox",name:"checkbox",value:e,id:t};return n.includes(e)&&(s.checked="checked"),o.Utils.createElement("div","kintoneplugin-input-checkbox",[o.Utils.ce("span","kintoneplugin-input-checkbox-item",[o.Utils.ce("input","kintoneplugin-input-checkbox-item",[],"",s),o.Utils.ce("label","",[],e,{for:t})])])})),r="required"in(l=e)&&1==l.required;var l;return d.make_parts_block(o.Utils.ce("div","",s,"",{id:i}),e.label,e.desc,"",r)}make_radio_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const n=e.code;let i=this.config[n];if(console.log({saved_string:i}),null==i&&null!=e.default&&(i=e.default),null==e||null==e.accept)throw new Error("ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");const s=e.accept.map((e=>{const t="radio-".concat(n,"-").concat(e),s="radio-".concat(n),r=o.Utils.createElement("input");r.setAttribute("type","radio"),r.setAttribute("name",s),r.setAttribute("value",e),r.setAttribute("id",t),e==i&&r.setAttribute("checked","checked");const l=o.Utils.createElement("label","",[],e);return l.setAttribute("for",t),o.Utils.createElement("span","kintoneplugin-input-radio-item",[r,l])})),r=o.Utils.createElement("div","kintoneplugin-input-radio",s);r.id=n;const l="required"in(a=e)&&1==a.required;var a;return d.make_parts_block(r,e.label,e.desc,t,l)}make_dropdown_fieldselect_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const n=[],i=[];if(null==e.accept)throw new Error("ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");if(e.accept.forEach((e=>{d.is_layout_info(e)?i.push(e):n.push(e)})),null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");if(i.length>0&&null==this.layout)throw new Error("レイアウト情報をロードしていません。load_layout_info() を事前に呼び出してください。");if(i.length>0&&n.length>0)throw new Error("フォーム情報のフィールドとレイアウト情報のフィールドとが混在したドロップダウンは構築できません。");const o=e.code,s=this.config[o];let r;const l=!!e.verbose&&e.verbose;if(n.length>0)r=this.build_fields_dropdown(this.props,n,s,o,e.default,l);else{if(!(i.length>0))throw new Error("[".concat(e.label,"] フォーム情報またはレイアウト情報が空欄で呼び出されました"));r=this.build_fields_dropdown(this.layout,i,s,o,e.default,l)}const a="required"in(c=e)&&1==c.required;var c;return d.make_parts_block(r,e.label,e.desc,t,a)}make_incremental_table_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const t=e.code,n=this.config[t];console.log(n);const i=this.build_incremental_table(e,n);return d.make_parts_block(i,e.label,e.desc)}make_subtitle_block(e){const t=o.Utils.ce("div","display-6 mb-3",[],e.label),n=o.Utils.ce("div","ms-4 mt-2 mb-5",[],e.desc);return o.Utils.createElement("div","",[t,n])}async load_layout_info(){const e=await kintone.api("/k/v1/preview/app/form/layout","GET",{app:kintone.app.getId()});console.log(e);const t=e.layout.reduce(((e,t)=>{if("GROUP"==t.type){console.log("curr: ".concat(t.type));const n=t.layout.reduce(((e,t)=>{const n=t.fields.filter((e=>(console.log(e.type),"SPACER"==e.type)));return e=e.concat(n),console.log("row_prev: ".concat(e)),e}),[]);e.concat(n)}else e=e.concat(t.fields.filter((e=>"SPACER"==e.type)));return e}),[]);this.layout=t.reduce(((e,t)=>(t.code=t.elementId,t.label=t.elementId,e[t.code]=t,e)),{}),console.log(this.layout)}}i(d,"LAYOUT_PARTS",["SPACER"]),t.ConfigBuilder=d},"../lib/KintoneConfigBuilder.ts/dist/config-manager.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigManager=void 0,n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");const o=n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),r=n("../lib/KintoneConfigBuilder.ts/dist/common.js"),l=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js");t.ConfigManager=class{constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;i(this,"KEY_CONFIG","config"),i(this,"setting_input",void 0),i(this,"config",{}),i(this,"hooks",{});const o=kintone.plugin.app.getConfig(e);this.set_config(o),console.log(this.config),this.setting_input=t,n&&this.set_preference(n)}set_preference(e){const t=document.getElementById("plugin_title");t&&(t.textContent=e.title);const n=document.getElementById("plugin_description");n&&(n.textContent=e.description)}build(){kintone.api("/k/v1/preview/app/form/fields","GET",{app:kintone.app.getId()}).then((async e=>{const t=this.make_setting_fields(e.properties),n=this.make_button_submit(),i=this.make_button_cancel(),o=(async()=>{const e=l.Utils.createElement("form","",await t);return e.id="form_settings",e})(),s=document.getElementById("config_body");null==s||s.appendChild(await o);const r=l.Utils.createElement("div","mt-5",[i,n]);null==s||s.appendChild(r)})).then((e=>{this.call_target_event("load")})).catch((e=>{throw e}))}async call_target_event(e){const t=this.hooks[e];if(null!=t)for(const e of t)null!=e&&(console.log({func:e}),await e());else console.info("イベント[".concat(e,"]は未登録です。"))}layout_inputs(e,t){return t.map((t=>this.make_paragraph(e,t)))}make_paragraph(e,t){switch(t.type){case r.FieldType.Text:return e.make_string_block(t);case r.FieldType.MultilineText:return e.make_multiline_block(t);case r.FieldType.Radio:return e.make_radio_block(t);case r.FieldType.Number:return e.make_string_block(t,"number");case r.FieldType.Checkbox:return e.make_checkbox_block(t);case r.FieldType.IncrementalTable:return e.make_incremental_table_block(t);case r.FieldType.Label:return e.make_subtitle_block(t);case r.FieldType.Separator:return l.Utils.createElement("div","mt-5 bg-info");case r.FieldType.Dropdown_FieldSelect:if(!("accept"in t))throw new Error("プロパティ accept が必要です。config/settings.ts の設定を見直してください。");return e.make_dropdown_fieldselect_block(t);default:throw new Error("未実装のFieldTypeを要求しています。".concat(t.type," を実装してください。"))}}set_config(e){const t=l.Utils.get_from(e,this.KEY_CONFIG,"");""==t?console.info("設定値がありません。初期値で開始します。"):this.config=JSON.parse(t)}get_config(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(null==e)return this.config;if(e in this.config)return this.config[e];throw new Error("未定義または未設定の設定キーが指定されました: [".concat(e,"]"))}async make_setting_fields(e){const t=new s.ConfigBuilder(e,this.config);return await t.load_layout_info(),this.layout_inputs(t,this.setting_input)}isSecretItem(e){return"secret"in e}secret_parameters(e){const t=this.setting_input.filter((e=>(0,r.isSecretItem)(e)));return this.make_proxy_params(t,e)}make_proxy_params(e,t){const n=e.reduce(((e,t)=>{const n=t.method+":"+t.URL;return null==e[n]&&(e[n]=[]),e[n].push(t),e}),{}),i=Object.keys(n).reduce(((e,i)=>{const o=n[i];console.log({secrets:o});const s=e=>{const n=t.get_text_value(e.code);if("required"in e||(e.required=!1),1==e.required&&(null==n||null==n||""==n))throw new Error("必須の項目[".concat(e.label,"]が未記入です。"));return null==n||null==n?"":n},r=o.filter((e=>"header"in e)).reduce(((e,t)=>{const n=s(t);if(null==t.header)throw new Error("秘匿設定のheader要素が未定義です。");return"Authorization Bearer"==t.header?e.Authorization="Bearer "+n:e[t.header]=n,e}),{}),l=o.filter((e=>"data"in e)).reduce(((e,t)=>{const n=s(t);if(null==t.data)throw new Error("秘匿設定のdata要素が未定義です");return e[t.data]=n,e}),{});return console.log({params:e}),o[0].URL.reduce(((e,t)=>{const n={URL:t,method:o[0].method,headers:r,data:l};return e.push(n),e}),e),console.log({params:e}),e}),[]);return i}store_parameters(e){const t={};return this.setting_input.forEach((n=>{if(n.type==r.FieldType.Label||n.type==r.FieldType.Separator)return;if("secret"in n&&1==n.secret)return;const i=n.code,o=n.required;console.log({code:i});const s=e.get_selected(i,n.type);if(s)t[i]=s;else{if(o){const e="必須の設定項目 [".concat(n.label,"] が未設定です(").concat(i,")");throw console.error(e),new Error(e)}t[i]=""}})),console.log(t),t}make_button_submit(){const e=l.Utils.createElement("button","kintoneplugin-button-dialog-ok");return e.setAttribute("type","button"),e.textContent="適用",e.addEventListener("keydown",(e=>{if(e.isComposing||"Enter"==e.code)return console.info("適用ボタンのenterを無効化しました。"),!1})),e.addEventListener("click",(async e=>{e.preventDefault();const t=document.getElementById("form_settings");if(null==t)throw"ERROR: フォーム要素を取得できませんでした。";await this.call_target_event("submit").catch((e=>{const t="⛔ 設定の保存でエラーが発生しました。（".concat(e,"）");throw console.log(t),alert(t),new Error(t)}));const n=new o.ConfigUtilities(t);let i,s;try{i=this.secret_parameters(n),console.log({proxy_params:i})}catch(t){const n="⛔ 設定値の保存でエラーが発生しました。設定値を見直してください。（".concat(t,"）");return alert(n),e}i.forEach((async e=>{console.log({param:e});const t=kintone.plugin.app.setProxyConfig(e.URL,e.method,e.headers,e.data,(()=>{setTimeout((()=>{console.log({result:t})}),200)}))}));try{s=this.store_parameters(n),setTimeout((()=>{const e=JSON.stringify(s);console.log(e);const t={};t[this.KEY_CONFIG]=e,kintone.plugin.app.setConfig(t)}),300)}catch(t){return alert("⛔ 設定値の保存でエラーが発生しました。設定値を見直してください。（".concat(t,"）")),e}})),console.log("call 8"),e}make_button_cancel(){const e=l.Utils.createElement("button","js-cancel-button kintoneplugin-button-dialog-cancel");return e.textContent="キャンセル",e.addEventListener("click",(function(e){console.log(e),window.location.href="../../"+kintone.app.getId()+"/plugin/"})),e}add_hook(e,t){var n;null==this.hooks[e]&&(this.hooks[e]=[]),null===(n=this.hooks[e])||void 0===n||n.push(t)}}},"../lib/KintoneConfigBuilder.ts/dist/config-utilities.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigUtilities=void 0;const o=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/common.js");class r{constructor(e){i(this,"config_form",void 0),i(this,"whole_selected_field_codes",void 0),i(this,"add_selected_field_codes",(e=>{this.whole_selected_field_codes.push(e)})),i(this,"get_selected_fieldcode",(e=>{console.log("[ConfigTinker] get_selected_fieldcode(): ".concat(e));const t=document.getElementById(e);if(-1==t.selectedIndex)return"";if(t.options[t.selectedIndex].label==r.DEFAULT_OPTION)return"";const n=t.selectedOptions[0].getAttribute("fieldcode");if(null==n)throw new Error("ノード[ ".concat(e," ]はフィールド選択ではありません。"));return n})),i(this,"get_selected_label",(e=>{console.log("[ConfigTinker] get_selected_label(): ".concat(e));const t=document.getElementById(e);if(null==t)throw new Error("ConfigUtilities.get_selected_label(): 指定のID'".concat(e,"'が null でした。"));return-1==t.selectedIndex?"":t.selectedOptions[0].label})),i(this,"get_checked_boxes",(e=>{console.log("[ConfigTinker] get_checked_boxes(): ".concat(e));const t=document.querySelectorAll('[id^="'.concat(e,'-"]'));if(0==t.length)throw new Error("ConfigUtilities.get_checked_boxes(): 指定のID'".concat(e,"-'から始まるチェックボックスが見つかりませんでした。"));const n=Array.from(t).reduce(((e,t)=>(t.checked&&e.push(t.value),e)),[]);return console.log({checked_labels:n}),n})),this.config_form=e,this.whole_selected_field_codes=[]}is_overlapped(e){return o.Utils.is_overlapped(this.overlapped(e))}overlapped(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return null!=e&&this.whole_selected_field_codes.concat(e),o.Utils.overlapped(this.whole_selected_field_codes)}clear_selected_field_labels(){this.whole_selected_field_codes=[]}get_selected_radio(e){const t="radio-".concat(e);console.log("[ConfigTinker] get_selected_radio(): ".concat(t));const n=document.getElementsByName(t),i=n.length;for(let e=0;e<i;e++){const t=n[e];if(1==t.checked)return t.value}return""}get_text_value(e){const t="text-".concat(e);console.log("[ConfigTinker] get_text_value(): ".concat(t));return document.getElementById(t).value}get_multilinetext_value(e){const t="multiline-".concat(e);console.log("[ConfigTinker] get_multiline_value(): ".concat(t));return document.getElementById(t).value}get_number_value(e){const t="number-".concat(e);console.log("[ConfigTinker] get_number_value(): ".concat(t));return document.getElementById(t).value}get_incremental_table_values(e){const t="table-".concat(e),n=document.getElementById(t);if(console.log(t),console.log(n),null==n)throw new Error("指定したテーブルが見つかりません。(id: ".concat(t,")"));return this.abstruct_from_incremental_table(n)}abstruct_from_incremental_table(e){const t=Array.from(e.rows).filter((e=>{var t;return"TH"==(null===(t=e.firstChild)||void 0===t?void 0:t.nodeName)})).map((e=>{const t=Array.from(e.cells).filter((e=>""!=e.innerText)).map((e=>e.innerText));return console.log(t),t})),n=Array.from(e.rows).filter((e=>{var t;return"TH"!=(null===(t=e.firstChild)||void 0===t?void 0:t.nodeName)})).map((e=>Array.from(e.cells).filter((e=>{const t=e.getElementsByClassName("kintoneplugin-input-text")[0],n=e.getElementsByClassName("select-kintone-field")[0],i=e.getElementsByClassName("kintoneplugin-input-checkbox-item"),o=e.getElementsByClassName("kintoneplugin-multiline-text-inner")[0];return void 0!==t||void 0!==n||void 0!==i||null!=o})).map((t=>{const n=t.getElementsByClassName("kintoneplugin-input-text")[0];if(console.log({input_element:n}),null!=n)return n.value;const i=t.getElementsByClassName("kintoneplugin-multiline-text-inner")[0];if(console.log({multiline_element:i}),null!=i)return i.value;const o=t.getElementsByClassName("select-kintone-field")[0];if(console.log({selected_element:o}),null!=o){const e=o.selectedIndex;console.log({index:e});const t=o[e];if("fieldcode"in o[e].attributes){console.log("selected_element fieldcode: ".concat(t.getAttribute("fieldcode")));const e=t.getAttribute("fieldcode");if(null!=e)return e}return o[e].label}console.log({cell:t});const s=t.getElementsByClassName("kintoneplugin-input-checkbox");if(console.log({checkbox_items:s}),null!=s)return Array.from(s).filter((e=>e.childNodes[0].childNodes[0].checked)).map((e=>{if(console.log({item:e}),null==e.textContent)throw new Error("ラベルのないチェックボックスが定義されています。");return e.textContent}));throw new Error("未対応のテーブルセル ".concat(e," が渡されました。"))})).filter((e=>!(Array.isArray(e)&&0==e.length)))));console.log({values:n});const i=n.filter((e=>e.length>0)).filter((e=>e.filter((e=>(null!=e?e.length:0)>0)).length>0));if(console.log(i),0==i.length)return null;const o=t[0];console.log({headers:o});const s=n.map((e=>e.reduce(((e,t,n)=>{const i=null==t?"":t;return e[o[n]]=i,e}),{})));return console.log({table_values:s}),s}get_selected(e,t){switch(t){case s.FieldType.Dropdown:return this.get_selected_label(e);case s.FieldType.Checkbox:return this.get_checked_boxes(e);case s.FieldType.Radio:return this.get_selected_radio(e);case s.FieldType.Dropdown_FieldSelect:return this.get_selected_fieldcode(e);case s.FieldType.Text:return this.get_text_value(e);case s.FieldType.Number:return this.get_number_value(e);case s.FieldType.MultilineText:return this.get_multilinetext_value(e);case s.FieldType.IncrementalTable:return this.get_incremental_table_values(e)}throw new Error("get_selected(): 不明なフィールドタイプが渡されました (field_type: ".concat(t,")"))}}i(r,"DEFAULT_OPTION","----"),t.ConfigUtilities=r},"../lib/KintoneConfigBuilder.ts/dist/field-builder.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.FieldBuilder=void 0;const o=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/common.js"),r=n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),l=n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js");t.FieldBuilder=class{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.ConfigUtilities.DEFAULT_OPTION;i(this,"props",void 0),i(this,"empty_label",void 0),i(this,"build_textcell",(e=>(e=void 0===e?"":e,o.Utils.createElement("div","kintoneplugin-input-outer",[o.Utils.createElement("input","kintoneplugin-input-text",[],void 0,{type:"text",value:e,size:"4"})])))),i(this,"build_checkbox_cell",((e,t,n,i)=>{const s=t.accept.map((t=>{const s="".concat(n,"-").concat(i,"-").concat(t);e=void 0===e?[]:e,console.log({box_value:t}),console.log({preset:e});const r=e.includes(t)?"checked":"",l=o.Utils.ce("input","",[],"",{type:"checkbox",name:"checkbox",value:t,id:s});return""!=r&&l.setAttribute("checked",r),o.Utils.ce("div","kintoneplugin-input-checkbox",[o.Utils.createElement("span","kintoneplugin-input-checkbox-item",[l,o.Utils.ce("label","",[],t,{for:s})])])}));return o.Utils.createElement("div","",s)})),i(this,"build_dropdown_cell",((e,t)=>{if(null==t||!("accept"in t))throw new Error("選択肢情報としてundefinedが渡されました。");e=void 0===e?"":e;const n=o.Utils.createElement("select","select-kintone-field");if(null!=t.empty_label){const e=o.Utils.createElement("option");e.label=t.empty_label,n.appendChild(e)}return t.accept.forEach((t=>{const i=o.Utils.createElement("option");i.label=t,t==e&&i.setAttribute("selected",""),n.appendChild(i)})),o.Utils.createElement("div","",[o.Utils.createElement("div","kintoneplugin-select-outer",[o.Utils.createElement("div","kintoneplugin-select",[n])])])})),i(this,"build_dropdown_fieldselect_cell",((e,t)=>{if(null==t||!("accept"in t))throw new Error("選択肢情報としてundefinedが渡されました。");const n=o.Utils.createElement("select","select-kintone-field");n.id=void 0===e?"":e;const i=o.Utils.createElement("option");i.label=this.empty_label,n.appendChild(i);const s=r.ConfigBuilder.get_formparts(this.props,t.accept),l=!!t.verbose&&t.verbose;return this.compose_fielditems(s,e,l).forEach((e=>{n.appendChild(e)})),o.Utils.createElement("div","",[o.Utils.createElement("div","kintoneplugin-select-outer",[o.Utils.createElement("div","kintoneplugin-select",[n])])])})),i(this,"build_multilinetext_cell",(e=>(e=void 0===e?"":e,o.Utils.createElement("div","kintoneplugin-input-outer",[o.Utils.ce("textarea","kintoneplugin-multiline-text-inner",[],e,{rows:"3",cols:"40"})])))),this.props=e,this.empty_label=t}build_table_cell(e,t,n,i){if("accept"in t)switch(t.type){case s.FieldType.Checkbox:return this.build_checkbox_cell(n,t,e,i);case s.FieldType.Dropdown:return this.build_dropdown_cell(n,t);case s.FieldType.Dropdown_FieldSelect:return this.build_dropdown_fieldselect_cell(n,t)}else switch(t.type){case s.FieldType.Text:return this.build_textcell(n);case s.FieldType.MultilineText:return this.build_multilinetext_cell(n,t)}throw new Error("未定義のFieldTypeが渡されました。FieldTypeに".concat(t.type," を実装してください。"))}compose_fielditems(e,t,n){const i=[];for(const s in e){const r=o.Utils.createElement("option"),l=e[s];r.setAttribute("fieldcode",s),r.label=n?l.label+" [".concat(s,"]"):l.label,s==t&&r.setAttribute("selected",""),i.push(r)}return i}}},"../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.IncrementalTableBuilder=void 0;const o=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js");t.IncrementalTableBuilder=class{constructor(e,t,n){i(this,"table_conf",void 0),i(this,"saved_rows",void 0),i(this,"table_rows",void 0),i(this,"field_builder",void 0),i(this,"rows_count",void 0),this.table_conf=e,this.saved_rows=t,this.field_builder=n,this.table_rows=[],this.rows_count=0}build(){const e=this.table_conf.table_cols,t=e.length-3;return null==this.saved_rows||0==Object.keys(this.saved_rows).length?this.table_rows.push(this.build_table_row(0,e,void 0,t)):this.saved_rows.forEach(((n,i)=>{const o=this.build_table_row(i,e,n,t);this.table_rows.push(o)})),this.table_rows}build_table_row(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;console.log({table_cols:t}),console.log({saved_data:n});const s=[];for(let i=0;i<t.length;i++){const r=t[i],l=null==n?void 0:n[r.header];console.log({value:l});const a=this.field_builder.build_table_cell(this.table_conf.code,r,l,e);s.push(o.Utils.ce("td","",[o.Utils.ce("div","kintoneplugin-table-td-control",[o.Utils.ce("div","kintoneplugin-table-td-control-value",[a])])]))}const r=this.create_button_row_add(t),l=this.create_button_row_remove();console.log({spacer_cols:i}),i=i<0?0:i;const a=[...Array(i)].map((()=>o.Utils.createElement("td","td_spacer"))),d=[...s,...a,o.Utils.createElement("td","kintoneplugin-table-td-operation",[r,l])];this.rows_count=s.length;return o.Utils.createElement("tr","",d)}get_table_rows_count(){const e="table-".concat(this.table_conf.code),t=document.getElementById(e);if(t)return t.getElementsByTagName("tr").length;throw new Error("指定したテーブルID ".concat(e," が存在しません。"))}create_button_row_add(e){const t=document.createElement("button");return t.className="kintoneplugin-button-add-row-image",t.setAttribute("type","button"),t.setAttribute("title","Add row"),t.addEventListener("click",(t=>{console.log("テーブルを一行追加する".concat(t));const n=s.ConfigBuilder.get_grand_tr(t.target),i=null==n?void 0:n.parentNode;if(null==n||null==i)throw"ERROR: 祖先のtbodyを取得できませんでした。";if(null==(null==t?void 0:t.target))return;const o=n.children.length-1-e.length,r=this.get_table_rows_count()+1,l=this.build_table_row(r,e,void 0,o);i.insertBefore(l,n.nextElementSibling)})),t}create_button_row_remove(){const e=document.createElement("button");return e.className="kintoneplugin-button-remove-row-image",e.setAttribute("type","button"),e.setAttribute("title","Delete this row"),e.addEventListener("click",(e=>{var t,n;const i=s.ConfigBuilder.get_grand_tr(e.target);1!=(null===(t=i.parentNode)||void 0===t?void 0:t.childNodes.length)&&(null===(n=i.parentNode)||void 0===n||n.removeChild(i),console.log("テーブルを一行削除する".concat(e)))})),e}}},"../lib/KintoneConfigBuilder.ts/dist/index.js":function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),t),o(n("../lib/KintoneConfigBuilder.ts/dist/config-manager.js"),t),o(n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),t),o(n("../lib/KintoneConfigBuilder.ts/dist/field-builder.js"),t),o(n("../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js"),t),o(n("../lib/KintoneConfigBuilder.ts/dist/common.js"),t)},"./node_modules/kintone-ui-component/lib/base/converter.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{dateValueConverter:()=>a,languagePropConverter:()=>r,timeValueConverter:()=>d,unsafeHTMLConverter:()=>l,visiblePropConverter:()=>s});var i=n("./node_modules/lit/directives/unsafe-html.js"),o=n("./node_modules/kintone-ui-component/lib/base/datetime/utils/index.js");const s={fromAttribute:e=>null===e,toAttribute:e=>e?null:""},r={fromAttribute:e=>!e||-1===["en","ja","zh","zh-TW"].indexOf(e),toAttribute:e=>{const t=["en","ja","zh","zh-TW"];return-1!==t.indexOf(e)?e:-1!==t.indexOf(document.documentElement.lang)?document.documentElement.lang:"en"}},l=e=>e instanceof HTMLElement?e:(0,i.unsafeHTML)(e),a=e=>{if(void 0===e||""===e)return"";let t=[];return e.indexOf("-")>0&&(t=e.split("-")),t.length<2?`${e}-01-01`:2===t.length?`${(0,o.padStart)(t[0],4)}-${(0,o.padStart)(t[1])}-01`:t.length>2?`${(0,o.padStart)(t[0],4)}-${(0,o.padStart)(t[1])}-${(0,o.padStart)(t[2])}`:""},d=e=>{if(5===e.length||""===e)return e;const t=e.indexOf(":"),n=e.substr(0,t),i=e.substr(t+1,5);return`${(0,o.padStart)(n)}:${(0,o.padStart)(i)}`}},"./node_modules/kintone-ui-component/lib/base/datetime/resource/constant.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{FORMAT_IS_NOT_VALID:()=>l,INVALID_FORMAT_MESSAGE:()=>m,MAX_HOURS12:()=>s,MAX_HOURS24:()=>o,MAX_MINUTES:()=>i,MAX_MIN_IS_NOT_VALID:()=>a,MAX_TIME:()=>p,MIN_TIME:()=>u,TIMESTEP_IS_NOT_NUMBER:()=>c,TIME_IS_OUT_OF_VALID_RANGE:()=>d,TIME_SUFFIX:()=>r});const i=60,o=24,s=12,r={AM:"AM",PM:"PM"},l="Format is not valid.",a='"max" must be greater than or equal to "min".',d="Time is out of valid range.",c="'timeStep' property is not number.",u="00:00",p="23:59",m={VALUE:"'value' property format is not valid.",MAX:"'max' property format is not valid.",MIN:"'min' property format is not valid.",TIME_STEP:"'timeStep' property format is not valid."}},"./node_modules/kintone-ui-component/lib/base/datetime/resource/locale.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{en:()=>i,ja:()=>o,zh:()=>s,zh_TW:()=>r});const i={MONTH_SELECT:["JANUARY","FEBRUARY","MARCH","APRIL","MAY","JUNE","JULY","AUGUST","SEPTEMBER","OCTOBER","NOVEMBER","DECEMBER"],YEAR_SELECT_POSTFIX:"",WEEK_DAYS:[{text:"SUN",abbr:"Sunday"},{text:"MON",abbr:"Monday"},{text:"TUE",abbr:"Tuesday"},{text:"WED",abbr:"Wednesday"},{text:"THU",abbr:"Thursday"},{text:"FRI",abbr:"Friday"},{text:"SAT",abbr:"Saturday"}],INVALID_FORMAT:"Format is not valid.",INVALID_TIME_FORMAT:"Format is not valid.",CALENDAR_FOOTER_TEXT:{none:"None",today:"Today",close:"Close"},TIME_IS_OUT_OF_VALID_RANGE:"Time is out of valid range."},o={MONTH_SELECT:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],YEAR_SELECT_POSTFIX:"年",WEEK_DAYS:[{text:"日",abbr:"日"},{text:"月",abbr:"月"},{text:"火",abbr:"火"},{text:"水",abbr:"水"},{text:"木",abbr:"木"},{text:"金",abbr:"金"},{text:"土",abbr:"土"}],INVALID_FORMAT:"日付の形式が不正です。",INVALID_TIME_FORMAT:"時刻の形式が不正です。",CALENDAR_FOOTER_TEXT:{none:"選択を解除",today:"今日",close:"閉じる"},TIME_IS_OUT_OF_VALID_RANGE:"時刻が有効な範囲外です。"},s={MONTH_SELECT:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],YEAR_SELECT_POSTFIX:"年",WEEK_DAYS:[{text:"周日",abbr:"周日"},{text:"周一",abbr:"周一"},{text:"周二",abbr:"周二"},{text:"周三",abbr:"周三"},{text:"周四",abbr:"周四"},{text:"周五",abbr:"周五"},{text:"周六",abbr:"周六"}],INVALID_FORMAT:"日期格式不正确。",INVALID_TIME_FORMAT:"时间格式不正确。",CALENDAR_FOOTER_TEXT:{none:"清空",today:"今天",close:"关闭"},TIME_IS_OUT_OF_VALID_RANGE:"时间超出有效范围。"},r={MONTH_SELECT:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"],YEAR_SELECT_POSTFIX:"年",WEEK_DAYS:[{text:"周日",abbr:"周日"},{text:"周一",abbr:"周一"},{text:"周二",abbr:"周二"},{text:"周三",abbr:"周三"},{text:"周四",abbr:"周四"},{text:"周五",abbr:"周五"},{text:"周六",abbr:"周六"}],INVALID_FORMAT:"日期格式不正確。",INVALID_TIME_FORMAT:"時間格式不正確。",CALENDAR_FOOTER_TEXT:{none:"清空",today:"今天",close:"關閉"},TIME_IS_OUT_OF_VALID_RANGE:"時間超出有效範圍。"}},"./node_modules/kintone-ui-component/lib/base/datetime/utils/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{calculateDistanceInput:()=>P,convertHour24To12:()=>m,convertSuffix24To12:()=>h,convertTime12To24:()=>g,convertTime24To12:()=>_,convertTimeValueToMinutes:()=>d,formatInputValueToTimeValue:()=>f,formatInputValueToValue:()=>y,formatTimeValueToInputValue:()=>u,formatTimeValueToInputValueForMobile:()=>p,formatValueToInputValue:()=>v,generateHour12Options:()=>N,generateHour24Options:()=>U,generateHourOptions:()=>A,generateMinuteOptions:()=>x,generateTimeOptions:()=>l,getDisplayingDates:()=>r,getLeftArrowIconSvgTemplate:()=>I,getLocale:()=>C,getRightArrowIconSvgTemplate:()=>M,getTodayStringByLocale:()=>T,getToggleIconSvgTemplate:()=>O,isStringValueEmpty:()=>E,isValidDateFormat:()=>k,padStart:()=>S,setListBoxPosition:()=>$,timeCompare:()=>c});var i=n("./node_modules/lit/index.js"),o=n("./node_modules/kintone-ui-component/lib/base/datetime/resource/constant.js"),s=n("./node_modules/kintone-ui-component/lib/base/datetime/resource/locale.js");const r=(e,t)=>{const n=w(e,t);let i=new Date(n.start),o=[];const s=[];for(;i<=n.end;)o.push(b(i)),7===o.length&&(s.push(o),o=[]),i.setDate(i.getDate()+1),i=new Date(i);return s},l=(e,t,n,i)=>{const o=[],s=Math.round(t),r=d(i),l=d(n);if(s>0){const t=Math.floor((r-l)/s)+1;for(let n=0;n<t;n++){const t=a(l+n*s,e);o.push(t)}}return o},a=(e,t)=>{let n,i;n=Math.floor(e/o.MAX_MINUTES),i=e%o.MAX_MINUTES;const s=n%o.MAX_HOURS24<o.MAX_HOURS12?o.TIME_SUFFIX.AM:o.TIME_SUFFIX.PM;n=t?n%o.MAX_HOURS12:n%o.MAX_HOURS24,0===n&&t&&(n=o.MAX_HOURS12),n<10&&(n="0"+n),i<10&&(i="0"+i);return{label:n+":"+i+(t?" "+s:""),value:n+":"+i+(t?" "+s:"")}},d=e=>{const t=e.split(":");let n=parseInt(t[0],10),i=parseInt(t[1],10);return isNaN(n)||isNaN(i)?0:(n<0?n=0:n>=o.MAX_HOURS24&&(n=o.MAX_HOURS24-1),i<0?i=0:i>=o.MAX_MINUTES&&(i=o.MAX_MINUTES-1),n*o.MAX_MINUTES+i)},c=(e,t)=>{const n=d(e),i=d(t);return n>i?1:n===i?0:-1},u=(e,t)=>{const n=e.split(":"),i=parseInt(n[0],10),s=parseInt(n[1],10),r=i%o.MAX_HOURS24;return isNaN(r)||isNaN(s)?{hours:"",minutes:"",suffix:""}:t?_(i,s):{hours:S(r),minutes:S(s),suffix:""}},p=(e,t)=>{const n={hours:"",minutes:"",suffix:""},i=e.split(":"),s=parseInt(i[0],10),r=parseInt(i[1],10),l=s%o.MAX_HOURS24;return isNaN(l)||(n.hours=S(t?m(l):l),n.suffix=t?h(l):""),isNaN(r)||(n.minutes=S(r)),n},m=e=>{let t=e%o.MAX_HOURS12;return t=0===t?o.MAX_HOURS12:t,t},h=e=>e>=o.MAX_HOURS12?o.TIME_SUFFIX.PM:o.TIME_SUFFIX.AM,_=(e,t)=>{const n=h(e),i=m(e);return{hours:S(i),minutes:S(t),suffix:n}},f=e=>{const[t,n]=e.split(" "),[i,o]=t.split(":");if(!n)return e;return`${g(i,n)}:${o}`},g=(e,t)=>{const n=parseInt(e,10);if(t===o.TIME_SUFFIX.PM){const e=n===o.MAX_HOURS12?12:n+12;return S(e)}const i=n===o.MAX_HOURS12?0:n;return S(i)},b=e=>{const t=new Date(e),n=t.getFullYear(),i=S(t.getMonth()+1),o=S(t.getDate());return{text:`${t.getFullYear()}-${t.getMonth()+1}-${t.getDate()}`,attr:`${n}-${i}-${o}`}},v=(e,t)=>{if(t&&!E(t)){const n=t.split("-");if(3!==n.length)return t;const i=n[0],o=n[1],s=n[2];return"en"===e?`${o}/${s}/${i}`:`${i}-${o}-${s}`}return t},y=(e,t)=>{if(E(t))return t;const n="en"===e,i=n?"/":"-",o=t.split(i);return`${n?o[2]:o[0]}-${n?o[0]:o[1]}-${n?o[1]:o[2]}`},E=e=>null==e||0===e.length||!/[^(^\s*)|(\s*$)]/.test(e),T=(e="ja")=>{const t=new Date,n=t.getFullYear(),i=S(t.getMonth()+1),o=S(t.getDate());return"ja"===e||"zh"===e?n+"-"+i+"-"+o:i+"/"+o+"/"+n},k=(e,t)=>{if(t&&!E(t)){const n="en"===e,i=n?"/":"-";if(new Date(t).getDate()!==parseInt(t.split(i)[n?1:2],10))return!1;const o=/^(0[1-9]|1[0-2])\/(0[1-9]|[12][0-9]|3[01])\/(\d{4})$/;if("en"===e)return null!==t.match(o);const s=/^(\d{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/g;return null!==t.match(s)}return!1},S=(e,t=2)=>{const n=`0000000000${e}`;return n.substr(n.length-t)},w=(e,t)=>{const n=new Date(e,t);n.setDate(1);const i=new Date(n);i.setDate(i.getDate()-i.getDay());const o=new Date(e,t);o.setMonth(o.getMonth()+1,0);const s=new Date(o);s.setDate(s.getDate()+(6-s.getDay()));const r=(s.getTime()-i.getTime())/864e5;return s.setDate(s.getDate()+(42-r)),{start:i,end:s}},C=e=>{switch(e){case"en":default:return s.en;case"zh":return s.zh;case"ja":return s.ja;case"zh-TW":return s.zh_TW}},x=(e=1)=>{const t=[];for(let n=0;n<=59;n+=e)t.push({value:S(n),label:S(n)});return t},A=(e=!1)=>{if(e){return N("AM").concat(N("PM"))}return U()},N=e=>{const t=[];t.push({value:`${e} 12`,label:`${e} 12`});for(let n=1;n<=11;n++)t.push({value:`${e} ${S(n)}`,label:`${e} ${S(n)}`});return t},U=()=>{const e=[];e.push({value:"00",label:"00"});for(let t=1;t<=23;t++)e.push({value:S(t),label:`${S(t)}`});return e},O=()=>i.svg`
    <svg width="12" height="8" viewBox="0 0 12 8" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path fill-rule="evenodd" clip-rule="evenodd" d="M0 0.5V1.2764L6 7.5L12 1.2764V0.5L6 6.5L0 0.5Z" fill="#888888"/>
    </svg>
    `,I=()=>i.svg`
    <svg
      class="kuc-base-datetime-calendar-header__group__button-icon"
      width="9"
      height="14"
      viewBox="0 0 9 14"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M3.06077 7L8.53044 1.53033L7.46978 0.469666L0.939453 7L7.46978 13.5303L8.53044 12.4697L3.06077 7Z"
        fill="#888888"
      />
    </svg>`;function $(e,t){const n=e.querySelector(".kuc-base-datetime-listbox__listbox"),i=P(e);if(!e.parentElement||!n||!i)return;const{inputToBottom:o,inputToTop:s}=i,r="KUC-BASE-DATETIME-HEADER-MONTH"===e.tagName?360:300,l=e.parentElement.getBoundingClientRect().height;return n.style.maxHeight=r+"px",e.parentElement.style.position="relative",o>=r?(n.style.height=r+"px","bottom"===t?void(n.style.top=l+"px"):void(n.style.bottom=l+"px")):"bottom"===t?(n.style.top=l+"px",void(n.style.height=o-18+"px")):(n.style.height=s-18+"px",n.style.top="auto",void(n.style.bottom=e.parentElement.getBoundingClientRect().height+"px"))}const P=e=>{if(!e.parentElement)return{inputToBottom:0,inputToTop:0,inputToRight:0,inputToLeft:0};return{inputToBottom:window.innerHeight-e.parentElement.getBoundingClientRect().bottom,inputToTop:e.parentElement.getBoundingClientRect().top,inputToRight:window.innerWidth-e.parentElement.getBoundingClientRect().left,inputToLeft:e.parentElement.getBoundingClientRect().left+100}},M=()=>i.svg`
    <svg
      class="kuc-base-datetime-calendar-header__group__button-icon"
      width="9"
      height="14"
      viewBox="0 0 9 14"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        fill-rule="evenodd"
        clip-rule="evenodd"
        d="M5.93923 7L0.469557 1.53033L1.53022 0.469666L8.06055 7L1.53022 13.5303L0.469557 12.4697L5.93923 7Z"
        fill="#888888"
      />
    </svg>`},"./node_modules/kintone-ui-component/lib/base/kuc-base.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{KucBase:()=>s,createStyleOnHeader:()=>l,dispatchCustomEvent:()=>r,generateGUID:()=>a});var i=n("./node_modules/lit/index.js"),o=n("./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/v4.js");class s extends i.LitElement{createRenderRoot(){return this}async throwErrorAfterUpdateComplete(e){throw await this.updateComplete,new Error(e)}}const r=(e,t,n)=>{const i=new CustomEvent(t,{detail:n,bubbles:!0,composed:!0});return e.dispatchEvent(i)},l=e=>{const t=document.createElement("style");t.appendChild(document.createTextNode(e)),document.head.appendChild(t)},a=()=>(0,o.default)()},"./node_modules/kintone-ui-component/lib/base/validator.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isValidDate:()=>a,validateArrayType:()=>g,validateDateTimeValue:()=>c,validateDateValue:()=>s,validateDuplicatedValues:()=>u,validateFieldRequiredInColumnTable:()=>m,validateFieldUniqueInColumnTable:()=>h,validateNumberType:()=>f,validatePositiveInteger:()=>_,validateProps:()=>o,validateRowsPerPage:()=>p,validateTimeStep:()=>l,validateTimeValue:()=>r,validateValueString:()=>d});var i=n("./node_modules/kintone-ui-component/lib/base/datetime/utils/index.js");function o(e){if(!e||"object"!=typeof e)return{};const t={...e};for(const e in t)Object.prototype.hasOwnProperty.call(t,e)&&void 0===t[e]&&delete t[e];return t}function s(e){return!(""!==e&&void 0!==e&&!/(^(\d{1,4})-(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])$)|(^(\d{1,4})$)|(^(\d{1,4})-(0?[1-9]|1[0-2])$)/g.test(e))}function r(e){return!(""!==e&&!/^(2[0-3]|[01]?[0-9]):([0-9]|[0-5][0-9])$/.test(e))}function l(e,t,n){const o=Math.round(e),s=(0,i.convertTimeValueToMinutes)(t),r=(0,i.convertTimeValueToMinutes)(n);return!isNaN(o)&&o>0&&o<=s-r}function a(e){const[t,n,i]=e.split("-"),o=new Date(e),s=o.getFullYear(),r=o.getMonth(),l=o.getDate();return s===Number(t)&&r===Number(n)-1&&l===Number(i)}function d(e){return"string"==typeof e}function c(e,t){return!(!/(^(\d{4})-(0[0-9]|1[0-2])-(0[1-9]|([12][0-9]|3[01]))$)|(^(\d{4})$)|(^(\d{4})-(0[0-9]|1[0-2])$)/g.test(e)||!/(^([01][0-9]|2[0-3])$)|(^([01][0-9]|2[0-3]):([0-5][0-9]))$|(^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9])$/.test(t))}function u(e){return e.length<2||!e.some((t=>e.indexOf(t)!==e.lastIndexOf(t)))}function p(e){return!(e<.5||!f(e))}const m=e=>{for(let t=0;t<e.length;t++)if(!Object.prototype.hasOwnProperty.call(e[t],"field"))return!1;return!0},h=e=>{const t=e.map((e=>e.field));return t.some((function(e,n){return t.indexOf(e)!==n}))};function _(e){return/^[1-9]\d*$/.test(e)}function f(e){return"number"==typeof e&&!Number.isNaN(e)}function g(e){return Array.isArray(e)}},"./node_modules/kintone-ui-component/lib/button/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Button:()=>u});var i=n("./node_modules/lit/index.js"),o=n("./node_modules/lit/decorators.js"),s=n("./node_modules/kintone-ui-component/lib/base/converter.js"),r=n("./node_modules/kintone-ui-component/lib/base/kuc-base.js"),l=n("./node_modules/kintone-ui-component/lib/base/validator.js"),a=n("./node_modules/kintone-ui-component/lib/button/style.js"),d=function(e,t,n,i){var o,s=arguments.length,r=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(r=(s<3?o(r):s>3?o(t,n,r):o(t,n))||r);return s>3&&r&&Object.defineProperty(t,n,r),r};let c;(()=>{if(c=window.customElements.get("kuc-button-1-10-0"),!c){class e extends r.KucBase{constructor(e){super(),this.className="",this.id="",this.text="",this.type="normal",this.disabled=!1,this.visible=!0;const t=(0,l.validateProps)(e);Object.assign(this,t)}_handleClickButton(e){e.stopPropagation(),(0,r.dispatchCustomEvent)(this,"click")}_getButtonColorType(){return"normal"===this.type||"submit"===this.type||"alert"===this.type?this.type:"normal"}render(){return i.html`
        <button
          type="button"
          class="kuc-button-1-10-0__button kuc-button-1-10-0__button--${this._getButtonColorType()}"
          ?disabled="${this.disabled}"
          @click="${this._handleClickButton}"
        >
          ${this.text}
        </button>
      `}}d([(0,o.property)({type:String,reflect:!0,attribute:"class"})],e.prototype,"className",void 0),d([(0,o.property)({type:String,reflect:!0,attribute:"id"})],e.prototype,"id",void 0),d([(0,o.property)({type:String})],e.prototype,"text",void 0),d([(0,o.property)({type:String})],e.prototype,"type",void 0),d([(0,o.property)({type:Boolean})],e.prototype,"disabled",void 0),d([(0,o.property)({type:Boolean,attribute:"hidden",reflect:!0,converter:s.visiblePropConverter})],e.prototype,"visible",void 0),window.customElements.define("kuc-button-1-10-0",e),(0,r.createStyleOnHeader)(a.BUTTON_CSS),c=e}})();const u=c},"./node_modules/kintone-ui-component/lib/button/style.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BUTTON_CSS:()=>i});const i='\n  kuc-button-1-10-0,\n  kuc-button-1-10-0 *,\n  kuc-button-1-10-0:lang(en),\n  kuc-button-1-10-0:lang(en) * {\n    font-family: "HelveticaNeueW02-45Ligh", Arial, "Hiragino Kaku Gothic ProN",\n      Meiryo, sans-serif;\n  }\n  kuc-button-1-10-0:lang(ja),\n  kuc-button-1-10-0:lang(ja) * {\n    font-family: "メイリオ", "Hiragino Kaku Gothic ProN", Meiryo, sans-serif;\n  }\n  kuc-button-1-10-0:lang(zh),\n  kuc-button-1-10-0:lang(zh) * {\n    font-family: "微软雅黑", "Microsoft YaHei", "新宋体", NSimSun, STHeiti, Hei,\n      "Heiti SC", sans-serif;\n  }\n  kuc-button-1-10-0:lang(zh-TW),\n  kuc-button-1-10-0:lang(zh-TW) * {\n    font-family: "微軟正黑體","Microsoft JhengHei","新宋体",NSimSun,STHeiti,\n      Hei,"Heiti SC",sans-serif;\n  }\n  kuc-button-1-10-0 {\n    display: inline-block;\n    vertical-align: top;\n  }\n  kuc-button-1-10-0[hidden] {\n    display: none;\n  }\n  .kuc-button-1-10-0__button {\n    display: grid;\n    align-items: center;\n    font-size: var(--kuc-button-font-size, 16px);\n    width: var(--kuc-button-width, "auto");\n    height: var(--kuc-button-height, 48px);\n    min-width: var(--kuc-button-width, 163px);\n    padding: 0px 16px;\n    user-select: none;\n    white-space: nowrap;\n  }\n  .kuc-button-1-10-0__button--normal {\n    background-color: var(--kuc-button-background-color, #f7f9fa);\n    color: var(--kuc-button-text-color, #3498db);\n    border: 1px solid #e3e7e8;\n  }\n  .kuc-button-1-10-0__button--normal:hover,\n  .kuc-button-1-10-0__button--normal:focus-visible,\n  .kuc-button-1-10-0__button--normal:active {\n    cursor: pointer;\n  }\n  .kuc-button-1-10-0__button--normal:hover {\n    background-color: var(--kuc-button-background-hover, #c8d6dd);\n  }\n  .kuc-button-1-10-0__button--normal:focus-visible {\n    background-color: var(--kuc-button-background-focus, #c8d6dd);\n  }\n  .kuc-button-1-10-0__button--normal:active {\n    background-color: var(--kuc-button-background-active, #c8d6dd);\n  }\n  .kuc-button-1-10-0__button--submit {\n    background-color: var(--kuc-button-background-color, #3498db);\n    color: var(--kuc-button-text-color, #ffffff);\n    border: 1px solid #e3e7e8;\n  }\n  .kuc-button-1-10-0__button--submit:hover,\n  .kuc-button-1-10-0__button--submit:focus-visible,\n  .kuc-button-1-10-0__button--submit:active {\n    cursor: pointer;\n  }\n  .kuc-button-1-10-0__button--submit:hover {\n    background-color: var(--kuc-button-background-hover, #1d6fa5);\n  }\n  .kuc-button-1-10-0__button--submit:focus-visible {\n    background-color: var(--kuc-button-background-focus, #1d6fa5);\n  }\n  .kuc-button-1-10-0__button--submit:active {\n    background-color: var(--kuc-button-background-active, #1d6fa5);\n  }\n  .kuc-button-1-10-0__button--alert {\n    background-color: var(--kuc-button-background-color, #e74c3c);\n    color: var(--kuc-button-text-color, #ffffff);\n    border: 1px solid #e3e7e8;\n  }\n  .kuc-button-1-10-0__button--alert:hover,\n  .kuc-button-1-10-0__button--alert:focus-visible,\n  .kuc-button-1-10-0__button--alert:active {\n    cursor: pointer;\n  }\n  .kuc-button-1-10-0__button--alert:hover {\n    background-color: var(--kuc-button-background-hover, #bf2718);\n  }\n  .kuc-button-1-10-0__button--alert:focus-visible {\n    background-color: var(--kuc-button-background-focus, #bf2718);\n  }\n  .kuc-button-1-10-0__button--alert:active {\n    background-color: var(--kuc-button-background-active, #bf2718);\n  }\n  .kuc-button-1-10-0__button:disabled {\n    background-color: var(--kuc-button-background-color, #d4d7d7);\n    border: 1px solid #e3e7e8;\n    color: var(--kuc-button-text-color, #888888);\n    cursor: default;\n  }\n  .kuc-button-1-10-0__button--normal:focus-visible,\n  .kuc-button-1-10-0__button--submit:focus-visible,\n  .kuc-button-1-10-0__button--alert:focus-visible {\n    outline: 1px solid #3498db;\n  }\n'},"./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/native.js":(e,t,n)=>{"use strict";n.r(t);const i="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:i}},"./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/regex.js":(e,t,n)=>{"use strict";n.r(t),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},"./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/rng.js":(e,t,n)=>{"use strict";let i;n.r(t),n.d(t,{default:()=>s});const o=new Uint8Array(16);function s(){if(!i&&(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!i))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(o)}},"./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/stringify.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{unsafeStringify:()=>s});var i=n("./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/validate.js");const o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function s(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.default=function(e,t=0){const n=s(e,t);if(!(0,i.default)(n))throw TypeError("Stringified UUID is invalid");return n}},"./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/v4.js":(e,t,n)=>{"use strict";n.r(t);var i=n("./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/native.js"),o=n("./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/rng.js"),s=n("./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/stringify.js");t.default=function(e,t,n){if(i.default.randomUUID&&!t&&!e)return i.default.randomUUID();const r=(e=e||{}).random||(e.rng||o.default)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return(0,s.unsafeStringify)(r)}},"./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/validate.js":(e,t,n)=>{"use strict";n.r(t);var i=n("./node_modules/kintone-ui-component/node_modules/uuid/dist/esm-browser/regex.js");t.default=function(e){return"string"==typeof e&&i.default.test(e)}},"./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/button_installer.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonInstaller=void 0;const i=n("./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/utils.js");n("./node_modules/@shin-chan/kypes/src/index.js");t.ButtonInstaller=class{class_hms_button="button-hms-items";buttons=[];canvas;constructor(e=""){""!=e&&(this.class_hms_button=e)}create_button(e,t=""){const n=i.Utils.ce("span","",[],e);n.style.color="dodgerblue";let o=i.Utils.ce("button",this.class_hms_button,[n],"",{title:t});return o=i.Utils.decorate_menu_icon(o),console.log(e.length),e.length>2&&(o.style.fontSize="16px"),o}add_button(e){this.buttons.push(e)}install(){this.already_installed()?console.info("ボタンはすでに設置済みです。"):0!=this.buttons.length?this.put_buttons(this.buttons):console.info("ボタンが設定されていません。何もせずに終了します。")}set_canvas(e){this.canvas=e}get_hms(){const e=kintone.app.getHeaderMenuSpaceElement();if(null==e){const e="ボタン配置スペースが取得できませんでした。";throw console.error(e),new Error(e)}return e}already_installed(){return document.getElementsByClassName(this.class_hms_button).length>0}put_buttons(e){const t=void 0===this.canvas?this.get_hms():this.canvas;e.forEach((e=>{console.log(t),t.append(e)}))}get_header_element(e){const t=document.querySelectorAll(".recordlist-header-label-gaia");return Array.from(t).filter((t=>t.textContent==e))}}},"./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/index.js":function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n("./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/utils.js"),t),o(n("./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/button_installer.js"),t),o(n("./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/plugin_canvas.js"),t)},"./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/plugin_canvas.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PluginCanvas=void 0;const i=n("./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/utils.js");n("./node_modules/@shin-chan/kypes/src/index.js");class o{static CLASS_DISMISS="offcanvas-dismiss";id_island;id_offcanvas;title_offcanvas;island;enable_offcanvas;constructor(e,t,n=null,o){if(this.title_offcanvas=e,this.id_island=`plugin_island_id_${t}`,this.id_offcanvas=`offcanvas_${this.id_island}`,""==t){if(console.log(`[${this.constructor.name}] オフキャンバスを使いません。`),null==n&&(n=kintone.app.getHeaderMenuSpaceElement()),null==n)throw new Error("kintone.app.HeaderMenuSpaceElement() を取得できませんでした。");return this.island=n,void(this.enable_offcanvas=!1)}this.enable_offcanvas=!0;const s=document.getElementById(this.id_island);if(s)console.log(`[${this.constructor.name}] 既存のオフキャンバスを使用します。`),this.island=s;else{console.log(`[${this.constructor.name}] オフキャンバスをID[${this.id_island}]で作成します。`);const e=(e=>{if(e)return e;{const e=i.Utils.ce("span","",[],"🎈");return e.style.cursor="pointer",e}})(o);e.style.color="dodgerblue";let t=i.Utils.ce("div","bbk-tool-icon-box",[e],"",{id:this.id_island,"data-bs-toggle":"offcanvas","aria-controls":this.id_offcanvas,"data-bs-target":`#${this.id_offcanvas}`});t=i.Utils.decorate_menu_icon(t),this.island=t,this.init_offcanvas()}}init_offcanvas(){const e=kintone.app.getHeaderMenuSpaceElement();e&&(e.appendChild(this.get_node()),e.appendChild(this.build_node_offcanvas()))}get_node(){return this.island}build_node_offcanvas(){return i.Utils.ce("div","offcanvas offcanvas-start",[i.Utils.ce("div","offcanvas-header",[i.Utils.ce("h5","offcanvas-title",[],this.title_offcanvas,{id:`${this.id_offcanvas}Label`}),i.Utils.ce("button","btn-close text-reset",[],"",{"data-bs-dismiss":"offcanvas","aria-label":"Close"})]),i.Utils.ce("div","offcanvas-body",[i.Utils.ce("div","mb-4",[],"ここから各種プラグインを呼び出せます。")],"",{id:`${this.id_offcanvas}-body`})],"",{tabindex:"-1",id:`${this.id_offcanvas}`,"aria-labelledby":`${this.id_offcanvas}Label`,"data-bs-backdrop":"false"})}append(e){if(this.enable_offcanvas){const t=document.getElementById(`${this.id_offcanvas}-body`);this.deal_dismiss_attribute(e),t?.appendChild(e)}else this.island.append(e)}deal_dismiss_attribute(e){const t=Array.from(e.querySelectorAll(`.${o.CLASS_DISMISS}`));console.log(t),t.length>0?t.map((e=>{e.setAttribute("data-bs-dismiss","offcanvas")})):e.setAttribute("data-bs-dismiss","offcanvas")}}t.PluginCanvas=o},"./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/utils.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;class n{static unique_properties(e,t=!1){const n=[];for(const i of Object.keys(e)){const o=e[i];(1==o.unique||t&&"RECORD_NUMBER"==o.type)&&n.push(o)}return n}static is_not_empty_string(e){return!n.is_empty_string(e)}static is_empty_string(e){return null==e||null==e||!(e.length>0)}static get_from=(e,t,n)=>e.hasOwnProperty(t)?e[t]:n;static buildElement=e=>{const t=e.tagName,i=e.className?e.className:"",o=e.childElements?e.childElements:[],s=e.textContent?e.textContent:void 0,r=e.innerHTML?e.innerHTML:void 0,l=e.attrs?e.attrs:{};return n.createElement(t,i,o,s,l,r)};static createElement=(e,t="",n=[],i,o,s)=>{const r=document.createElement(e);return r.className=t,null!=i&&(r.textContent=i),null!=s&&(r.innerHTML=s),n.length>0&&n.forEach((e=>{r.appendChild(e)})),o&&Object.entries(o).forEach((([e,t])=>{r.setAttribute(e,t)})),r};static ce=(e,t="",n=[],i="",o)=>this.createElement(e,t,n,i,o);static decorate_menu_icon(e){return e.style.height="48px",e.style.backgroundColor="#f7f9fa",e.style.fontSize="28px",e.style.border="1px solid #e3e7e8",e.style.display="inline",e.style.marginLeft="2px",e.style.marginRight="2px",e.style.verticalAlign="middle",e}static simpleDiv=e=>n.createElement("div","",[],e);static is_overlapped=e=>n.overlapped(e).length>0;static overlapped=e=>{const t=e.filter(((e,t,n)=>n.indexOf(e)!==n.lastIndexOf(e)));return Array.from(new Set(t))};static get_application_url(e){return`${location.protocol}//${location.host}/k/${e}`}static retrieve_errors(e,t=-1){const n=e?.error?.errors;if(null==n)return;let i=[];if(Object.keys(n).forEach((e=>{const t=n[e].messages.map((t=>`[${e}] ${t}`));i=i.concat(t)})),i.sort(),t>=0&&t<i.length){const e=i.length-t;i=i.splice(0,t),i.push(`以下${e}件のエラーメッセージを省略しました。`)}return i}}t.Utils=n},"./node_modules/kintoneplugin-config-migrator/src/config-migrator.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ConfigMigrator:()=>s});var i=n("./node_modules/kintone-ui-component/lib/button/index.js"),o=n("./node_modules/kintoneplugin-config-migrator/node_modules/kintoneplugin-commonutils/dist/index.js");class s{LABEL_ITEM="📁 プラグイン設定を保存・復元します";LABEL_IMPORT_BUTTON="⬆️設定をアップロード（復元）";LABEL_EXPORT_BUTTON="⬇️設定をダウンロード（保存）";HEADER_NODE_ID="KINTANLAB-SETTING-IMPORTER";ID_SUBMIT_BUTTON="button-load-settings";DOWNLOAD_FILENAME="settings.json";store_config={};constructor(e){this.plugin_id=e}put_forms(e){null==e&&(e=this.HEADER_NODE_ID);const t=this.compose_export_form(this.plugin_id),n=this.compose_import_form(),i=o.Utils.buildElement({tagName:"div",className:"container_import_export",childElements:[t,n]}),s=o.Utils.buildElement({tagName:"div",textContent:this.LABEL_ITEM}),r=o.Utils.ce("div","",[s]),l=document.getElementById(e);null!=l&&l.appendChild(o.Utils.ce("div","mt-3 mb-3",[r,i]))}compose_import_form(){const e=this.make_button_import();return o.Utils.buildElement({tagName:"div",className:"import_form_block",childElements:[e],attrs:{style:"margin-top: 1em;"}})}make_button_import(){const e=new i.Button({text:this.LABEL_IMPORT_BUTTON,type:"submit",id:this.ID_SUBMIT_BUTTON}),t=o.Utils.buildElement({tagName:"input",attrs:{type:"file",id:"fileInput",value:this.LABEL_IMPORT_BUTTON}});return e.addEventListener("click",(e=>{t.click()})),t.addEventListener("change",(e=>{this.importSettings(e)})),e}importSettings(e){if(null==e||null==e.target)return;const t=e.target.files[0];if(!t)return;const n=new FileReader;n.onload=e=>{try{if(null==e.target)throw new Error("event.targetにnullが返りました。");if("string"!=typeof e.target.result)throw new Error("event.target.result が文字列型ではありませんでした。");const t=JSON.parse(e.target.result);this.store_config=t;confirm("現在の設定を上書きして、読み込んだ設定を保存します。よろしいですか？")&&kintone.plugin.app.setConfig(this.store_config,(function(){alert("🆙 プラグイン設定を保存しました。アプリの更新をお忘れなく！"),window.location.href="../../flow?app="+kintone.app.getId()}))}catch(e){console.error("ファイルの読み込みに失敗しました:",e)}},n.readAsText(t)}put_export_link(e){null==e&&(e=this.plugin_id);const t=this.compose_export_form(e),n=document.getElementById(this.HEADER_NODE_ID);if(null==n)throw new Error(`ノード #${this.HEADER_NODE_ID} が見つかりませんでした。`);n.appendChild(t)}compose_export_form(e){const t=kintone.plugin.app.getConfig(e),n=JSON.stringify(t),i=this.make_download_button(n,this.DOWNLOAD_FILENAME);return o.Utils.ce("div","export_button_block",[i],"",{style:"float: left; margin-right: 1em;"})}make_download_button(e,t="settings.txt"){const n=new Uint8Array([239,187,191]),s=new Blob([n,e],{type:"octet/stream"}),r=o.Utils.buildElement({tagName:"a",attrs:{href:window.URL.createObjectURL(s),download:t,role:"button"}}),l=new i.Button({text:this.LABEL_EXPORT_BUTTON,type:"normal"});l.addEventListener("click",(e=>{r.click()}));return o.Utils.ce("div","",[l])}}},"./node_modules/kintoneplugin-config-migrator/src/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ConfigMigrator:()=>i.ConfigMigrator});var i=n("./node_modules/kintoneplugin-config-migrator/src/config-migrator.js")},"../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js":e=>{e.exports={}},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/button_installer.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonInstaller=void 0;const i=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js");n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");t.ButtonInstaller=class{class_hms_button="button-hms-items";buttons=[];canvas;constructor(e=""){""!=e&&(this.class_hms_button=e)}create_button(e,t=""){const n=i.Utils.ce("span","",[],e);n.style.color="dodgerblue";let o=i.Utils.ce("button",this.class_hms_button,[n],"",{title:t});return o=i.Utils.decorate_menu_icon(o),console.log(e.length),e.length>2&&(o.style.fontSize="16px"),o}add_button(e){this.buttons.push(e)}install(){this.already_installed()?console.info("ボタンはすでに設置済みです。"):0!=this.buttons.length?this.put_buttons(this.buttons):console.info("ボタンが設定されていません。何もせずに終了します。")}set_canvas(e){this.canvas=e}get_hms(){const e=kintone.app.getHeaderMenuSpaceElement();if(null==e){const e="ボタン配置スペースが取得できませんでした。";throw console.error(e),new Error(e)}return e}already_installed(){return document.getElementsByClassName(this.class_hms_button).length>0}put_buttons(e){const t=void 0===this.canvas?this.get_hms():this.canvas;e.forEach((e=>{console.log(t),t.append(e)}))}get_header_element(e){const t=document.querySelectorAll(".recordlist-header-label-gaia");return Array.from(t).filter((t=>t.textContent==e))}}},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js":function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js"),t),o(n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/button_installer.js"),t),o(n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/plugin_canvas.js"),t)},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/plugin_canvas.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PluginCanvas=void 0;const i=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js");n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");class o{static CLASS_DISMISS="offcanvas-dismiss";id_island;id_offcanvas;title_offcanvas;island;enable_offcanvas;constructor(e,t,n=null,o){if(this.title_offcanvas=e,this.id_island=`plugin_island_id_${t}`,this.id_offcanvas=`offcanvas_${this.id_island}`,""==t){if(console.log(`[${this.constructor.name}] オフキャンバスを使いません。`),null==n&&(n=kintone.app.getHeaderMenuSpaceElement()),null==n)throw new Error("kintone.app.HeaderMenuSpaceElement() を取得できませんでした。");return this.island=n,void(this.enable_offcanvas=!1)}this.enable_offcanvas=!0;const s=document.getElementById(this.id_island);if(s)console.log(`[${this.constructor.name}] 既存のオフキャンバスを使用します。`),this.island=s;else{console.log(`[${this.constructor.name}] オフキャンバスをID[${this.id_island}]で作成します。`);const e=(e=>{if(e)return e;{const e=i.Utils.ce("span","",[],"🎈");return e.style.cursor="pointer",e}})(o);e.style.color="dodgerblue";let t=i.Utils.ce("div","bbk-tool-icon-box",[e],"",{id:this.id_island,"data-bs-toggle":"offcanvas","aria-controls":this.id_offcanvas,"data-bs-target":`#${this.id_offcanvas}`});t=i.Utils.decorate_menu_icon(t),this.island=t,this.init_offcanvas()}}init_offcanvas(){const e=kintone.app.getHeaderMenuSpaceElement();e&&(e.appendChild(this.get_node()),e.appendChild(this.build_node_offcanvas()))}get_node(){return this.island}build_node_offcanvas(){return i.Utils.ce("div","offcanvas offcanvas-start",[i.Utils.ce("div","offcanvas-header",[i.Utils.ce("h5","offcanvas-title",[],this.title_offcanvas,{id:`${this.id_offcanvas}Label`}),i.Utils.ce("button","btn-close text-reset",[],"",{"data-bs-dismiss":"offcanvas","aria-label":"Close"})]),i.Utils.ce("div","offcanvas-body",[i.Utils.ce("div","mb-4",[],"ここから各種プラグインを呼び出せます。")],"",{id:`${this.id_offcanvas}-body`})],"",{tabindex:"-1",id:`${this.id_offcanvas}`,"aria-labelledby":`${this.id_offcanvas}Label`,"data-bs-backdrop":"false"})}append(e){if(this.enable_offcanvas){const t=document.getElementById(`${this.id_offcanvas}-body`);this.deal_dismiss_attribute(e),t?.appendChild(e)}else this.island.append(e)}deal_dismiss_attribute(e){const t=Array.from(e.querySelectorAll(`.${o.CLASS_DISMISS}`));console.log(t),t.length>0?t.map((e=>{e.setAttribute("data-bs-dismiss","offcanvas")})):e.setAttribute("data-bs-dismiss","offcanvas")}}t.PluginCanvas=o},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;class n{static unique_properties(e,t=!1){const n=[];for(const i of Object.keys(e)){const o=e[i];(1==o.unique||t&&"RECORD_NUMBER"==o.type)&&n.push(o)}return n}static is_not_empty_string(e){return!n.is_empty_string(e)}static is_empty_string(e){return null==e||null==e||!(e.length>0)}static get_from=(e,t,n)=>e.hasOwnProperty(t)?e[t]:n;static buildElement=e=>{const t=e.tagName,i=e.className?e.className:"",o=e.childElements?e.childElements:[],s=e.textContent?e.textContent:void 0,r=e.innerHTML?e.innerHTML:void 0,l=e.attrs?e.attrs:{};return n.createElement(t,i,o,s,l,r)};static createElement=(e,t="",n=[],i,o,s)=>{const r=document.createElement(e);return r.className=t,null!=i&&(r.textContent=i),null!=s&&(r.innerHTML=s),n.length>0&&n.forEach((e=>{r.appendChild(e)})),o&&Object.entries(o).forEach((([e,t])=>{r.setAttribute(e,t)})),r};static ce=(e,t="",n=[],i="",o)=>this.createElement(e,t,n,i,o);static decorate_menu_icon(e){return e.style.height="48px",e.style.backgroundColor="#f7f9fa",e.style.fontSize="28px",e.style.border="1px solid #e3e7e8",e.style.display="inline",e.style.marginLeft="2px",e.style.marginRight="2px",e.style.verticalAlign="middle",e}static simpleDiv=e=>n.createElement("div","",[],e);static is_overlapped=e=>n.overlapped(e).length>0;static overlapped=e=>{const t=e.filter(((e,t,n)=>n.indexOf(e)!==n.lastIndexOf(e)));return Array.from(new Set(t))};static get_application_url(e){return`${location.protocol}//${location.host}/k/${e}`}static retrieve_errors(e,t=-1){const n=e?.error?.errors;if(null==n)return;let i=[];if(Object.keys(n).forEach((e=>{const t=n[e].messages.map((t=>`[${e}] ${t}`));i=i.concat(t)})),i.sort(),t>=0&&t<i.length){const e=i.length-t;i=i.splice(0,t),i.push(`以下${e}件のエラーメッセージを省略しました。`)}return i}}t.Utils=n},"./node_modules/@lit/reactive-element/development/css-tag.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CSSResult:()=>l,adoptStyles:()=>c,css:()=>d,getCompatibleStyle:()=>u,supportsAdoptingStyleSheets:()=>o,unsafeCSS:()=>a});const i=window,o=i.ShadowRoot&&(void 0===i.ShadyCSS||i.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,s=Symbol(),r=new WeakMap;class l{constructor(e,t,n){if(this._$cssResult$=!0,n!==s)throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=e,this._strings=t}get styleSheet(){let e=this._styleSheet;const t=this._strings;if(o&&void 0===e){const n=void 0!==t&&1===t.length;n&&(e=r.get(t)),void 0===e&&((this._styleSheet=e=new CSSStyleSheet).replaceSync(this.cssText),n&&r.set(t,e))}return e}toString(){return this.cssText}}const a=e=>new l("string"==typeof e?e:String(e),void 0,s),d=(e,...t)=>{const n=1===e.length?e[0]:t.reduce(((t,n,i)=>t+(e=>{if(!0===e._$cssResult$)return e.cssText;if("number"==typeof e)return e;throw new Error(`Value passed to 'css' function must be a 'css' function result: ${e}. Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.`)})(n)+e[i+1]),e[0]);return new l(n,e,s)},c=(e,t)=>{o?e.adoptedStyleSheets=t.map((e=>e instanceof CSSStyleSheet?e:e.styleSheet)):t.forEach((t=>{const n=document.createElement("style"),o=i.litNonce;void 0!==o&&n.setAttribute("nonce",o),n.textContent=t.cssText,e.appendChild(n)}))},u=o?e=>e:e=>e instanceof CSSStyleSheet?(e=>{let t="";for(const n of e.cssRules)t+=n.cssText;return a(t)})(e):e},"./node_modules/@lit/reactive-element/development/decorators/base.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{decorateProperty:()=>s,legacyPrototypeMethod:()=>i,standardPrototypeMethod:()=>o});const i=(e,t,n)=>{Object.defineProperty(t,n,e)},o=(e,t)=>({kind:"method",placement:"prototype",key:t.key,descriptor:e}),s=({finisher:e,descriptor:t})=>(n,i)=>{var o;if(void 0===i){const i=null!==(o=n.originalKey)&&void 0!==o?o:n.key,s=null!=t?{kind:"method",placement:"prototype",key:i,descriptor:t(n.key)}:{...n,key:i};return null!=e&&(s.finisher=function(t){e(t,i)}),s}{const o=n.constructor;void 0!==t&&Object.defineProperty(n,i,t(i)),null==e||e(o,i)}}},"./node_modules/@lit/reactive-element/development/decorators/custom-element.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{customElement:()=>i});const i=e=>t=>"function"==typeof t?((e,t)=>(customElements.define(e,t),t))(e,t):((e,t)=>{const{kind:n,elements:i}=t;return{kind:n,elements:i,finisher(t){customElements.define(e,t)}}})(e,t)},"./node_modules/@lit/reactive-element/development/decorators/event-options.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{eventOptions:()=>o});var i=n("./node_modules/@lit/reactive-element/development/decorators/base.js");function o(e){return(0,i.decorateProperty)({finisher:(t,n)=>{Object.assign(t.prototype[n],e)}})}},"./node_modules/@lit/reactive-element/development/decorators/property.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{property:()=>o});const i=(e,t)=>"method"===t.kind&&t.descriptor&&!("value"in t.descriptor)?{...t,finisher(n){n.createProperty(t.key,e)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:t.key,initializer(){"function"==typeof t.initializer&&(this[t.key]=t.initializer.call(this))},finisher(n){n.createProperty(t.key,e)}};function o(e){return(t,n)=>void 0!==n?((e,t,n)=>{t.constructor.createProperty(n,e)})(e,t,n):i(e,t)}},"./node_modules/@lit/reactive-element/development/decorators/query-all.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{queryAll:()=>o});var i=n("./node_modules/@lit/reactive-element/development/decorators/base.js");function o(e){return(0,i.decorateProperty)({descriptor:t=>({get(){var t,n;return null!==(n=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelectorAll(e))&&void 0!==n?n:[]},enumerable:!0,configurable:!0})})}},"./node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{queryAssignedElements:()=>r});var i,o=n("./node_modules/@lit/reactive-element/development/decorators/base.js");const s=null!=(null===(i=window.HTMLSlotElement)||void 0===i?void 0:i.prototype.assignedElements)?(e,t)=>e.assignedElements(t):(e,t)=>e.assignedNodes(t).filter((e=>e.nodeType===Node.ELEMENT_NODE));function r(e){const{slot:t,selector:n}=null!=e?e:{};return(0,o.decorateProperty)({descriptor:i=>({get(){var i;const o="slot"+(t?`[name=${t}]`:":not([name])"),r=null===(i=this.renderRoot)||void 0===i?void 0:i.querySelector(o),l=null!=r?s(r,e):[];return n?l.filter((e=>e.matches(n))):l},enumerable:!0,configurable:!0})})}},"./node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{queryAssignedNodes:()=>s});var i=n("./node_modules/@lit/reactive-element/development/decorators/base.js"),o=n("./node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js");function s(e,t,n){let s,r=e;return"object"==typeof e?(r=e.slot,s=e):s={flatten:t},n?(0,o.queryAssignedElements)({slot:r,flatten:t,selector:n}):(0,i.decorateProperty)({descriptor:e=>({get(){var e,t;const n="slot"+(r?`[name=${r}]`:":not([name])"),i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(n);return null!==(t=null==i?void 0:i.assignedNodes(s))&&void 0!==t?t:[]},enumerable:!0,configurable:!0})})}},"./node_modules/@lit/reactive-element/development/decorators/query-async.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{queryAsync:()=>o});var i=n("./node_modules/@lit/reactive-element/development/decorators/base.js");function o(e){return(0,i.decorateProperty)({descriptor:t=>({async get(){var t;return await this.updateComplete,null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e)},enumerable:!0,configurable:!0})})}},"./node_modules/@lit/reactive-element/development/decorators/query.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{query:()=>o});var i=n("./node_modules/@lit/reactive-element/development/decorators/base.js");function o(e,t){return(0,i.decorateProperty)({descriptor:n=>{const i={get(){var t,n;return null!==(n=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(e))&&void 0!==n?n:null},enumerable:!0,configurable:!0};if(t){const t="symbol"==typeof n?Symbol():`__${n}`;i.get=function(){var n,i;return void 0===this[t]&&(this[t]=null!==(i=null===(n=this.renderRoot)||void 0===n?void 0:n.querySelector(e))&&void 0!==i?i:null),this[t]}}return i}})}},"./node_modules/@lit/reactive-element/development/decorators/state.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{state:()=>o});var i=n("./node_modules/@lit/reactive-element/development/decorators/property.js");function o(e){return(0,i.property)({...e,state:!0})}},"./node_modules/@lit/reactive-element/development/reactive-element.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CSSResult:()=>r.CSSResult,ReactiveElement:()=>v,adoptStyles:()=>r.adoptStyles,css:()=>r.css,defaultConverter:()=>_,getCompatibleStyle:()=>r.getCompatibleStyle,notEqual:()=>f,supportsAdoptingStyleSheets:()=>r.supportsAdoptingStyleSheets,unsafeCSS:()=>r.unsafeCSS});var i,o,s,r=n("./node_modules/@lit/reactive-element/development/css-tag.js");const l=window;let a,d;const c=l.trustedTypes,u=c?c.emptyScript:"",p=l.reactiveElementPolyfillSupportDevMode;{const e=null!==(i=l.litIssuedWarnings)&&void 0!==i?i:l.litIssuedWarnings=new Set;d=(t,n)=>{n+=` See https://lit.dev/msg/${t} for more information.`,e.has(n)||(console.warn(n),e.add(n))},d("dev-mode","Lit is in dev mode. Not recommended for production!"),(null===(o=l.ShadyDOM)||void 0===o?void 0:o.inUse)&&void 0===p&&d("polyfill-support-missing","Shadow DOM is being polyfilled via `ShadyDOM` but the `polyfill-support` module has not been loaded."),a=e=>({then:(t,n)=>{d("request-update-promise",`The \`requestUpdate\` method should no longer return a Promise but does so on \`${e}\`. Use \`updateComplete\` instead.`),void 0!==t&&t(!1)}})}const m=e=>{l.emitLitDebugLogEvents&&l.dispatchEvent(new CustomEvent("lit-debug",{detail:e}))},h=(e,t)=>e,_={toAttribute(e,t){switch(t){case Boolean:e=e?u:null;break;case Object:case Array:e=null==e?e:JSON.stringify(e)}return e},fromAttribute(e,t){let n=e;switch(t){case Boolean:n=null!==e;break;case Number:n=null===e?null:Number(e);break;case Object:case Array:try{n=JSON.parse(e)}catch(e){n=null}}return n}},f=(e,t)=>t!==e&&(t==t||e==e),g={attribute:!0,type:String,converter:_,reflect:!1,hasChanged:f},b="finalized";class v extends HTMLElement{constructor(){super(),this.__instanceProperties=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this.__reflectingProperty=null,this._initialize()}static addInitializer(e){var t;this.finalize(),(null!==(t=this._initializers)&&void 0!==t?t:this._initializers=[]).push(e)}static get observedAttributes(){this.finalize();const e=[];return this.elementProperties.forEach(((t,n)=>{const i=this.__attributeNameForProperty(n,t);void 0!==i&&(this.__attributeToPropertyMap.set(i,n),e.push(i))})),e}static createProperty(e,t=g){var n;if(t.state&&(t.attribute=!1),this.finalize(),this.elementProperties.set(e,t),!t.noAccessor&&!this.prototype.hasOwnProperty(e)){const i="symbol"==typeof e?Symbol():`__${e}`,o=this.getPropertyDescriptor(e,i,t);void 0!==o&&(Object.defineProperty(this.prototype,e,o),this.hasOwnProperty("__reactivePropertyKeys")||(this.__reactivePropertyKeys=new Set(null!==(n=this.__reactivePropertyKeys)&&void 0!==n?n:[])),this.__reactivePropertyKeys.add(e))}}static getPropertyDescriptor(e,t,n){return{get(){return this[t]},set(i){const o=this[e];this[t]=i,this.requestUpdate(e,o,n)},configurable:!0,enumerable:!0}}static getPropertyOptions(e){return this.elementProperties.get(e)||g}static finalize(){if(this.hasOwnProperty(b))return!1;this[b]=!0;const e=Object.getPrototypeOf(this);if(e.finalize(),void 0!==e._initializers&&(this._initializers=[...e._initializers]),this.elementProperties=new Map(e.elementProperties),this.__attributeToPropertyMap=new Map,this.hasOwnProperty(h("properties"))){const e=this.properties,t=[...Object.getOwnPropertyNames(e),...Object.getOwnPropertySymbols(e)];for(const n of t)this.createProperty(n,e[n])}this.elementStyles=this.finalizeStyles(this.styles);{const e=(e,t=!1)=>{this.prototype.hasOwnProperty(e)&&d(t?"renamed-api":"removed-api",`\`${e}\` is implemented on class ${this.name}. It has been ${t?"renamed":"removed"} in this version of LitElement.`)};e("initialize"),e("requestUpdateInternal"),e("_getUpdateComplete",!0)}return!0}static finalizeStyles(e){const t=[];if(Array.isArray(e)){const n=new Set(e.flat(1/0).reverse());for(const e of n)t.unshift((0,r.getCompatibleStyle)(e))}else void 0!==e&&t.push((0,r.getCompatibleStyle)(e));return t}static __attributeNameForProperty(e,t){const n=t.attribute;return!1===n?void 0:"string"==typeof n?n:"string"==typeof e?e.toLowerCase():void 0}_initialize(){var e;this.__updatePromise=new Promise((e=>this.enableUpdating=e)),this._$changedProperties=new Map,this.__saveInstanceProperties(),this.requestUpdate(),null===(e=this.constructor._initializers)||void 0===e||e.forEach((e=>e(this)))}addController(e){var t,n;(null!==(t=this.__controllers)&&void 0!==t?t:this.__controllers=[]).push(e),void 0!==this.renderRoot&&this.isConnected&&(null===(n=e.hostConnected)||void 0===n||n.call(e))}removeController(e){var t;null===(t=this.__controllers)||void 0===t||t.splice(this.__controllers.indexOf(e)>>>0,1)}__saveInstanceProperties(){this.constructor.elementProperties.forEach(((e,t)=>{this.hasOwnProperty(t)&&(this.__instanceProperties.set(t,this[t]),delete this[t])}))}createRenderRoot(){var e;const t=null!==(e=this.shadowRoot)&&void 0!==e?e:this.attachShadow(this.constructor.shadowRootOptions);return(0,r.adoptStyles)(t,this.constructor.elementStyles),t}connectedCallback(){var e;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(e=this.__controllers)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostConnected)||void 0===t?void 0:t.call(e)}))}enableUpdating(e){}disconnectedCallback(){var e;null===(e=this.__controllers)||void 0===e||e.forEach((e=>{var t;return null===(t=e.hostDisconnected)||void 0===t?void 0:t.call(e)}))}attributeChangedCallback(e,t,n){this._$attributeToProperty(e,n)}__propertyToAttribute(e,t,n=g){var i;const o=this.constructor.__attributeNameForProperty(e,n);if(void 0!==o&&!0===n.reflect){const s=(void 0!==(null===(i=n.converter)||void 0===i?void 0:i.toAttribute)?n.converter:_).toAttribute(t,n.type);this.constructor.enabledWarnings.indexOf("migration")>=0&&void 0===s&&d("undefined-attribute-value",`The attribute value for the ${e} property is undefined on element ${this.localName}. The attribute will be removed, but in the previous version of \`ReactiveElement\`, the attribute would not have changed.`),this.__reflectingProperty=e,null==s?this.removeAttribute(o):this.setAttribute(o,s),this.__reflectingProperty=null}}_$attributeToProperty(e,t){var n;const i=this.constructor,o=i.__attributeToPropertyMap.get(e);if(void 0!==o&&this.__reflectingProperty!==o){const e=i.getPropertyOptions(o),s="function"==typeof e.converter?{fromAttribute:e.converter}:void 0!==(null===(n=e.converter)||void 0===n?void 0:n.fromAttribute)?e.converter:_;this.__reflectingProperty=o,this[o]=s.fromAttribute(t,e.type),this.__reflectingProperty=null}}requestUpdate(e,t,n){let i=!0;if(void 0!==e){((n=n||this.constructor.getPropertyOptions(e)).hasChanged||f)(this[e],t)?(this._$changedProperties.has(e)||this._$changedProperties.set(e,t),!0===n.reflect&&this.__reflectingProperty!==e&&(void 0===this.__reflectingProperties&&(this.__reflectingProperties=new Map),this.__reflectingProperties.set(e,n))):i=!1}return!this.isUpdatePending&&i&&(this.__updatePromise=this.__enqueueUpdate()),a(this.localName)}async __enqueueUpdate(){this.isUpdatePending=!0;try{await this.__updatePromise}catch(e){Promise.reject(e)}const e=this.scheduleUpdate();return null!=e&&await e,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var e,t;if(!this.isUpdatePending)return;if(null==m||m({kind:"update"}),!this.hasUpdated){const t=[];if(null===(e=this.constructor.__reactivePropertyKeys)||void 0===e||e.forEach((e=>{var n;this.hasOwnProperty(e)&&!(null===(n=this.__instanceProperties)||void 0===n?void 0:n.has(e))&&t.push(e)})),t.length)throw new Error(`The following properties on element ${this.localName} will not trigger updates as expected because they are set using class fields: ${t.join(", ")}. Native class fields and some compiled output will overwrite accessors used for detecting changes. See https://lit.dev/msg/class-field-shadowing for more information.`)}this.__instanceProperties&&(this.__instanceProperties.forEach(((e,t)=>this[t]=e)),this.__instanceProperties=void 0);let n=!1;const i=this._$changedProperties;try{n=this.shouldUpdate(i),n?(this.willUpdate(i),null===(t=this.__controllers)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdate)||void 0===t?void 0:t.call(e)})),this.update(i)):this.__markUpdated()}catch(e){throw n=!1,this.__markUpdated(),e}n&&this._$didUpdate(i)}willUpdate(e){}_$didUpdate(e){var t;null===(t=this.__controllers)||void 0===t||t.forEach((e=>{var t;return null===(t=e.hostUpdated)||void 0===t?void 0:t.call(e)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(e)),this.updated(e),this.isUpdatePending&&this.constructor.enabledWarnings.indexOf("change-in-update")>=0&&d("change-in-update",`Element ${this.localName} scheduled an update (generally because a property was set) after an update completed, causing a new update to be scheduled. This is inefficient and should be avoided unless the next update can only be scheduled as a side effect of the previous update.`)}__markUpdated(){this._$changedProperties=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this.__updatePromise}shouldUpdate(e){return!0}update(e){void 0!==this.__reflectingProperties&&(this.__reflectingProperties.forEach(((e,t)=>this.__propertyToAttribute(t,this[t],e))),this.__reflectingProperties=void 0),this.__markUpdated()}updated(e){}firstUpdated(e){}}v[b]=!0,v.elementProperties=new Map,v.elementStyles=[],v.shadowRootOptions={mode:"open"},null==p||p({ReactiveElement:v});{v.enabledWarnings=["change-in-update"];const e=function(e){e.hasOwnProperty(h("enabledWarnings"))||(e.enabledWarnings=e.enabledWarnings.slice())};v.enableWarning=function(t){e(this),this.enabledWarnings.indexOf(t)<0&&this.enabledWarnings.push(t)},v.disableWarning=function(t){e(this);const n=this.enabledWarnings.indexOf(t);n>=0&&this.enabledWarnings.splice(n,1)}}(null!==(s=l.reactiveElementVersions)&&void 0!==s?s:l.reactiveElementVersions=[]).push("1.6.1"),l.reactiveElementVersions.length>1&&d("multiple-versions","Multiple versions of Lit loaded. Loading multiple versions is not recommended.")},"./node_modules/lit-element/development/lit-element.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CSSResult:()=>r.CSSResult,LitElement:()=>c,ReactiveElement:()=>r.ReactiveElement,UpdatingElement:()=>a,_$LE:()=>p,_$LH:()=>l._$LH,adoptStyles:()=>r.adoptStyles,css:()=>r.css,defaultConverter:()=>r.defaultConverter,getCompatibleStyle:()=>r.getCompatibleStyle,html:()=>l.html,noChange:()=>l.noChange,notEqual:()=>r.notEqual,nothing:()=>l.nothing,render:()=>l.render,supportsAdoptingStyleSheets:()=>r.supportsAdoptingStyleSheets,svg:()=>l.svg,unsafeCSS:()=>r.unsafeCSS});var i,o,s,r=n("./node_modules/@lit/reactive-element/development/reactive-element.js"),l=n("./node_modules/lit-html/development/lit-html.js");const a=r.ReactiveElement;let d;{const e=null!==(i=globalThis.litIssuedWarnings)&&void 0!==i?i:globalThis.litIssuedWarnings=new Set;d=(t,n)=>{n+=` See https://lit.dev/msg/${t} for more information.`,e.has(n)||(console.warn(n),e.add(n))}}class c extends r.ReactiveElement{constructor(){super(...arguments),this.renderOptions={host:this},this.__childPart=void 0}createRenderRoot(){var e,t;const n=super.createRenderRoot();return null!==(e=(t=this.renderOptions).renderBefore)&&void 0!==e||(t.renderBefore=n.firstChild),n}update(e){const t=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(e),this.__childPart=(0,l.render)(t,this.renderRoot,this.renderOptions)}connectedCallback(){var e;super.connectedCallback(),null===(e=this.__childPart)||void 0===e||e.setConnected(!0)}disconnectedCallback(){var e;super.disconnectedCallback(),null===(e=this.__childPart)||void 0===e||e.setConnected(!1)}render(){return l.noChange}}c.finalized=!0,c._$litElement$=!0,null===(o=globalThis.litElementHydrateSupport)||void 0===o||o.call(globalThis,{LitElement:c});const u=globalThis.litElementPolyfillSupportDevMode;null==u||u({LitElement:c}),c.finalize=function(){if(!r.ReactiveElement.finalize.call(this))return!1;const e=(e,t,n=!1)=>{if(e.hasOwnProperty(t)){const i=("function"==typeof e?e:e.constructor).name;d(n?"renamed-api":"removed-api",`\`${t}\` is implemented on class ${i}. It has been ${n?"renamed":"removed"} in this version of LitElement.`)}};return e(this,"render"),e(this,"getStyles",!0),e(this.prototype,"adoptStyles"),!0};const p={_$attributeToProperty:(e,t,n)=>{e._$attributeToProperty(t,n)},_$changedProperties:e=>e._$changedProperties};(null!==(s=globalThis.litElementVersions)&&void 0!==s?s:globalThis.litElementVersions=[]).push("3.2.2"),globalThis.litElementVersions.length>1&&d("multiple-versions","Multiple versions of Lit loaded. Loading multiple versions is not recommended.")},"./node_modules/lit-html/development/directive.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Directive:()=>s,PartType:()=>i,directive:()=>o});const i={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},o=e=>(...t)=>({_$litDirective$:e,values:t});class s{constructor(e){}get _$isConnected(){return this._$parent._$isConnected}_$initialize(e,t,n){this.__part=e,this._$parent=t,this.__attributeIndex=n}_$resolve(e,t){return this.update(e,t)}update(e,t){return this.render(...t)}}},"./node_modules/lit-html/development/directives/unsafe-html.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{UnsafeHTMLDirective:()=>s,unsafeHTML:()=>r});var i=n("./node_modules/lit-html/development/lit-html.js"),o=n("./node_modules/lit-html/development/directive.js");class s extends o.Directive{constructor(e){if(super(e),this._value=i.nothing,e.type!==o.PartType.CHILD)throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`)}render(e){if(e===i.nothing||null==e)return this._templateResult=void 0,this._value=e;if(e===i.noChange)return e;if("string"!=typeof e)throw new Error(`${this.constructor.directiveName}() called with a non-string value`);if(e===this._value)return this._templateResult;this._value=e;const t=[e];return t.raw=t,this._templateResult={_$litType$:this.constructor.resultType,strings:t,values:[]}}}s.directiveName="unsafeHTML",s.resultType=1;const r=(0,o.directive)(s)},"./node_modules/lit-html/development/is-server.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isServer:()=>i});const i=!1},"./node_modules/lit-html/development/lit-html.js":(e,t,n)=>{"use strict";var i,o,s,r;n.r(t),n.d(t,{_$LH:()=>te,html:()=>L,noChange:()=>D,nothing:()=>B,render:()=>ie,svg:()=>R});const l=window,a=e=>{l.emitLitDebugLogEvents&&l.dispatchEvent(new CustomEvent("lit-debug",{detail:e}))};let d,c=0;null!==(i=l.litIssuedWarnings)&&void 0!==i||(l.litIssuedWarnings=new Set),d=(e,t)=>{t+=e?` See https://lit.dev/msg/${e} for more information.`:"",l.litIssuedWarnings.has(t)||(console.warn(t),l.litIssuedWarnings.add(t))},d("dev-mode","Lit is in dev mode. Not recommended for production!");const u=(null===(o=l.ShadyDOM)||void 0===o?void 0:o.inUse)&&!0===(null===(s=l.ShadyDOM)||void 0===s?void 0:s.noPatch)?l.ShadyDOM.wrap:e=>e,p=l.trustedTypes,m=p?p.createPolicy("lit-html",{createHTML:e=>e}):void 0,h=e=>e,_=(e,t,n)=>h,f=e=>{if(H!==_)throw new Error("Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.");H=e},g=()=>{H=_},b=(e,t,n)=>H(e,t,n),v="$lit$",y=`lit$${String(Math.random()).slice(9)}$`,E="?"+y,T=`<${E}>`,k=document,S=(e="")=>k.createComment(e),w=e=>null===e||"object"!=typeof e&&"function"!=typeof e,C=Array.isArray,x=e=>C(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),A="[ \t\n\f\r]",N=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,U=/-->/g,O=/>/g,I=new RegExp(`>|${A}(?:([^\\s"'>=/]+)(${A}*=${A}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),$=/'/g,P=/"/g,M=/^(?:script|style|textarea|title)$/i,j=e=>(t,...n)=>(t.some((e=>void 0===e))&&console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences."),{_$litType$:e,strings:t,values:n}),L=j(1),R=j(2),D=Symbol.for("lit-noChange"),B=Symbol.for("lit-nothing"),F=new WeakMap,V=k.createTreeWalker(k,129,null,!1);let H=_;const q=(e,t)=>{const n=e.length-1,i=[];let o,s=2===t?"<svg>":"",r=N;for(let t=0;t<n;t++){const n=e[t];let l,a,d=-1,c=0;for(;c<n.length&&(r.lastIndex=c,a=r.exec(n),null!==a);)if(c=r.lastIndex,r===N){if("!--"===a[1])r=U;else if(void 0!==a[1])r=O;else if(void 0!==a[2])M.test(a[2])&&(o=new RegExp(`</${a[2]}`,"g")),r=I;else if(void 0!==a[3])throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions")}else r===I?">"===a[0]?(r=null!=o?o:N,d=-1):void 0===a[1]?d=-2:(d=r.lastIndex-a[2].length,l=a[1],r=void 0===a[3]?I:'"'===a[3]?P:$):r===P||r===$?r=I:r===U||r===O?r=N:(r=I,o=void 0);console.assert(-1===d||r===I||r===$||r===P,"unexpected parse state B");const u=r===I&&e[t+1].startsWith("/>")?" ":"";s+=r===N?n+T:d>=0?(i.push(l),n.slice(0,d)+v+n.slice(d)+y+u):n+y+(-2===d?(i.push(void 0),t):u)}const l=s+(e[n]||"<?>")+(2===t?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw")){let e="invalid template strings array";throw e="\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n\n          If you're using the html or svg tagged template functions normally\n          and and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        ".trim().replace(/\n */g,"\n"),new Error(e)}return[void 0!==m?m.createHTML(l):l,i]};class z{constructor({strings:e,_$litType$:t},n){let i;this.parts=[];let o=0,s=0;const r=e.length-1,l=this.parts,[c,u]=q(e,t);if(this.el=z.createElement(c,n),V.currentNode=this.el.content,2===t){const e=this.el.content,t=e.firstChild;t.remove(),e.append(...t.childNodes)}for(;null!==(i=V.nextNode())&&l.length<r;){if(1===i.nodeType){{const e=i.localName;if(/^(?:textarea|template)$/i.test(e)&&i.innerHTML.includes(y)){const t=`Expressions are not supported inside \`${e}\` elements. See https://lit.dev/msg/expression-in-${e} for more information.`;if("template"===e)throw new Error(t);d("",t)}}if(i.hasAttributes()){const e=[];for(const t of i.getAttributeNames())if(t.endsWith(v)||t.startsWith(y)){const n=u[s++];if(e.push(t),void 0!==n){const e=i.getAttribute(n.toLowerCase()+v).split(y),t=/([.?@])?(.*)/.exec(n);l.push({type:1,index:o,name:t[2],strings:e,ctor:"."===t[1]?Y:"?"===t[1]?Z:"@"===t[1]?Q:G})}else l.push({type:6,index:o})}for(const t of e)i.removeAttribute(t)}if(M.test(i.tagName)){const e=i.textContent.split(y),t=e.length-1;if(t>0){i.textContent=p?p.emptyScript:"";for(let n=0;n<t;n++)i.append(e[n],S()),V.nextNode(),l.push({type:2,index:++o});i.append(e[t],S())}}}else if(8===i.nodeType){if(i.data===E)l.push({type:2,index:o});else{let e=-1;for(;-1!==(e=i.data.indexOf(y,e+1));)l.push({type:7,index:o}),e+=y.length-1}}o++}null==a||a({kind:"template prep",template:this,clonableTemplate:this.el,parts:this.parts,strings:e})}static createElement(e,t){const n=k.createElement("template");return n.innerHTML=e,n}}function K(e,t,n=e,i){var o,s,r,l;if(t===D)return t;let a=void 0!==i?null===(o=n.__directives)||void 0===o?void 0:o[i]:n.__directive;const d=w(t)?void 0:t._$litDirective$;return(null==a?void 0:a.constructor)!==d&&(null===(s=null==a?void 0:a._$notifyDirectiveConnectionChanged)||void 0===s||s.call(a,!1),void 0===d?a=void 0:(a=new d(e),a._$initialize(e,n,i)),void 0!==i?(null!==(r=(l=n).__directives)&&void 0!==r?r:l.__directives=[])[i]=a:n.__directive=a),void 0!==a&&(t=K(e,a._$resolve(e,t.values),a,i)),t}class X{constructor(e,t){this._parts=[],this._$disconnectableChildren=void 0,this._$template=e,this._$parent=t}get parentNode(){return this._$parent.parentNode}get _$isConnected(){return this._$parent._$isConnected}_clone(e){var t;const{el:{content:n},parts:i}=this._$template,o=(null!==(t=null==e?void 0:e.creationScope)&&void 0!==t?t:k).importNode(n,!0);V.currentNode=o;let s=V.nextNode(),r=0,l=0,a=i[0];for(;void 0!==a;){if(r===a.index){let t;2===a.type?t=new W(s,s.nextSibling,this,e):1===a.type?t=new a.ctor(s,a.name,a.strings,this,e):6===a.type&&(t=new ee(s,this,e)),this._parts.push(t),a=i[++l]}r!==(null==a?void 0:a.index)&&(s=V.nextNode(),r++)}return o}_update(e){let t=0;for(const n of this._parts)void 0!==n&&(null==a||a({kind:"set part",part:n,value:e[t],valueIndex:t,values:e,templateInstance:this}),void 0!==n.strings?(n._$setValue(e,n,t),t+=n.strings.length-2):n._$setValue(e[t])),t++}}class W{constructor(e,t,n,i){var o;this.type=2,this._$committedValue=B,this._$disconnectableChildren=void 0,this._$startNode=e,this._$endNode=t,this._$parent=n,this.options=i,this.__isConnected=null===(o=null==i?void 0:i.isConnected)||void 0===o||o,this._textSanitizer=void 0}get _$isConnected(){var e,t;return null!==(t=null===(e=this._$parent)||void 0===e?void 0:e._$isConnected)&&void 0!==t?t:this.__isConnected}get parentNode(){let e=u(this._$startNode).parentNode;const t=this._$parent;return void 0!==t&&11===e.nodeType&&(e=t.parentNode),e}get startNode(){return this._$startNode}get endNode(){return this._$endNode}_$setValue(e,t=this){var n;if(null===this.parentNode)throw new Error("This `ChildPart` has no `parentNode` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's `innerHTML` or `textContent` can do this.");if(e=K(this,e,t),w(e))e===B||null==e||""===e?(this._$committedValue!==B&&(null==a||a({kind:"commit nothing to child",start:this._$startNode,end:this._$endNode,parent:this._$parent,options:this.options}),this._$clear()),this._$committedValue=B):e!==this._$committedValue&&e!==D&&this._commitText(e);else if(void 0!==e._$litType$)this._commitTemplateResult(e);else if(void 0!==e.nodeType){if((null===(n=this.options)||void 0===n?void 0:n.host)===e)return this._commitText("[probable mistake: rendered a template's host in itself (commonly caused by writing ${this} in a template]"),void console.warn("Attempted to render the template host",e,"inside itself. This is almost always a mistake, and in dev mode ","we render some warning text. In production however, we'll ","render it, which will usually result in an error, and sometimes ","in the element disappearing from the DOM.");this._commitNode(e)}else x(e)?this._commitIterable(e):this._commitText(e)}_insert(e,t=this._$endNode){return u(u(this._$startNode).parentNode).insertBefore(e,t)}_commitNode(e){var t;if(this._$committedValue!==e){if(this._$clear(),H!==_){const e=null===(t=this._$startNode.parentNode)||void 0===t?void 0:t.nodeName;if("STYLE"===e||"SCRIPT"===e){let t="Forbidden";throw t="STYLE"===e?"Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css`...` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.":"Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.",new Error(t)}}null==a||a({kind:"commit node",start:this._$startNode,parent:this._$parent,value:e,options:this.options}),this._$committedValue=this._insert(e)}}_commitText(e){if(this._$committedValue!==B&&w(this._$committedValue)){const t=u(this._$startNode).nextSibling;void 0===this._textSanitizer&&(this._textSanitizer=b(t,"data","property")),e=this._textSanitizer(e),null==a||a({kind:"commit text",node:t,value:e,options:this.options}),t.data=e}else{const t=document.createTextNode("");this._commitNode(t),void 0===this._textSanitizer&&(this._textSanitizer=b(t,"data","property")),e=this._textSanitizer(e),null==a||a({kind:"commit text",node:t,value:e,options:this.options}),t.data=e}this._$committedValue=e}_commitTemplateResult(e){var t;const{values:n,_$litType$:i}=e,o="number"==typeof i?this._$getTemplate(e):(void 0===i.el&&(i.el=z.createElement(i.h,this.options)),i);if((null===(t=this._$committedValue)||void 0===t?void 0:t._$template)===o)null==a||a({kind:"template updating",template:o,instance:this._$committedValue,parts:this._$committedValue._parts,options:this.options,values:n}),this._$committedValue._update(n);else{const e=new X(o,this),t=e._clone(this.options);null==a||a({kind:"template instantiated",template:o,instance:e,parts:e._parts,options:this.options,fragment:t,values:n}),e._update(n),null==a||a({kind:"template instantiated and updated",template:o,instance:e,parts:e._parts,options:this.options,fragment:t,values:n}),this._commitNode(t),this._$committedValue=e}}_$getTemplate(e){let t=F.get(e.strings);return void 0===t&&F.set(e.strings,t=new z(e)),t}_commitIterable(e){C(this._$committedValue)||(this._$committedValue=[],this._$clear());const t=this._$committedValue;let n,i=0;for(const o of e)i===t.length?t.push(n=new W(this._insert(S()),this._insert(S()),this,this.options)):n=t[i],n._$setValue(o),i++;i<t.length&&(this._$clear(n&&u(n._$endNode).nextSibling,i),t.length=i)}_$clear(e=u(this._$startNode).nextSibling,t){var n;for(null===(n=this._$notifyConnectionChanged)||void 0===n||n.call(this,!1,!0,t);e&&e!==this._$endNode;){const t=u(e).nextSibling;u(e).remove(),e=t}}setConnected(e){var t;if(void 0!==this._$parent)throw new Error("part.setConnected() may only be called on a RootPart returned from render().");this.__isConnected=e,null===(t=this._$notifyConnectionChanged)||void 0===t||t.call(this,e)}}class G{constructor(e,t,n,i,o){this.type=1,this._$committedValue=B,this._$disconnectableChildren=void 0,this.element=e,this.name=t,this._$parent=i,this.options=o,n.length>2||""!==n[0]||""!==n[1]?(this._$committedValue=new Array(n.length-1).fill(new String),this.strings=n):this._$committedValue=B,this._sanitizer=void 0}get tagName(){return this.element.tagName}get _$isConnected(){return this._$parent._$isConnected}_$setValue(e,t=this,n,i){const o=this.strings;let s=!1;if(void 0===o)e=K(this,e,t,0),s=!w(e)||e!==this._$committedValue&&e!==D,s&&(this._$committedValue=e);else{const i=e;let r,l;for(e=o[0],r=0;r<o.length-1;r++)l=K(this,i[n+r],t,r),l===D&&(l=this._$committedValue[r]),s||(s=!w(l)||l!==this._$committedValue[r]),l===B?e=B:e!==B&&(e+=(null!=l?l:"")+o[r+1]),this._$committedValue[r]=l}s&&!i&&this._commitValue(e)}_commitValue(e){e===B?u(this.element).removeAttribute(this.name):(void 0===this._sanitizer&&(this._sanitizer=H(this.element,this.name,"attribute")),e=this._sanitizer(null!=e?e:""),null==a||a({kind:"commit attribute",element:this.element,name:this.name,value:e,options:this.options}),u(this.element).setAttribute(this.name,null!=e?e:""))}}class Y extends G{constructor(){super(...arguments),this.type=3}_commitValue(e){void 0===this._sanitizer&&(this._sanitizer=H(this.element,this.name,"property")),e=this._sanitizer(e),null==a||a({kind:"commit property",element:this.element,name:this.name,value:e,options:this.options}),this.element[this.name]=e===B?void 0:e}}const J=p?p.emptyScript:"";class Z extends G{constructor(){super(...arguments),this.type=4}_commitValue(e){null==a||a({kind:"commit boolean attribute",element:this.element,name:this.name,value:!(!e||e===B),options:this.options}),e&&e!==B?u(this.element).setAttribute(this.name,J):u(this.element).removeAttribute(this.name)}}class Q extends G{constructor(e,t,n,i,o){if(super(e,t,n,i,o),this.type=5,void 0!==this.strings)throw new Error(`A \`<${e.localName}>\` has a \`@${t}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`)}_$setValue(e,t=this){var n;if((e=null!==(n=K(this,e,t,0))&&void 0!==n?n:B)===D)return;const i=this._$committedValue,o=e===B&&i!==B||e.capture!==i.capture||e.once!==i.once||e.passive!==i.passive,s=e!==B&&(i===B||o);null==a||a({kind:"commit event listener",element:this.element,name:this.name,value:e,options:this.options,removeListener:o,addListener:s,oldListener:i}),o&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,e),this._$committedValue=e}handleEvent(e){var t,n;"function"==typeof this._$committedValue?this._$committedValue.call(null!==(n=null===(t=this.options)||void 0===t?void 0:t.host)&&void 0!==n?n:this.element,e):this._$committedValue.handleEvent(e)}}class ee{constructor(e,t,n){this.element=e,this.type=6,this._$disconnectableChildren=void 0,this._$parent=t,this.options=n}get _$isConnected(){return this._$parent._$isConnected}_$setValue(e){null==a||a({kind:"commit to element binding",element:this.element,value:e,options:this.options}),K(this,e)}}const te={_boundAttributeSuffix:v,_marker:y,_markerMatch:E,_HTML_RESULT:1,_getTemplateHtml:q,_TemplateInstance:X,_isIterable:x,_resolveDirective:K,_ChildPart:W,_AttributePart:G,_BooleanAttributePart:Z,_EventPart:Q,_PropertyPart:Y,_ElementPart:ee},ne=l.litHtmlPolyfillSupportDevMode;null==ne||ne(z,W),(null!==(r=l.litHtmlVersions)&&void 0!==r?r:l.litHtmlVersions=[]).push("2.6.1"),l.litHtmlVersions.length>1&&d("multiple-versions","Multiple versions of Lit loaded. Loading multiple versions is not recommended.");const ie=(e,t,n)=>{var i,o;if(null==t)throw new TypeError(`The container to render into may not be ${t}`);const s=c++,r=null!==(i=null==n?void 0:n.renderBefore)&&void 0!==i?i:t;let l=r._$litPart$;if(null==a||a({kind:"begin render",id:s,value:e,container:t,options:n,part:l}),void 0===l){const e=null!==(o=null==n?void 0:n.renderBefore)&&void 0!==o?o:null;r._$litPart$=l=new W(t.insertBefore(S(),e),e,void 0,null!=n?n:{})}return l._$setValue(e),null==a||a({kind:"end render",id:s,value:e,container:t,options:n,part:l}),l};ie.setSanitizer=f,ie.createSanitizer=b,ie._testOnlyClearSanitizerFactoryDoNotCallOrElse=g},"./node_modules/lit/decorators.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{customElement:()=>i.customElement,eventOptions:()=>r.eventOptions,property:()=>o.property,query:()=>l.query,queryAll:()=>a.queryAll,queryAssignedElements:()=>c.queryAssignedElements,queryAssignedNodes:()=>u.queryAssignedNodes,queryAsync:()=>d.queryAsync,state:()=>s.state});var i=n("./node_modules/@lit/reactive-element/development/decorators/custom-element.js"),o=n("./node_modules/@lit/reactive-element/development/decorators/property.js"),s=n("./node_modules/@lit/reactive-element/development/decorators/state.js"),r=n("./node_modules/@lit/reactive-element/development/decorators/event-options.js"),l=n("./node_modules/@lit/reactive-element/development/decorators/query.js"),a=n("./node_modules/@lit/reactive-element/development/decorators/query-all.js"),d=n("./node_modules/@lit/reactive-element/development/decorators/query-async.js"),c=n("./node_modules/@lit/reactive-element/development/decorators/query-assigned-elements.js"),u=n("./node_modules/@lit/reactive-element/development/decorators/query-assigned-nodes.js")},"./node_modules/lit/directives/unsafe-html.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{UnsafeHTMLDirective:()=>i.UnsafeHTMLDirective,unsafeHTML:()=>i.unsafeHTML});var i=n("./node_modules/lit-html/development/directives/unsafe-html.js")},"./node_modules/lit/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CSSResult:()=>i.CSSResult,LitElement:()=>i.LitElement,ReactiveElement:()=>i.ReactiveElement,UpdatingElement:()=>i.UpdatingElement,_$LE:()=>i._$LE,_$LH:()=>i._$LH,adoptStyles:()=>i.adoptStyles,css:()=>i.css,defaultConverter:()=>i.defaultConverter,getCompatibleStyle:()=>i.getCompatibleStyle,html:()=>i.html,isServer:()=>o.isServer,noChange:()=>i.noChange,notEqual:()=>i.notEqual,nothing:()=>i.nothing,render:()=>i.render,supportsAdoptingStyleSheets:()=>i.supportsAdoptingStyleSheets,svg:()=>i.svg,unsafeCSS:()=>i.unsafeCSS});n("./node_modules/@lit/reactive-element/development/reactive-element.js"),n("./node_modules/lit-html/development/lit-html.js");var i=n("./node_modules/lit-element/development/lit-element.js"),o=n("./node_modules/lit-html/development/is-server.js")}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var s=t[i]={exports:{}};return e[i].call(s.exports,s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};(()=>{"use strict";n.r(i);var e=n("../lib/KintoneConfigBuilder.ts/dist/index.js"),t=n("./src/ts/config/settings.ts"),o=n("./node_modules/kintoneplugin-config-migrator/src/index.js");!function(n){if(console.info("run config main"),null==n)throw new Error("PLUGIN_ID == undefined で呼び出されました。");const i=t.Settings.preference,s=t.Settings.input;new e.ConfigManager(n,s,i).build();new o.ConfigMigrator(n).put_forms("config_body")}(kintone.$PLUGIN_ID)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,