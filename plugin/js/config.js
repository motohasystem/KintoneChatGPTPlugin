/*! For license information please see config.js.LICENSE.txt */
(()=>{var e={"./src/ts/config/settings.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Settings:()=>s});var i=n("../lib/KintoneConfigBuilder.ts/dist/index.js"),l=n("./src/ts/constants.ts");function o(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}class s{}o(s,"preference",{title:"ChatGPT連携プラグインの設定",description:""}),o(s,"input",[{label:"ChatGPTの設定",desc:"API呼び出しに必要な項目を指定します。",type:i.FieldType.Label},{label:"API Key",desc:"ChatGPT APIのAPI Tokenを指定してください。",code:l.CONSTANTS.API_KEY,type:i.FieldType.Text,required:!0,secret:!0,URL:"https://api.openai.com/v1/completions",method:"POST",header:"Authorization Bearer"},{label:"ChatGPTの利用モデル",desc:'利用モデル名を入力してください。デフォルトは "text-davinci-003" です。',code:l.CONSTANTS.MODEL_ID,type:i.FieldType.Text,default:"text-davinci-003",required:!0},{label:"MAX Tokens",desc:"レスポンスの最大トークン長を指定してください。",code:l.CONSTANTS.NUMBER_MAX_TOKENS,type:i.FieldType.Number,default:"256",required:!0},{label:"実行ボタン配置スペース選択",desc:"API呼び出しを実行するボタンを配置するスペースを選択してください。",code:l.CONSTANTS.BTN_SPACE_FIELD,type:i.FieldType.Dropdown_FieldSelect,accept:["SPACER"],required:!0},{label:"固定プロンプト",desc:"入力として毎回渡す固定のプロンプトを記入してください。",code:l.CONSTANTS.STATIC_PROMPT,type:i.FieldType.MultilineText,required:!1},{label:"レコード別プロンプト",desc:"レコード別に指定するプロンプトフィールドを選択してください。",code:l.CONSTANTS.UNIQUE_PROMPT,type:i.FieldType.Dropdown_FieldSelect,accept:["SINGLE_LINE_TEXT","MULTI_LINE_TEXT"],default:l.CONSTANTS.EMPTY_LABEL,required:!1},{label:"レコード編集モード",desc:"有効にするとレコード全体を編集対象として書き換えるモードで動作します。その際、↓以降の設定は無効になります。よくわからない場合はdisableにしておいてください。",code:l.CONSTANTS.FLAG_RECORD_MODIFIER,type:i.FieldType.Radio,accept:l.CONSTANTS.LABELS_RECORD_MODIFIER,default:l.CONSTANTS.LABELS_RECORD_MODIFIER[1],required:!0},{label:"",desc:"",type:i.FieldType.Separator,required:!1},{label:"kintoneのフィールド設定",desc:"入出力フィールドなどを設定します。",type:i.FieldType.Label},{label:"入力フィールド選択",desc:"入力として使用するフィールドを選択してください",code:l.CONSTANTS.INPUT_FIELD,type:i.FieldType.Dropdown_FieldSelect,accept:["SINGLE_LINE_TEXT","MULTI_LINE_TEXT"],required:!0},{label:"出力フィールド選択",desc:"ChatGPTの返答を入力するフィールドを選択してください。",code:l.CONSTANTS.OUTPUT_FIELD,type:i.FieldType.Dropdown_FieldSelect,accept:["MULTI_LINE_TEXT"],required:!0}])},"./src/ts/constants.ts":(e,t,n)=>{"use strict";n.r(t),n.d(t,{CONSTANTS:()=>i});const i={PLUGIN_NAME:"ChatGPT連携プラグイン",EMPTY_LABEL:"----",API_KEY:"api_key",MODEL_ID:"model_id",STATIC_PROMPT:"static_prompt",UNIQUE_PROMPT:"unique_prompt",INPUT_FIELD:"input_field",OUTPUT_FIELD:"output_field",BTN_SPACE_FIELD:"btn_space_field",FLAG_RECORD_MODIFIER:"flag_record_modifier",LABELS_RECORD_MODIFIER:["enable","disable"],NUMBER_MAX_TOKENS:"NUMBER_MAX_TOKENS"}},"../lib/KintoneConfigBuilder.ts/dist/common.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSecretItem=t.FieldType=void 0,function(e){e[e.Dropdown=0]="Dropdown",e[e.Dropdown_FieldSelect=1]="Dropdown_FieldSelect",e[e.Radio=2]="Radio",e[e.Text=3]="Text",e[e.Number=4]="Number",e[e.MultilineText=5]="MultilineText",e[e.Checkbox=6]="Checkbox",e[e.IncrementalTable=7]="IncrementalTable",e[e.Label=8]="Label",e[e.Separator=9]="Separator"}(t.FieldType||(t.FieldType={})),t.isSecretItem=function(e){return"secret"in e}},"../lib/KintoneConfigBuilder.ts/dist/config-builder.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigBuilder=void 0,n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");const l=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),o=n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/common.js"),r=n("../lib/KintoneConfigBuilder.ts/dist/field-builder.js"),c=n("../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js");class a{constructor(e,t){i(this,"props",void 0),i(this,"layout",void 0),i(this,"config",void 0),i(this,"field_builder",void 0),this.props=e,this.config=t,this.field_builder=new r.FieldBuilder(e)}static is_layout_info(e){return!!a.LAYOUT_PARTS.includes(e)}static is_includes_layout_info(e){return e.reduce(((e,t)=>(a.is_layout_info(t)&&(e=!0),e)),!1)}build_incremental_table(e,t){console.log({input_field:e}),console.log({saved_rows:t});const n=new c.IncrementalTableBuilder(e,t,this.field_builder).build(),i=e.table_cols.map((e=>{const t=l.Utils.createElement("span","title");t.textContent=e.header;return l.Utils.createElement("th","kintoneplugin-table-th",[t])}));i.push(l.Utils.createElement("th","kintoneplugin-table-th-blankspace"));const o=l.Utils.createElement("tr","",i),s=l.Utils.createElement("thead","",[o]),r=l.Utils.createElement("tbody","",n);return l.Utils.createElement("table","kintoneplugin-table ms-0",[s,r],"",{id:"table-".concat(e.code)})}static get_grand_tr(e){if(null==e)throw"ERROR: nullが渡されたため祖父要素を取得できません";const t=e,n=null==t?void 0:t.parentNode;return null==n?void 0:n.parentNode}static get_formparts(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const n={};for(const i in e){if(!e.hasOwnProperty(i))continue;const l=e[i],o=l.label,s=l.code,r=l.type;t.includes(r)&&(n[s]={code:s,label:o,option:r})}const i=Object.keys(n).map((e=>({key:e,value:n[e]}))).sort(((e,t)=>e.value.label.toString().toLowerCase()<t.value.label.toString().toLowerCase()?-1:e>t?1:0));return Object.assign({},...i.map((e=>({[e.key]:e.value}))))}static addOnChangeEvent(e){for(const t of e)t.addEventListener("change",(e=>{const t=e.target;if(null==t)return;const n=t[t.selectedIndex];let i=n.getAttribute("option");null==i&&(i="");let l=n.getAttribute("code");null==l&&(l="");const o=t.closest("tr");if(console.log(o),null==o)return;const s=o.getElementsByTagName("input");s[0].value=i,s[1].value=l}))}static build_fields_dropdown(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;const s=a.get_formparts(e,t),r=l.Utils.createElement("select","select-kintone-field");if(r.id=i,null!=o){const e=l.Utils.createElement("option");e.label=o,r.appendChild(e)}for(const e in s){const t=s[e],i=l.Utils.createElement("option");i.setAttribute("fieldcode",e),i.label=t.label,e==n&&i.setAttribute("selected",""),r.appendChild(i)}return l.Utils.createElement("div","",[l.Utils.createElement("div","kintoneplugin-select-outer",[l.Utils.createElement("div","kintoneplugin-select",[r])])])}static async build_fields_dropdown_other_app(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if(null==e||e==o.ConfigUtilities.DEFAULT_OPTION){const e=l.Utils.createElement("select","select-kintone-field");if(e.id=i,null!=s){const t=l.Utils.createElement("option");t.label=s,e.appendChild(t)}return l.Utils.createElement("div","",[l.Utils.createElement("div","kintoneplugin-select-outer",[l.Utils.createElement("div","kintoneplugin-select",[e])])])}const r=await kintone.api("/k/v1/app/form/fields","GET",{app:parseInt(e)});return this.build_fields_dropdown(r.properties,t,n,i,s)}static make_parts_block(e,t,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];console.log("make_parts_block()");const r=l.Utils.buildElement({tagName:"div",className:"mb-3",textContent:n}),c=l.Utils.buildElement({tagName:"div",className:"h4 mb-2",textContent:t});if(o){const e=l.Utils.buildElement({tagName:"span",className:"text-danger",textContent:"*"});c.appendChild(e)}if(s){const e=l.Utils.buildElement({tagName:"span",className:"badge bg-secondary rounded-pill ms-2",textContent:"secret"});c.appendChild(e)}return l.Utils.buildElement({tagName:"div",className:i+" ms-4 mt-4",childElements:[c,r,e]})}static addFieldSelectEvent(e,t,n){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;kintone.api("/k/v1/app/form/fields","GET",{app:n}).then((n=>{var o,s;const r=Object.keys(n.properties).map((e=>n.properties[e])).filter((e=>"SINGLE_LINE_TEXT"==e.type)).map((e=>({code:e.code,label:e.label,option:e.type}))).map((e=>{const t=l.Utils.createElement("option","");return t.label=e.label,t.setAttribute("code",e.code),t.setAttribute("option",e.option),e.code==i&&t.setAttribute("selected",""),t})),c=l.Utils.createElement("select","select-kintone-field",r);c.addEventListener("change",(e=>{var n;console.log({event:e});const i=e.target;if(null==i)return;const l=i[i.selectedIndex],o=a(l);null===(n=t.firstChild)||void 0===n||n.remove(),t.appendChild(o)}));const a=e=>{let t;e?(t=e.getAttribute("code"),null==t&&(t="")):t="";const n=l.Utils.createElement("input","kintoneplugin-input-text",[]);n.setAttribute("value",t),n.setAttribute("disabled","");return l.Utils.createElement("td","kintoneplugin-table-td-control",[l.Utils.createElement("div","kintoneplugin-table-td-control-value",[l.Utils.createElement("div","kintoneplugin-input-outer",[n])])])},d=l.Utils.createElement("div","kintoneplugin-table-td-control-value",[l.Utils.createElement("div","kintoneplugin-select-outer",[l.Utils.createElement("div","kintoneplugin-select",[c])])]);null===(o=e.firstChild)||void 0===o||o.remove(),e.appendChild(d),null===(s=t.firstChild)||void 0===s||s.remove();const u=c.item(c.selectedIndex),p=a(u);t.appendChild(p)}))}static set_switch_event(e,t,n){e.querySelectorAll('input[type="radio"]').forEach((e=>{e.addEventListener(t,n)}))}make_string_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"text";if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const n=e.code,i=this.get_saved_value(this.config,e);console.log({saved_value:i});const o="".concat(t,"-").concat(n),r=l.Utils.createElement("div","kintoneplugin-input-outer",[l.Utils.ce("input","kintoneplugin-input-text",[],"",{type:t,id:o,value:i})]),c="required"in(d=e)&&1==d.required;var d;const u=(e=>!!(0,s.isSecretItem)(e)&&("secret"in e&&1==e.secret))(e);return a.make_parts_block(r,e.label,e.desc,"",c,u)}get_saved_value(e,t){if((0,s.isSecretItem)(t)){const e=kintone.plugin.app.getProxyConfig(t.URL,t.method);console.log({proxy_config:e});let n=t.header;"Authorization Bearer"==n&&(n="Authorization");const i=t.data;if(null!=n){const t=e.headers[n];if(t.startsWith("Bearer")){return t.split(/ /)[1]}return t}if(null!=i)return e.data[i];throw new Error("get_saved_value(): 秘匿情報フィールドとして格納されている情報が不正です。(".concat(e,")"))}let n=e[t.code];return null==n&&(n=null!=t.default?t.default:""),n}make_multiline_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const t=e.code;let n=this.config[t];null==n&&(n=null!=e.default?e.default:""),console.log({saved_value:n});const i="multiline-".concat(t),o=l.Utils.createElement("div","kintoneplugin-input-outer",[l.Utils.ce("textarea","",[],n,{id:i,rows:"10",cols:"60"})]),s="required"in(r=e)&&1==r.required;var r;return a.make_parts_block(o,e.label,e.desc,"",s)}make_checkbox_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");if(null==e||null==e.accept)throw new Error("ConfigBuidler.make_checkbox_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");const t=e.code;let n=this.config[t];null==n&&(n=[]),console.log({saved_value:n});const i="".concat(t),o=e.accept.map((e=>{const t="".concat(i,"-").concat(e);console.log({saved_value:n}),console.log({box_value:e});const o={type:"checkbox",name:"checkbox",value:e,id:t};return n.includes(e)&&(o.checked="checked"),l.Utils.createElement("div","kintoneplugin-input-checkbox",[l.Utils.ce("span","kintoneplugin-input-checkbox-item",[l.Utils.ce("input","kintoneplugin-input-checkbox-item",[],"",o),l.Utils.ce("label","",[],e,{for:t})])])})),s="required"in(r=e)&&1==r.required;var r;return a.make_parts_block(l.Utils.ce("div","",o,"",{id:i}),e.label,e.desc,"",s)}make_radio_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const n=e.code;let i=this.config[n];if(console.log({saved_string:i}),null==i&&null!=e.default&&(i=e.default),null==e||null==e.accept)throw new Error("ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");const o=e.accept.map((e=>{const t="radio-".concat(n,"-").concat(e),o="radio-".concat(n),s=l.Utils.createElement("input");s.setAttribute("type","radio"),s.setAttribute("name",o),s.setAttribute("value",e),s.setAttribute("id",t),e==i&&s.setAttribute("checked","checked");const r=l.Utils.createElement("label","",[],e);return r.setAttribute("for",t),l.Utils.createElement("span","kintoneplugin-input-radio-item",[s,r])})),s=l.Utils.createElement("div","kintoneplugin-input-radio",o);s.id=n;const r="required"in(c=e)&&1==c.required;var c;return a.make_parts_block(s,e.label,e.desc,t,r)}make_dropdown_fieldselect_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const n=[],i=[];if(null==e.accept)throw new Error("ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");if(e.accept.forEach((e=>{a.is_layout_info(e)?i.push(e):n.push(e)})),null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");if(i.length>0&&null==this.layout)throw new Error("レイアウト情報をロードしていません。load_layout_info() を事前に呼び出してください。");if(i.length>0&&n.length>0)throw new Error("フォーム情報のフィールドとレイアウト情報のフィールドとが混在したドロップダウンは構築できません。");const l=e.code,o=this.config[l];let s;if(n.length>0)s=a.build_fields_dropdown(this.props,n,o,l,e.default);else{if(!(i.length>0))throw new Error("フォーム情報またはレイアウト情報が空欄で呼び出されました");s=a.build_fields_dropdown(this.layout,i,o,l,e.default)}const r="required"in(c=e)&&1==c.required;var c;return a.make_parts_block(s,e.label,e.desc,t,r)}make_incremental_table_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const t=e.code,n=this.config[t];console.log(n);const i=this.build_incremental_table(e,n);return a.make_parts_block(i,e.label,e.desc)}make_subtitle_block(e){const t=l.Utils.ce("div","display-6 mb-3",[],e.label),n=l.Utils.ce("div","ms-4 mt-2 mb-5",[],e.desc);return l.Utils.createElement("div","",[t,n])}async load_layout_info(){const e=await kintone.api("/k/v1/preview/app/form/layout","GET",{app:kintone.app.getId()});console.log(e);const t=e.layout.reduce(((e,t)=>{if("GROUP"==t.type){console.log("curr: ".concat(t.type));const n=t.layout.reduce(((e,t)=>{const n=t.fields.filter((e=>(console.log(e.type),"SPACER"==e.type)));return e=e.concat(n),console.log("row_prev: ".concat(e)),e}),[]);e.concat(n)}else e=e.concat(t.fields.filter((e=>"SPACER"==e.type)));return e}),[]);this.layout=t.reduce(((e,t)=>(t.code=t.elementId,t.label=t.elementId,e[t.code]=t,e)),{}),console.log(this.layout)}}i(a,"LAYOUT_PARTS",["SPACER"]),t.ConfigBuilder=a},"../lib/KintoneConfigBuilder.ts/dist/config-manager.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigManager=void 0,n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");const l=n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),o=n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/common.js"),r=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js");t.ConfigManager=class{constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;i(this,"KEY_CONFIG","config"),i(this,"setting_input",void 0),i(this,"config",{}),i(this,"hooks",{});const l=kintone.plugin.app.getConfig(e);this.set_config(l),console.log(this.config),this.setting_input=t,n&&this.set_preference(n)}set_preference(e){const t=document.getElementById("plugin_title");t&&(t.textContent=e.title);const n=document.getElementById("plugin_description");n&&(n.textContent=e.description)}build(){kintone.api("/k/v1/preview/app/form/fields","GET",{app:kintone.app.getId()}).then((async e=>{const t=this.make_setting_fields(e.properties),n=this.make_button_submit(),i=this.make_button_cancel(),l=(async()=>{const e=r.Utils.createElement("form","",await t);return e.id="form_settings",e})(),o=document.getElementById("config_body");null==o||o.appendChild(await l);const s=r.Utils.createElement("div","mt-5",[i,n]);null==o||o.appendChild(s)})).then((e=>{this.call_target_event("load")})).catch((e=>{throw e}))}async call_target_event(e){const t=this.hooks[e];if(null!=t)for(const e of t)null!=e&&(console.log({func:e}),await e());else console.info("イベント[".concat(e,"]は未登録です。"))}layout_inputs(e,t){return t.map((t=>this.make_paragraph(e,t)))}make_paragraph(e,t){switch(t.type){case s.FieldType.Text:return e.make_string_block(t);case s.FieldType.MultilineText:return e.make_multiline_block(t);case s.FieldType.Radio:return e.make_radio_block(t);case s.FieldType.Number:return e.make_string_block(t,"number");case s.FieldType.Checkbox:return e.make_checkbox_block(t);case s.FieldType.IncrementalTable:return e.make_incremental_table_block(t);case s.FieldType.Label:return e.make_subtitle_block(t);case s.FieldType.Separator:return r.Utils.createElement("div","mt-5 bg-info");case s.FieldType.Dropdown_FieldSelect:if(!("accept"in t))throw new Error("プロパティ accept が必要です。config/settings.ts の設定を見直してください。");return e.make_dropdown_fieldselect_block(t);default:throw new Error("未実装のFieldTypeを要求しています。".concat(t.type," を実装してください。"))}}set_config(e){const t=r.Utils.get_from(e,this.KEY_CONFIG,"");""==t?console.info("設定値がありません。初期値で開始します。"):this.config=JSON.parse(t)}get_config(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(null==e)return this.config;if(e in this.config)return this.config[e];throw new Error("未定義または未設定の設定キーが指定されました: [".concat(e,"]"))}async make_setting_fields(e){const t=new o.ConfigBuilder(e,this.config);return await t.load_layout_info(),this.layout_inputs(t,this.setting_input)}isSecretItem(e){return"secret"in e}secret_parameters(e){const t=this.setting_input.filter((e=>(0,s.isSecretItem)(e)));return this.make_proxy_params(t,e)}make_proxy_params(e,t){const n=e.reduce(((e,t)=>{const n=t.method+":"+t.URL;return null==e[n]&&(e[n]=[]),e[n].push(t),e}),{}),i=Object.keys(n).reduce(((e,i)=>{const l=n[i];console.log({secrets:l});const o=e=>{const n=t.get_text_value(e.code);if("required"in e||(e.required=!1),1==e.required&&(null==n||null==n||""==n))throw new Error("必須の項目[".concat(e.label,"]が未記入です。"));return null==n||null==n?"":n},s=l.filter((e=>"header"in e)).reduce(((e,t)=>{const n=o(t);if(null==t.header)throw new Error("秘匿設定のheader要素が未定義です。");return"Authorization Bearer"==t.header?e.Authorization="Bearer "+n:e[t.header]=n,e}),{}),r=l.filter((e=>"data"in e)).reduce(((e,t)=>{const n=o(t);if(null==t.data)throw new Error("秘匿設定のdata要素が未定義です");return e[t.data]=n,e}),{}),c={URL:l[0].URL,method:l[0].method,headers:s,data:r};return e.push(c),e}),[]);return i}store_parameters(e){const t={};return this.setting_input.forEach((n=>{if(n.type==s.FieldType.Label||n.type==s.FieldType.Separator)return;if("secret"in n&&1==n.secret)return;const i=n.code,l=n.required;console.log({code:i});const o=e.get_selected(i,n.type);if(o)t[i]=o;else{if(l){const e="必須の設定項目 [".concat(n.label,"] が未設定です(").concat(i,")");throw console.error(e),new Error(e)}t[i]=""}})),console.log(t),t}make_button_submit(){const e=r.Utils.createElement("button","kintoneplugin-button-dialog-ok");return e.setAttribute("type","button"),e.textContent="適用",e.addEventListener("keydown",(e=>{if(e.isComposing||"Enter"==e.code)return console.info("適用ボタンのenterを無効化しました。"),!1})),e.addEventListener("click",(async e=>{e.preventDefault();const t=document.getElementById("form_settings");if(null==t)throw"ERROR: フォーム要素を取得できませんでした。";await this.call_target_event("submit").catch((e=>{const t="⛔ 設定の保存でエラーが発生しました。（".concat(e,"）");throw console.log(t),alert(t),new Error(t)}));const n=new l.ConfigUtilities(t);let i,o;try{i=this.secret_parameters(n),console.log({proxy_params:i})}catch(t){console.log("call 6");const n="⛔ 設定値の保存でエラーが発生しました。設定値を見直してください。（".concat(t,"）");return alert(n),console.log("call 7"),e}i.forEach((async e=>{console.log({param:e});const t=kintone.plugin.app.setProxyConfig(e.URL,e.method,e.headers,e.data,(()=>{console.log({result:t})}))}));try{console.log("call 1"),o=this.store_parameters(n),console.log("call 2"),setTimeout((()=>{console.log("call 3");const e=JSON.stringify(o);console.log(e);const t={};t[this.KEY_CONFIG]=e,console.log("call 4"),kintone.plugin.app.setConfig(t)}),200)}catch(t){return console.log("call 6"),alert("⛔ 設定値の保存でエラーが発生しました。設定値を見直してください。（".concat(t,"）")),console.log("call 7"),e}})),console.log("call 8"),e}make_button_cancel(){const e=r.Utils.createElement("button","js-cancel-button kintoneplugin-button-dialog-cancel");return e.textContent="キャンセル",e.addEventListener("click",(function(e){console.log(e),window.location.href="../../"+kintone.app.getId()+"/plugin/"})),e}add_hook(e,t){var n;null==this.hooks[e]&&(this.hooks[e]=[]),null===(n=this.hooks[e])||void 0===n||n.push(t)}}},"../lib/KintoneConfigBuilder.ts/dist/config-utilities.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigUtilities=void 0;const l=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),o=n("../lib/KintoneConfigBuilder.ts/dist/common.js");class s{constructor(e){i(this,"config_form",void 0),i(this,"whole_selected_field_codes",void 0),i(this,"add_selected_field_codes",(e=>{this.whole_selected_field_codes.push(e)})),i(this,"get_selected_fieldcode",(e=>{console.log("[ConfigTinker] get_selected_fieldcode(): ".concat(e));const t=document.getElementById(e);if(-1==t.selectedIndex)return"";if(t.options[t.selectedIndex].label==s.DEFAULT_OPTION)return"";const n=t.selectedOptions[0].getAttribute("fieldcode");if(null==n)throw new Error("ノード[ ".concat(e," ]はフィールド選択ではありません。"));return n})),i(this,"get_selected_label",(e=>{console.log("[ConfigTinker] get_selected_label(): ".concat(e));const t=document.getElementById(e);if(null==t)throw new Error("ConfigUtilities.get_selected_label(): 指定のID'".concat(e,"'が null でした。"));return-1==t.selectedIndex?"":t.selectedOptions[0].label})),i(this,"get_checked_boxes",(e=>{console.log("[ConfigTinker] get_checked_boxes(): ".concat(e));const t=document.querySelectorAll('[id^="'.concat(e,'-"]'));if(0==t.length)throw new Error("ConfigUtilities.get_checked_boxes(): 指定のID'".concat(e,"-'から始まるチェックボックスが見つかりませんでした。"));const n=Array.from(t).reduce(((e,t)=>(t.checked&&e.push(t.value),e)),[]);return console.log({checked_labels:n}),n})),this.config_form=e,this.whole_selected_field_codes=[]}is_overlapped(e){return l.Utils.is_overlapped(this.overlapped(e))}overlapped(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return null!=e&&this.whole_selected_field_codes.concat(e),l.Utils.overlapped(this.whole_selected_field_codes)}clear_selected_field_labels(){this.whole_selected_field_codes=[]}get_selected_radio(e){const t="radio-".concat(e);console.log("[ConfigTinker] get_selected_radio(): ".concat(t));const n=document.getElementsByName(t),i=n.length;for(let e=0;e<i;e++){const t=n[e];if(1==t.checked)return t.value}return""}get_text_value(e){const t="text-".concat(e);console.log("[ConfigTinker] get_text_value(): ".concat(t));return document.getElementById(t).value}get_multilinetext_value(e){const t="multiline-".concat(e);console.log("[ConfigTinker] get_multiline_value(): ".concat(t));return document.getElementById(t).value}get_number_value(e){const t="number-".concat(e);console.log("[ConfigTinker] get_number_value(): ".concat(t));return document.getElementById(t).value}get_incremental_table_values(e){const t="table-".concat(e),n=document.getElementById(t);if(console.log(t),console.log(n),null==n)throw new Error("指定したテーブルが見つかりません。(id: ".concat(t,")"));return this.abstruct_from_incremental_table(n)}abstruct_from_incremental_table(e){const t=Array.from(e.rows).filter((e=>{var t;return"TH"==(null===(t=e.firstChild)||void 0===t?void 0:t.nodeName)})).map((e=>{const t=Array.from(e.cells).filter((e=>""!=e.innerText)).map((e=>e.innerText));return console.log(t),t}))[0];console.log({headers:t});const n=Array.from(e.rows).filter((e=>{var t;return"TH"!=(null===(t=e.firstChild)||void 0===t?void 0:t.nodeName)})).map((e=>Array.from(e.cells).filter((e=>{const t=e.getElementsByClassName("kintoneplugin-input-text")[0],n=e.getElementsByClassName("select-kintone-field")[0],i=e.getElementsByClassName("kintoneplugin-input-checkbox-item");return void 0!==t||void 0!==n||void 0!==i})).map((t=>{const n=t.getElementsByClassName("kintoneplugin-input-text")[0];if(console.log({input_element:n}),null!=n)return n.value;const i=t.getElementsByClassName("select-kintone-field")[0];if(console.log({selected_element:i}),null!=i){const e=i.selectedIndex;console.log({index:e});const t=i[e];if("fieldcode"in i[e].attributes){console.log("selected_element fieldcode: ".concat(t.getAttribute("fieldcode")));const e=t.getAttribute("fieldcode");if(null!=e)return e}return i[e].label}console.log({cell:t});const l=t.getElementsByClassName("kintoneplugin-input-checkbox");if(console.log({checkbox_items:l}),null!=l)return Array.from(l).filter((e=>e.childNodes[0].childNodes[0].checked)).map((e=>{if(console.log({item:e}),null==e.textContent)throw new Error("ラベルのないチェックボックスが定義されています。");return e.textContent}));throw new Error("未対応のテーブルセル ".concat(e," が渡されました。"))}))));console.log({values:n});const i=n.filter((e=>e.length>0)).filter((e=>e.filter((e=>e.length>0)).length>0));if(console.log(i),0==i.length)return null;const l=n.map((e=>e.reduce(((e,n,i)=>(e[t[i]]=n,e)),{})));return console.log({table_values:l}),l}get_selected(e,t){switch(t){case o.FieldType.Dropdown:return this.get_selected_label(e);case o.FieldType.Checkbox:return this.get_checked_boxes(e);case o.FieldType.Radio:return this.get_selected_radio(e);case o.FieldType.Dropdown_FieldSelect:return this.get_selected_fieldcode(e);case o.FieldType.Text:return this.get_text_value(e);case o.FieldType.Number:return this.get_number_value(e);case o.FieldType.MultilineText:return this.get_multilinetext_value(e);case o.FieldType.IncrementalTable:return this.get_incremental_table_values(e)}throw new Error("get_selected(): 不明なフィールドタイプが渡されました (field_type: ".concat(t,")"))}}i(s,"DEFAULT_OPTION","----"),t.ConfigUtilities=s},"../lib/KintoneConfigBuilder.ts/dist/field-builder.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.FieldBuilder=void 0;const l=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),o=n("../lib/KintoneConfigBuilder.ts/dist/common.js"),s=n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),r=n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js");t.FieldBuilder=class{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.ConfigUtilities.DEFAULT_OPTION;i(this,"props",void 0),i(this,"empty_label",void 0),i(this,"build_textcell",(e=>(e=void 0===e?"":e,l.Utils.createElement("div","kintoneplugin-input-outer",[l.Utils.createElement("input","kintoneplugin-input-text",[],void 0,{type:"text",value:e})])))),i(this,"build_checkbox_cell",((e,t,n,i)=>{const o=t.accept.map((t=>{const o="".concat(n,"-").concat(i,"-").concat(t);e=void 0===e?[]:e,console.log({box_value:t}),console.log({preset:e});const s=e.includes(t)?"checked":"",r=l.Utils.ce("input","",[],"",{type:"checkbox",name:"checkbox",value:t,id:o});return""!=s&&r.setAttribute("checked",s),l.Utils.ce("div","kintoneplugin-input-checkbox",[l.Utils.createElement("span","kintoneplugin-input-checkbox-item",[r,l.Utils.ce("label","",[],t,{for:o})])])}));return l.Utils.createElement("div","",o)})),i(this,"build_dropdown_cell",((e,t)=>{if(null==t||!("accept"in t))throw new Error("選択肢情報としてundefinedが渡されました。");e=void 0===e?"":e;const n=l.Utils.createElement("select","select-kintone-field");if(null!=t.empty_label){const e=l.Utils.createElement("option");e.label=t.empty_label,n.appendChild(e)}return t.accept.forEach((t=>{const i=l.Utils.createElement("option");i.label=t,t==e&&i.setAttribute("selected",""),n.appendChild(i)})),l.Utils.createElement("div","",[l.Utils.createElement("div","kintoneplugin-select-outer",[l.Utils.createElement("div","kintoneplugin-select",[n])])])})),i(this,"build_dropdown_fieldselect_cell",((e,t)=>{if(null==t||!("accept"in t))throw new Error("選択肢情報としてundefinedが渡されました。");const n=s.ConfigBuilder.get_formparts(this.props,t.accept),i=l.Utils.createElement("select","select-kintone-field");i.id=void 0===e?"":e;const o=l.Utils.createElement("option");o.label=this.empty_label,i.appendChild(o);const r=!!t.footnote&&t.footnote;for(const t in n){const o=n[t],s=l.Utils.createElement("option");s.setAttribute("fieldcode",t),s.label=r?o.label+" [".concat(t,"]"):o.label,t==e&&s.setAttribute("selected",""),i.appendChild(s)}return l.Utils.createElement("div","",[l.Utils.createElement("div","kintoneplugin-select-outer",[l.Utils.createElement("div","kintoneplugin-select",[i])])])})),this.props=e,this.empty_label=t}build_table_cell(e,t,n,i){if("accept"in t)switch(t.type){case o.FieldType.Checkbox:return this.build_checkbox_cell(n,t,e,i);case o.FieldType.Dropdown:return this.build_dropdown_cell(n,t);case o.FieldType.Dropdown_FieldSelect:return this.build_dropdown_fieldselect_cell(n,t)}else if(t.type===o.FieldType.Text)return this.build_textcell(n);throw new Error("未定義のFieldTypeが渡されました。FieldTypeに".concat(t.type," を実装してください。"))}}},"../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js":(e,t,n)=>{"use strict";function i(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var i=n.call(e,t||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0}),t.IncrementalTableBuilder=void 0;const l=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),o=n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js");t.IncrementalTableBuilder=class{constructor(e,t,n){i(this,"table_conf",void 0),i(this,"saved_rows",void 0),i(this,"table_rows",void 0),i(this,"field_builder",void 0),i(this,"rows_count",void 0),this.table_conf=e,this.saved_rows=t,this.field_builder=n,this.table_rows=[],this.rows_count=0}build(){const e=this.table_conf.table_cols,t=e.length-3;return null==this.saved_rows||0==Object.keys(this.saved_rows).length?this.table_rows.push(this.build_table_row(0,e,void 0,t)):this.saved_rows.forEach(((n,i)=>{const l=this.build_table_row(i,e,n,t);this.table_rows.push(l)})),this.table_rows}build_table_row(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;console.log({table_cols:t}),console.log({saved_data:n});const o=[];for(let i=0;i<t.length;i++){const s=t[i],r=null==n?void 0:n[s.header];console.log({value:r});const c=this.field_builder.build_table_cell(this.table_conf.code,s,r,e);o.push(l.Utils.ce("td","",[l.Utils.ce("div","kintoneplugin-table-td-control",[l.Utils.ce("div","kintoneplugin-table-td-control-value",[c])])]))}const s=this.create_button_row_add(t),r=this.create_button_row_remove();console.log({spacer_cols:i}),i=i<0?0:i;const c=[...Array(i)].map((()=>l.Utils.createElement("td","td_spacer"))),a=[...o,...c,l.Utils.createElement("td","kintoneplugin-table-td-operation",[s,r])];this.rows_count=o.length;return l.Utils.createElement("tr","",a)}get_table_rows_count(){const e="table-".concat(this.table_conf.code),t=document.getElementById(e);if(t)return t.getElementsByTagName("tr").length;throw new Error("指定したテーブルID ".concat(e," が存在しません。"))}create_button_row_add(e){const t=document.createElement("button");return t.className="kintoneplugin-button-add-row-image",t.setAttribute("type","button"),t.setAttribute("title","Add row"),t.addEventListener("click",(t=>{console.log("テーブルを一行追加する".concat(t));const n=o.ConfigBuilder.get_grand_tr(t.target),i=null==n?void 0:n.parentNode;if(null==n||null==i)throw"ERROR: 祖先のtbodyを取得できませんでした。";if(null==(null==t?void 0:t.target))return;const l=n.children.length-1-e.length,s=this.get_table_rows_count()+1,r=this.build_table_row(s,e,void 0,l);i.insertBefore(r,n.nextElementSibling)})),t}create_button_row_remove(){const e=document.createElement("button");return e.className="kintoneplugin-button-remove-row-image",e.setAttribute("type","button"),e.setAttribute("title","Delete this row"),e.addEventListener("click",(e=>{var t,n;const i=o.ConfigBuilder.get_grand_tr(e.target);1!=(null===(t=i.parentNode)||void 0===t?void 0:t.childNodes.length)&&(null===(n=i.parentNode)||void 0===n||n.removeChild(i),console.log("テーブルを一行削除する".concat(e)))})),e}}},"../lib/KintoneConfigBuilder.ts/dist/index.js":function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),l=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),l(n("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),t),l(n("../lib/KintoneConfigBuilder.ts/dist/config-manager.js"),t),l(n("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),t),l(n("../lib/KintoneConfigBuilder.ts/dist/field-builder.js"),t),l(n("../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js"),t),l(n("../lib/KintoneConfigBuilder.ts/dist/common.js"),t)},"../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js":e=>{e.exports={}},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/button_installer.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonInstaller=void 0;const i=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js");n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");t.ButtonInstaller=class{class_hms_button="button-hms-items";buttons=[];canvas;constructor(e=""){""!=e&&(this.class_hms_button=e)}create_button(e,t=""){const n=i.Utils.ce("span","",[],e);n.style.color="dodgerblue";let l=i.Utils.ce("button",this.class_hms_button,[n],"",{title:t});return l=i.Utils.decorate_menu_icon(l),console.log(e.length),e.length>2&&(l.style.fontSize="16px"),l}add_button(e){this.buttons.push(e)}install(){this.already_installed()?console.info("ボタンはすでに設置済みです。"):0!=this.buttons.length?this.put_buttons(this.buttons):console.info("ボタンが設定されていません。何もせずに終了します。")}set_canvas(e){this.canvas=e}get_hms(){const e=kintone.app.getHeaderMenuSpaceElement();if(null==e){const e="ボタン配置スペースが取得できませんでした。";throw console.error(e),new Error(e)}return e}already_installed(){return document.getElementsByClassName(this.class_hms_button).length>0}put_buttons(e){const t=void 0===this.canvas?this.get_hms():this.canvas;e.forEach((e=>{console.log(t),t.append(e)}))}get_header_element(e){const t=document.querySelectorAll(".recordlist-header-label-gaia");return Array.from(t).filter((t=>t.textContent==e))}}},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js":function(e,t,n){"use strict";var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),l=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),l(n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js"),t),l(n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/button_installer.js"),t),l(n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/plugin_canvas.js"),t)},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/plugin_canvas.js":(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PluginCanvas=void 0;const i=n("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js");n("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");class l{static CLASS_DISMISS="offcanvas-dismiss";id_island;id_offcanvas;title_offcanvas;island;enable_offcanvas;constructor(e,t,n=null,l){if(this.title_offcanvas=e,this.id_island=`plugin_island_id_${t}`,this.id_offcanvas=`offcanvas_${this.id_island}`,""==t){if(console.log(`[${this.constructor.name}] オフキャンバスを使いません。`),null==n&&(n=kintone.app.getHeaderMenuSpaceElement()),null==n)throw new Error("kintone.app.HeaderMenuSpaceElement() を取得できませんでした。");return this.island=n,void(this.enable_offcanvas=!1)}this.enable_offcanvas=!0;const o=document.getElementById(this.id_island);if(o)console.log(`[${this.constructor.name}] 既存のオフキャンバスを使用します。`),this.island=o;else{console.log(`[${this.constructor.name}] オフキャンバスをID[${this.id_island}]で作成します。`);const e=(e=>{if(e)return e;{const e=i.Utils.ce("span","",[],"🎈");return e.style.cursor="pointer",e}})(l);e.style.color="dodgerblue";let t=i.Utils.ce("div","bbk-tool-icon-box",[e],"",{id:this.id_island,"data-bs-toggle":"offcanvas","aria-controls":this.id_offcanvas,"data-bs-target":`#${this.id_offcanvas}`});t=i.Utils.decorate_menu_icon(t),this.island=t,this.init_offcanvas()}}init_offcanvas(){const e=kintone.app.getHeaderMenuSpaceElement();e&&(e.appendChild(this.get_node()),e.appendChild(this.build_node_offcanvas()))}get_node(){return this.island}build_node_offcanvas(){return i.Utils.ce("div","offcanvas offcanvas-start",[i.Utils.ce("div","offcanvas-header",[i.Utils.ce("h5","offcanvas-title",[],this.title_offcanvas,{id:`${this.id_offcanvas}Label`}),i.Utils.ce("button","btn-close text-reset",[],"",{"data-bs-dismiss":"offcanvas","aria-label":"Close"})]),i.Utils.ce("div","offcanvas-body",[i.Utils.ce("div","mb-4",[],"ここから各種プラグインを呼び出せます。")],"",{id:`${this.id_offcanvas}-body`})],"",{tabindex:"-1",id:`${this.id_offcanvas}`,"aria-labelledby":`${this.id_offcanvas}Label`,"data-bs-backdrop":"false"})}append(e){if(this.enable_offcanvas){const t=document.getElementById(`${this.id_offcanvas}-body`);this.deal_dismiss_attribute(e),t?.appendChild(e)}else this.island.append(e)}deal_dismiss_attribute(e){const t=Array.from(e.querySelectorAll(`.${l.CLASS_DISMISS}`));console.log(t),t.length>0?t.map((e=>{e.setAttribute("data-bs-dismiss","offcanvas")})):e.setAttribute("data-bs-dismiss","offcanvas")}}t.PluginCanvas=l},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;class n{static unique_properties(e,t=!1){const n=[];for(const i of Object.keys(e)){const l=e[i];(1==l.unique||t&&"RECORD_NUMBER"==l.type)&&n.push(l)}return n}static is_not_empty_string(e){return!n.is_empty_string(e)}static is_empty_string(e){return null==e||null==e||!(e.length>0)}static get_from=(e,t,n)=>e.hasOwnProperty(t)?e[t]:n;static buildElement=e=>{const t=e.tagName,i=e.className?e.className:"",l=e.childElements?e.childElements:[],o=e.textContent?e.textContent:"",s=e.attrs?e.attrs:{};return n.createElement(t,i,l,o,s)};static createElement=(e,t="",n=[],i="",l)=>{const o=document.createElement(e);return o.className=t,o.textContent=i,n.length>0&&n.forEach((e=>{o.appendChild(e)})),l&&Object.entries(l).forEach((([e,t])=>{o.setAttribute(e,t)})),o};static ce=(e,t="",n=[],i="",l)=>this.createElement(e,t,n,i,l);static decorate_menu_icon(e){return e.style.height="48px",e.style.backgroundColor="#f7f9fa",e.style.fontSize="28px",e.style.border="1px solid #e3e7e8",e.style.display="inline",e.style.marginLeft="2px",e.style.marginRight="2px",e.style.verticalAlign="middle",e}static simpleDiv=e=>n.createElement("div","",[],e);static is_overlapped=e=>n.overlapped(e).length>0;static overlapped=e=>{const t=e.filter(((e,t,n)=>n.indexOf(e)!==n.lastIndexOf(e)));return Array.from(new Set(t))};static get_application_url(e){return`${location.protocol}//${location.host}/k/${e}`}static retrieve_errors(e,t=-1){const n=e?.error?.errors;if(null==n)return;let i=[];if(Object.keys(n).forEach((e=>{const t=n[e].messages.map((t=>`[${e}] ${t}`));i=i.concat(t)})),i.sort(),t>=0&&t<i.length){const e=i.length-t;i=i.splice(0,t),i.push(`以下${e}件のエラーメッセージを省略しました。`)}return i}}t.Utils=n}},t={};function n(i){var l=t[i];if(void 0!==l)return l.exports;var o=t[i]={exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};(()=>{"use strict";n.r(i);var e=n("../lib/KintoneConfigBuilder.ts/dist/index.js"),t=n("./src/ts/config/settings.ts");!function(n){if(console.info("run config main"),null==n)throw new Error("PLUGIN_ID == undefined で呼び出されました。");const i=t.Settings.preference,l=t.Settings.input;new e.ConfigManager(n,l,i).build()}(kintone.$PLUGIN_ID)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0NDbEZtWixFQUFvQlUsRUFBS3RkLElBQ0gsb0JBQVh1ZCxRQUEwQkEsT0FBT0MsYUFDMUMxZCxPQUFPQyxlQUFlQyxFQUFTdWQsT0FBT0MsWUFBYSxDQUFFdmQsTUFBTyxXQUU3REgsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sR0FBTyxpSUNGOUQsU0FBV2lNLEdBS1AsR0FIQXBLLFFBQVFvTSxLQUFLLG1CQUdJcE4sTUFBYm9MLEVBQ0EsTUFBTSxJQUFJeEQsTUFBTSxxQ0FHcEIsTUFBTStVLEVBQWdCMWUsRUFBQUEsU0FBQUEsV0FDaEJvTixFQUFnQnBOLEVBQUFBLFNBQUFBLE1BQ04sSUFBSWlOLEVBQUFBLGNBQWNFLEVBQVdDLEVBQWVzUixHQUNwRHZiLE9BRVgsQ0FkRCxDQWNHK0QsUUFBUXlYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi9zcmMvdHMvY29uZmlnL3NldHRpbmdzLnRzIiwid2VicGFjazovL2tpbnRhbl9sYWJfY2hhdGdwdF9zYW1wbGVfcGx1Z2luLy4vc3JjL3RzL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9raW50YW5fbGFiX2NoYXRncHRfc2FtcGxlX3BsdWdpbi8uLi9saWIvS2ludG9uZUNvbmZpZ0J1aWxkZXIudHMvZGlzdC9jb21tb24uanMiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi4vbGliL0tpbnRvbmVDb25maWdCdWlsZGVyLnRzL2Rpc3QvY29uZmlnLWJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi4vbGliL0tpbnRvbmVDb25maWdCdWlsZGVyLnRzL2Rpc3QvY29uZmlnLW1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi4vbGliL0tpbnRvbmVDb25maWdCdWlsZGVyLnRzL2Rpc3QvY29uZmlnLXV0aWxpdGllcy5qcyIsIndlYnBhY2s6Ly9raW50YW5fbGFiX2NoYXRncHRfc2FtcGxlX3BsdWdpbi8uLi9saWIvS2ludG9uZUNvbmZpZ0J1aWxkZXIudHMvZGlzdC9maWVsZC1idWlsZGVyLmpzIiwid2VicGFjazovL2tpbnRhbl9sYWJfY2hhdGdwdF9zYW1wbGVfcGx1Z2luLy4uL2xpYi9LaW50b25lQ29uZmlnQnVpbGRlci50cy9kaXN0L2luY3JlbWVudGFsLXRhYmxlLWJ1aWxkZXIuanMiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi4vbGliL0tpbnRvbmVDb25maWdCdWlsZGVyLnRzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi4vbGliL0tpbnRvbmVDb25maWdCdWlsZGVyLnRzL25vZGVfbW9kdWxlcy9Ac2hpbi1jaGFuL2t5cGVzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9raW50YW5fbGFiX2NoYXRncHRfc2FtcGxlX3BsdWdpbi8uLi9saWIvS2ludG9uZUNvbmZpZ0J1aWxkZXIudHMvbm9kZV9tb2R1bGVzL2NvbW1vbnV0aWxzL2Rpc3QvYnV0dG9uX2luc3RhbGxlci5qcyIsIndlYnBhY2s6Ly9raW50YW5fbGFiX2NoYXRncHRfc2FtcGxlX3BsdWdpbi8uLi9saWIvS2ludG9uZUNvbmZpZ0J1aWxkZXIudHMvbm9kZV9tb2R1bGVzL2NvbW1vbnV0aWxzL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi4vbGliL0tpbnRvbmVDb25maWdCdWlsZGVyLnRzL25vZGVfbW9kdWxlcy9jb21tb251dGlscy9kaXN0L3BsdWdpbl9jYW52YXMuanMiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi4vbGliL0tpbnRvbmVDb25maWdCdWlsZGVyLnRzL25vZGVfbW9kdWxlcy9jb21tb251dGlscy9kaXN0L3V0aWxzLmpzIiwid2VicGFjazovL2tpbnRhbl9sYWJfY2hhdGdwdF9zYW1wbGVfcGx1Z2luL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2tpbnRhbl9sYWJfY2hhdGdwdF9zYW1wbGVfcGx1Z2luL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2tpbnRhbl9sYWJfY2hhdGdwdF9zYW1wbGVfcGx1Z2luL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9raW50YW5fbGFiX2NoYXRncHRfc2FtcGxlX3BsdWdpbi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2tpbnRhbl9sYWJfY2hhdGdwdF9zYW1wbGVfcGx1Z2luL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8va2ludGFuX2xhYl9jaGF0Z3B0X3NhbXBsZV9wbHVnaW4vLi9zcmMvdHMvY29uZmlnL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRmllbGRUeXBlLCBLaW50b25lQ29uZmlnU2V0dGluZywgS2ludG9uZVBsdWdpblByZWZlcmVuY2UgfSBmcm9tIFwicGx1Z2luLXBhcmFtZXRlcnMtaGVscGVyXCI7XHJcbmltcG9ydCB7IENPTlNUQU5UUyB9IGZyb20gXCIuLi9jb25zdGFudHNcIjtcclxuXHJcbi8vIOioreWumumgheebruOBq+mWouOBmeOCi+ioreWumuOAgeODh+OCueOCr+ODiOODg+ODl+WBtOOBi+OCieOCguWPgueFp+OBmeOCi+OAglxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgLy8g6Kit5a6a6aCF55uu44Gu5a6a576pXHJcbiAgICBzdGF0aWMgcHJlZmVyZW5jZTogS2ludG9uZVBsdWdpblByZWZlcmVuY2UgPSB7XHJcbiAgICAgICAgJ3RpdGxlJzogJ0NoYXRHUFTpgKPmkLrjg5fjg6njgrDjgqTjg7Pjga7oqK3lrponXHJcbiAgICAgICAgLCAnZGVzY3JpcHRpb24nOiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpbnB1dDogS2ludG9uZUNvbmZpZ1NldHRpbmcgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAnbGFiZWwnOiAnQ2hhdEdQVOOBruioreWumidcclxuICAgICAgICAgICAgLCAnZGVzYyc6ICdBUEnlkbzjgbPlh7rjgZfjgavlv4XopoHjgarpoIXnm67jgpLmjIflrprjgZfjgb7jgZnjgIInXHJcbiAgICAgICAgICAgICwgJ3R5cGUnOiBGaWVsZFR5cGUuTGFiZWxcclxuICAgICAgICB9XHJcbiAgICAgICAgLCB7XHJcbiAgICAgICAgICAgICdsYWJlbCc6ICdBUEkgS2V5J1xyXG4gICAgICAgICAgICAsICdkZXNjJzogJ0NoYXRHUFQgQVBJ44GuQVBJIFRva2Vu44KS5oyH5a6a44GX44Gm44GP44Gg44GV44GE44CCJ1xyXG4gICAgICAgICAgICAsICdjb2RlJzogQ09OU1RBTlRTLkFQSV9LRVlcclxuICAgICAgICAgICAgLCAndHlwZSc6IEZpZWxkVHlwZS5UZXh0XHJcbiAgICAgICAgICAgICwgJ3JlcXVpcmVkJzogdHJ1ZVxyXG4gICAgICAgICAgICAsICdzZWNyZXQnOiB0cnVlXHJcbiAgICAgICAgICAgICwgJ1VSTCc6ICdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxL2NvbXBsZXRpb25zJ1xyXG4gICAgICAgICAgICAsICdtZXRob2QnOiAnUE9TVCdcclxuICAgICAgICAgICAgLCAnaGVhZGVyJzogJ0F1dGhvcml6YXRpb24gQmVhcmVyJ1xyXG4gICAgICAgIH1cclxuICAgICAgICAsIHtcclxuICAgICAgICAgICAgJ2xhYmVsJzogJ0NoYXRHUFTjga7liKnnlKjjg6Ljg4fjg6snXHJcbiAgICAgICAgICAgICwgJ2Rlc2MnOiAn5Yip55So44Oi44OH44Or5ZCN44KS5YWl5Yqb44GX44Gm44GP44Gg44GV44GE44CC44OH44OV44Kp44Or44OI44GvIFwidGV4dC1kYXZpbmNpLTAwM1wiIOOBp+OBmeOAgidcclxuICAgICAgICAgICAgLCAnY29kZSc6IENPTlNUQU5UUy5NT0RFTF9JRFxyXG4gICAgICAgICAgICAsICd0eXBlJzogRmllbGRUeXBlLlRleHRcclxuICAgICAgICAgICAgLCAnZGVmYXVsdCc6ICd0ZXh0LWRhdmluY2ktMDAzJ1xyXG4gICAgICAgICAgICAsICdyZXF1aXJlZCc6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgICAgLCB7XHJcbiAgICAgICAgICAgICdsYWJlbCc6ICdNQVggVG9rZW5zJ1xyXG4gICAgICAgICAgICAsICdkZXNjJzogJ+ODrOOCueODneODs+OCueOBruacgOWkp+ODiOODvOOCr+ODs+mVt+OCkuaMh+WumuOBl+OBpuOBj+OBoOOBleOBhOOAgidcclxuICAgICAgICAgICAgLCAnY29kZSc6IENPTlNUQU5UUy5OVU1CRVJfTUFYX1RPS0VOU1xyXG4gICAgICAgICAgICAsICd0eXBlJzogRmllbGRUeXBlLk51bWJlclxyXG4gICAgICAgICAgICAsICdkZWZhdWx0JzogJzI1NidcclxuICAgICAgICAgICAgLCAncmVxdWlyZWQnOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgICwge1xyXG4gICAgICAgICAgICAnbGFiZWwnOiAn5a6f6KGM44Oc44K/44Oz6YWN572u44K544Oa44O844K56YG45oqeJ1xyXG4gICAgICAgICAgICAsICdkZXNjJzogJ0FQSeWRvOOBs+WHuuOBl+OCkuWun+ihjOOBmeOCi+ODnOOCv+ODs+OCkumFjee9ruOBmeOCi+OCueODmuODvOOCueOCkumBuOaKnuOBl+OBpuOBj+OBoOOBleOBhOOAgidcclxuICAgICAgICAgICAgLCAnY29kZSc6IENPTlNUQU5UUy5CVE5fU1BBQ0VfRklFTERcclxuICAgICAgICAgICAgLCAndHlwZSc6IEZpZWxkVHlwZS5Ecm9wZG93bl9GaWVsZFNlbGVjdFxyXG4gICAgICAgICAgICAsICdhY2NlcHQnOiBbJ1NQQUNFUiddXHJcbiAgICAgICAgICAgICwgJ3JlcXVpcmVkJzogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgICAsIHtcclxuICAgICAgICAgICAgJ2xhYmVsJzogJ+WbuuWumuODl+ODreODs+ODl+ODiCdcclxuICAgICAgICAgICAgLCAnZGVzYyc6ICflhaXlipvjgajjgZfjgabmr47lm57muKHjgZnlm7rlrprjga7jg5fjg63jg7Pjg5fjg4jjgpLoqJjlhaXjgZfjgabjgY/jgaDjgZXjgYTjgIInXHJcbiAgICAgICAgICAgICwgJ2NvZGUnOiBDT05TVEFOVFMuU1RBVElDX1BST01QVFxyXG4gICAgICAgICAgICAsICd0eXBlJzogRmllbGRUeXBlLk11bHRpbGluZVRleHRcclxuICAgICAgICAgICAgLCAncmVxdWlyZWQnOiBmYWxzZVxyXG4gICAgICAgIH1cclxuICAgICAgICAsIHtcclxuICAgICAgICAgICAgJ2xhYmVsJzogJ+ODrOOCs+ODvOODieWIpeODl+ODreODs+ODl+ODiCdcclxuICAgICAgICAgICAgLCAnZGVzYyc6ICfjg6zjgrPjg7zjg4nliKXjgavmjIflrprjgZnjgovjg5fjg63jg7Pjg5fjg4jjg5XjgqPjg7zjg6vjg4njgpLpgbjmip7jgZfjgabjgY/jgaDjgZXjgYTjgIInXHJcbiAgICAgICAgICAgICwgJ2NvZGUnOiBDT05TVEFOVFMuVU5JUVVFX1BST01QVFxyXG4gICAgICAgICAgICAsICd0eXBlJzogRmllbGRUeXBlLkRyb3Bkb3duX0ZpZWxkU2VsZWN0XHJcbiAgICAgICAgICAgICwgJ2FjY2VwdCc6IFsnU0lOR0xFX0xJTkVfVEVYVCcsICdNVUxUSV9MSU5FX1RFWFQnXVxyXG4gICAgICAgICAgICAsICdkZWZhdWx0JzogQ09OU1RBTlRTLkVNUFRZX0xBQkVMXHJcbiAgICAgICAgICAgICwgJ3JlcXVpcmVkJzogZmFsc2VcclxuICAgICAgICB9XHJcbiAgICAgICAgLCB7XHJcbiAgICAgICAgICAgICdsYWJlbCc6ICfjg6zjgrPjg7zjg4nnt6jpm4bjg6Ljg7zjg4knXHJcbiAgICAgICAgICAgICwgJ2Rlc2MnOiAn5pyJ5Yq544Gr44GZ44KL44Go44Os44Kz44O844OJ5YWo5L2T44KS57eo6ZuG5a++6LGh44Go44GX44Gm5pu444GN5o+b44GI44KL44Oi44O844OJ44Gn5YuV5L2c44GX44G+44GZ44CC44Gd44Gu6Zqb44CB4oaT5Lul6ZmN44Gu6Kit5a6a44Gv54Sh5Yq544Gr44Gq44KK44G+44GZ44CC44KI44GP44KP44GL44KJ44Gq44GE5aC05ZCI44GvZGlzYWJsZeOBq+OBl+OBpuOBiuOBhOOBpuOBj+OBoOOBleOBhOOAgidcclxuICAgICAgICAgICAgLCAnY29kZSc6IENPTlNUQU5UUy5GTEFHX1JFQ09SRF9NT0RJRklFUlxyXG4gICAgICAgICAgICAsICd0eXBlJzogRmllbGRUeXBlLlJhZGlvXHJcbiAgICAgICAgICAgICwgJ2FjY2VwdCc6IENPTlNUQU5UUy5MQUJFTFNfUkVDT1JEX01PRElGSUVSXHJcbiAgICAgICAgICAgICwgJ2RlZmF1bHQnOiBDT05TVEFOVFMuTEFCRUxTX1JFQ09SRF9NT0RJRklFUlsxXVxyXG4gICAgICAgICAgICAsICdyZXF1aXJlZCc6IHRydWVcclxuICAgICAgICB9XHJcbiAgICAgICAgLCB7XHJcbiAgICAgICAgICAgICdsYWJlbCc6ICcnXHJcbiAgICAgICAgICAgICwgJ2Rlc2MnOiAnJ1xyXG4gICAgICAgICAgICAsICd0eXBlJzogRmllbGRUeXBlLlNlcGFyYXRvclxyXG4gICAgICAgICAgICAsICdyZXF1aXJlZCc6IGZhbHNlXHJcbiAgICAgICAgfVxyXG4gICAgICAgICwge1xyXG4gICAgICAgICAgICAnbGFiZWwnOiAna2ludG9uZeOBruODleOCo+ODvOODq+ODieioreWumidcclxuICAgICAgICAgICAgLCAnZGVzYyc6ICflhaXlh7rlipvjg5XjgqPjg7zjg6vjg4njgarjganjgpLoqK3lrprjgZfjgb7jgZnjgIInXHJcbiAgICAgICAgICAgICwgJ3R5cGUnOiBGaWVsZFR5cGUuTGFiZWxcclxuICAgICAgICB9XHJcbiAgICAgICAgLCB7XHJcbiAgICAgICAgICAgICdsYWJlbCc6ICflhaXlipvjg5XjgqPjg7zjg6vjg4npgbjmip4nXHJcbiAgICAgICAgICAgICwgJ2Rlc2MnOiAn5YWl5Yqb44Go44GX44Gm5L2/55So44GZ44KL44OV44Kj44O844Or44OJ44KS6YG45oqe44GX44Gm44GP44Gg44GV44GEJ1xyXG4gICAgICAgICAgICAsICdjb2RlJzogQ09OU1RBTlRTLklOUFVUX0ZJRUxEXHJcbiAgICAgICAgICAgICwgJ3R5cGUnOiBGaWVsZFR5cGUuRHJvcGRvd25fRmllbGRTZWxlY3RcclxuICAgICAgICAgICAgLCAnYWNjZXB0JzogWydTSU5HTEVfTElORV9URVhUJywgJ01VTFRJX0xJTkVfVEVYVCddXHJcbiAgICAgICAgICAgICwgJ3JlcXVpcmVkJzogdHJ1ZVxyXG4gICAgICAgIH1cclxuICAgICAgICAsIHtcclxuICAgICAgICAgICAgJ2xhYmVsJzogJ+WHuuWKm+ODleOCo+ODvOODq+ODiemBuOaKnidcclxuICAgICAgICAgICAgLCAnZGVzYyc6ICdDaGF0R1BU44Gu6L+U562U44KS5YWl5Yqb44GZ44KL44OV44Kj44O844Or44OJ44KS6YG45oqe44GX44Gm44GP44Gg44GV44GE44CCJ1xyXG4gICAgICAgICAgICAsICdjb2RlJzogQ09OU1RBTlRTLk9VVFBVVF9GSUVMRFxyXG4gICAgICAgICAgICAsICd0eXBlJzogRmllbGRUeXBlLkRyb3Bkb3duX0ZpZWxkU2VsZWN0XHJcbiAgICAgICAgICAgICwgJ2FjY2VwdCc6IFsnTVVMVElfTElORV9URVhUJ11cclxuICAgICAgICAgICAgLCAncmVxdWlyZWQnOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgXVxyXG59XHJcbiIsIi8vIOWumuaVsOWumue+qeOAgWNvbmZpZ+OBqGRlc2t0b3Djga7lj4zmlrnjgafkvb/jgYblrprnvqnlgKTjgpLjgZPjgZPjgafoqJjov7DjgZnjgotcclxuZXhwb3J0IGNvbnN0IENPTlNUQU5UUyA9IHtcclxuICAgIC8vIOODl+ODqeOCsOOCpOODs+OBruOCv+OCpOODiOODq1xyXG4gICAgUExVR0lOX05BTUU6ICdDaGF0R1BU6YCj5pC644OX44Op44Kw44Kk44OzJ1xyXG5cclxuICAgIC8vIOWIhumhnuOBjOacqumBuOaKnuOBruWgtOWQiOOBq+ihqOekuuOBmeOCi+aWh+Wtl+WIl1xyXG4gICAgLCBFTVBUWV9MQUJFTDogXCItLS0tXCJcclxuXHJcbiAgICAvLyBBUEkgS2V5XHJcbiAgICAsIEFQSV9LRVk6ICdhcGlfa2V5J1xyXG5cclxuICAgIC8vIENoYXRHUFQgTW9kZWwgSURcclxuICAgICwgTU9ERUxfSUQ6ICdtb2RlbF9pZCdcclxuXHJcbiAgICAvLyDlm7rlrprjg5fjg63jg7Pjg5fjg4hcclxuICAgICwgU1RBVElDX1BST01QVDogJ3N0YXRpY19wcm9tcHQnXHJcblxyXG4gICAgLy8g44Os44Kz44O844OJ5YCL5Yil44OX44Ot44Oz44OX44OIXHJcbiAgICAsIFVOSVFVRV9QUk9NUFQ6ICd1bmlxdWVfcHJvbXB0J1xyXG5cclxuICAgIC8vIOWFpeWKm+ODleOCo+ODvOODq+ODiemBuOaKnlxyXG4gICAgLCBJTlBVVF9GSUVMRDogJ2lucHV0X2ZpZWxkJ1xyXG5cclxuICAgIC8vIOWHuuWKm+ODleOCo+ODvOODq+ODiemBuOaKnlxyXG4gICAgLCBPVVRQVVRfRklFTEQ6ICdvdXRwdXRfZmllbGQnXHJcblxyXG4gICAgLy8g5a6f6KGM44Oc44K/44Oz6YWN572u44K544Oa44O844K5XHJcbiAgICAsIEJUTl9TUEFDRV9GSUVMRDogJ2J0bl9zcGFjZV9maWVsZCdcclxuXHJcbiAgICAvLyDjg6zjgrPjg7zjg4nnt6jpm4bjg6Ljg7zjg4lcclxuICAgICwgRkxBR19SRUNPUkRfTU9ESUZJRVI6ICdmbGFnX3JlY29yZF9tb2RpZmllcidcclxuICAgICwgTEFCRUxTX1JFQ09SRF9NT0RJRklFUjogWydlbmFibGUnLCAnZGlzYWJsZSddXHJcblxyXG4gICAgLy8g44Os44K544Od44Oz44K544Gu5pyA6ZW344OI44O844Kv44OzXHJcbiAgICAsIE5VTUJFUl9NQVhfVE9LRU5TOiAnTlVNQkVSX01BWF9UT0tFTlMnXHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1NlY3JldEl0ZW0gPSBleHBvcnRzLkZpZWxkVHlwZSA9IHZvaWQgMDtcbi8vIOioreWumuODleOCqeODvOODoOmDqOWTgeOBq+OBpOOBhOOBpuWumue+qeOBmeOCi+OAguW/heimgeOBq+W/nOOBmOOBpui/veWKoOOBmeOCi+OAglxudmFyIEZpZWxkVHlwZTtcbihmdW5jdGlvbiAoRmllbGRUeXBlKSB7XG4gICAgRmllbGRUeXBlW0ZpZWxkVHlwZVtcIkRyb3Bkb3duXCJdID0gMF0gPSBcIkRyb3Bkb3duXCI7XG4gICAgRmllbGRUeXBlW0ZpZWxkVHlwZVtcIkRyb3Bkb3duX0ZpZWxkU2VsZWN0XCJdID0gMV0gPSBcIkRyb3Bkb3duX0ZpZWxkU2VsZWN0XCI7XG4gICAgRmllbGRUeXBlW0ZpZWxkVHlwZVtcIlJhZGlvXCJdID0gMl0gPSBcIlJhZGlvXCI7XG4gICAgRmllbGRUeXBlW0ZpZWxkVHlwZVtcIlRleHRcIl0gPSAzXSA9IFwiVGV4dFwiO1xuICAgIEZpZWxkVHlwZVtGaWVsZFR5cGVbXCJOdW1iZXJcIl0gPSA0XSA9IFwiTnVtYmVyXCI7XG4gICAgRmllbGRUeXBlW0ZpZWxkVHlwZVtcIk11bHRpbGluZVRleHRcIl0gPSA1XSA9IFwiTXVsdGlsaW5lVGV4dFwiO1xuICAgIEZpZWxkVHlwZVtGaWVsZFR5cGVbXCJDaGVja2JveFwiXSA9IDZdID0gXCJDaGVja2JveFwiO1xuICAgIEZpZWxkVHlwZVtGaWVsZFR5cGVbXCJJbmNyZW1lbnRhbFRhYmxlXCJdID0gN10gPSBcIkluY3JlbWVudGFsVGFibGVcIjtcbiAgICBGaWVsZFR5cGVbRmllbGRUeXBlW1wiTGFiZWxcIl0gPSA4XSA9IFwiTGFiZWxcIjtcbiAgICBGaWVsZFR5cGVbRmllbGRUeXBlW1wiU2VwYXJhdG9yXCJdID0gOV0gPSBcIlNlcGFyYXRvclwiO1xufSkoRmllbGRUeXBlID0gZXhwb3J0cy5GaWVsZFR5cGUgfHwgKGV4cG9ydHMuRmllbGRUeXBlID0ge30pKTtcbi8vIOOCquODluOCuOOCp+OCr+ODiOOBjHNlY3JldOOCkuaMgeOBpOOBqOOBjeOAgVNlY3JldEl0ZW3jga7oqK3lrprjgafjgYLjgovjgajliKTlrprjgZfjgb7jgZlcbmZ1bmN0aW9uIGlzU2VjcmV0SXRlbShpdGVtKSB7XG4gICAgcmV0dXJuICdzZWNyZXQnIGluIGl0ZW07XG59XG5leHBvcnRzLmlzU2VjcmV0SXRlbSA9IGlzU2VjcmV0SXRlbTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db25maWdCdWlsZGVyID0gdm9pZCAwO1xucmVxdWlyZShcIkBzaGluLWNoYW4va3lwZXNcIik7IC8vIGtpbnRvbmUgdHlwZXNcbmNvbnN0IGNvbW1vbnV0aWxzXzEgPSByZXF1aXJlKFwiY29tbW9udXRpbHNcIik7XG5jb25zdCBjb25maWdfdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi9jb25maWctdXRpbGl0aWVzXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5jb25zdCBmaWVsZF9idWlsZGVyXzEgPSByZXF1aXJlKFwiLi9maWVsZC1idWlsZGVyXCIpO1xuY29uc3QgaW5jcmVtZW50YWxfdGFibGVfYnVpbGRlcl8xID0gcmVxdWlyZShcIi4vaW5jcmVtZW50YWwtdGFibGUtYnVpbGRlclwiKTtcbi8qKlxuICog6Kit5a6a55S76Z2i44Gu5ZCE6KaB57Sg44KS5qeL56+J44GZ44KLXG4gKi9cbmNsYXNzIENvbmZpZ0J1aWxkZXIge1xuICAgIHN0YXRpYyBMQVlPVVRfUEFSVFMgPSBbXCJTUEFDRVJcIl07IC8vIGtpbnRvbmXjgqLjg5fjg6rjga7jg6zjgqTjgqLjgqbjg4jmg4XloLHjgYvjgonlj5blvpfjgZnjgovjg5XjgqPjg7zjg6vjg4njgr/jgqTjg5dcbiAgICBwcm9wcyA9IHVuZGVmaW5lZDtcbiAgICBsYXlvdXQgPSB1bmRlZmluZWQ7XG4gICAgY29uZmlnID0gdW5kZWZpbmVkO1xuICAgIGZpZWxkX2J1aWxkZXI7XG4gICAgY29uc3RydWN0b3IocHJvcHMsIGNvbmZpZykge1xuICAgICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLmZpZWxkX2J1aWxkZXIgPSBuZXcgZmllbGRfYnVpbGRlcl8xLkZpZWxkQnVpbGRlcihwcm9wcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODrOOCpOOCouOCpuODiOaDheWgseOBi+OCieWPluW+l+OBmeOCi+W/heimgeOBruOBguOCi+aDheWgseOBi+OBqeOBhuOBi+OCkuWIpOWumuOBmeOCi1xuICAgICAqL1xuICAgIHN0YXRpYyBpc19sYXlvdXRfaW5mbyh0eXBlKSB7XG4gICAgICAgIGlmIChDb25maWdCdWlsZGVyLkxBWU9VVF9QQVJUUy5pbmNsdWRlcyh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBzdGF0aWMgaXNfaW5jbHVkZXNfbGF5b3V0X2luZm8odHlwZXMpIHtcbiAgICAgICAgY29uc3QgaXNfaW5jbHVkZXMgPSB0eXBlcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHtcbiAgICAgICAgICAgIGlmIChDb25maWdCdWlsZGVyLmlzX2xheW91dF9pbmZvKGN1cnIpKSB7XG4gICAgICAgICAgICAgICAgcHJldiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gaXNfaW5jbHVkZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOWil+a4m+ODhuODvOODluODq+OCkuani+eviVxuICAgICAqIEBwYXJhbSBpbnB1dF9maWVsZCDlopfmuJvjg4bjg7zjg5bjg6vjga7lrprnvqlcbiAgICAgKiBAcGFyYW0gc2F2ZWRfcm93cyAgQ09ORuOBq+S/neWtmOOBl+OBn+ODhuODvOODluODq+OBruihjOaDheWgsei+nuabuOOBrumFjeWIl1xuICAgICAqIEByZXR1cm5zIOWil+a4m+ODhuODvOODluODq+OCkuagvOe0jeOBl+OBn3RhYmxl6KaB57SgXG4gICAgICovXG4gICAgYnVpbGRfaW5jcmVtZW50YWxfdGFibGUoaW5wdXRfZmllbGQsIHNhdmVkX3Jvd3MpIHtcbiAgICAgICAgY29uc29sZS5sb2coeyBpbnB1dF9maWVsZCB9KTtcbiAgICAgICAgY29uc29sZS5sb2coeyBzYXZlZF9yb3dzIH0pO1xuICAgICAgICBjb25zdCB0YWJsZV9idWlsZGVyID0gbmV3IGluY3JlbWVudGFsX3RhYmxlX2J1aWxkZXJfMS5JbmNyZW1lbnRhbFRhYmxlQnVpbGRlcihpbnB1dF9maWVsZCwgc2F2ZWRfcm93cywgdGhpcy5maWVsZF9idWlsZGVyKTtcbiAgICAgICAgY29uc3QgdGFibGVfcm93cyA9IHRhYmxlX2J1aWxkZXIuYnVpbGQoKTtcbiAgICAgICAgY29uc3QgdGFibGVfY29scyA9IGlucHV0X2ZpZWxkLnRhYmxlX2NvbHM7IC8vIOOCq+ODqeODoOimi+WHuuOBl+OBrui+nuabuFxuICAgICAgICBjb25zdCBlbGVtZW50c190aCA9IHRhYmxlX2NvbHMubWFwKChjb2x1bW4pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsX3NwYW4gPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCAndGl0bGUnKTtcbiAgICAgICAgICAgIGVsX3NwYW4udGV4dENvbnRlbnQgPSBjb2x1bW4uaGVhZGVyO1xuICAgICAgICAgICAgY29uc3QgdGggPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RoJywgJ2tpbnRvbmVwbHVnaW4tdGFibGUtdGgnLCBbZWxfc3Bhbl0pO1xuICAgICAgICAgICAgcmV0dXJuIHRoO1xuICAgICAgICB9KTtcbiAgICAgICAgZWxlbWVudHNfdGgucHVzaChjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RoJywgJ2tpbnRvbmVwbHVnaW4tdGFibGUtdGgtYmxhbmtzcGFjZScpKTtcbiAgICAgICAgY29uc3QgdHIgPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RyJywgJycsIGVsZW1lbnRzX3RoKTtcbiAgICAgICAgY29uc3QgdGhlYWQgPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJywgJycsIFt0cl0pO1xuICAgICAgICBjb25zdCB0Ym9keSA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgndGJvZHknLCAnJywgdGFibGVfcm93cyk7XG4gICAgICAgIGNvbnN0IGluY3JlbWVudGFsX3RhYmxlID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCd0YWJsZScsICdraW50b25lcGx1Z2luLXRhYmxlIG1zLTAnLCBbdGhlYWQsIHRib2R5XSwgJycsIHtcbiAgICAgICAgICAgICdpZCc6IGB0YWJsZS0ke2lucHV0X2ZpZWxkLmNvZGV9YFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGluY3JlbWVudGFsX3RhYmxlO1xuICAgIH1cbiAgICAvLyDnpZbniLbopoHntKDjgpLlj5blvpfjgZnjgotcbiAgICBzdGF0aWMgZ2V0X2dyYW5kX3RyKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93ICdFUlJPUjogbnVsbOOBjOa4oeOBleOCjOOBn+OBn+OCgeellueItuimgee0oOOCkuWPluW+l+OBp+OBjeOBvuOBm+OCkyc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2VsZiA9IHRhcmdldDtcbiAgICAgICAgY29uc3QgcGFyZW50X3RkID0gc2VsZj8ucGFyZW50Tm9kZTtcbiAgICAgICAgY29uc3QgZ3JhbmRfdHIgPSBwYXJlbnRfdGQ/LnBhcmVudE5vZGU7XG4gICAgICAgIHJldHVybiBncmFuZF90cjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogZmllbGRzIEFQSeOBrui/lOOCiuWApOOCkuS9v+OBo+OBpuODleOCo+ODvOODq+ODiemDqOWTgeOBruS4gOimp+OCkuani+evieOBmeOCi1xuICAgICAqIEBwYXJhbSBwcm9wcyBwcm9wcyByZXNwLnByb3BlcnRpZXMg44KS5rih44GZXG4gICAgICogQHBhcmFtIGFjY2VwdF90eXBlcyDjg6rjgrnjg4jjgavjgZfjgZ/jgYTjg5XjgqPjg7zjg6vjg4njgr/jgqTjg5fjga7phY3liJfjgpLmuKHjgZnjgIJleC4gWydTSU5HTEVfTElORV9URVhUJywgJ0xJTksnXVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgc3RhdGljIGdldF9mb3JtcGFydHMocHJvcHMsIGFjY2VwdF90eXBlcyA9IFtdKSB7XG4gICAgICAgIGNvbnN0IGxpc3RzID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICAgICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3AgPSBwcm9wc1trZXldO1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBwcm9wLmxhYmVsO1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IHByb3AuY29kZTtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBwcm9wLnR5cGU7XG4gICAgICAgICAgICBpZiAoYWNjZXB0X3R5cGVzLmluY2x1ZGVzKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgbGlzdHNbY29kZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICdjb2RlJzogY29kZSxcbiAgICAgICAgICAgICAgICAgICAgJ2xhYmVsJzogbGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICdvcHRpb24nOiB0eXBlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhcnJheSA9IE9iamVjdC5rZXlzKGxpc3RzKS5tYXAoKGspID0+ICh7XG4gICAgICAgICAgICBrZXk6IGssIHZhbHVlOiBsaXN0c1trXVxuICAgICAgICB9KSk7XG4gICAgICAgIC8vIOODleOCo+ODvOODq+ODieODqeODmeODq+OBp+OCveODvOODiFxuICAgICAgICBjb25zdCBzb3J0ZWQgPSBhcnJheS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdHJfYSA9IGEudmFsdWUubGFiZWwudG9TdHJpbmcoKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3Qgc3RyX2IgPSBiLnZhbHVlLmxhYmVsLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGlmIChzdHJfYSA8IHN0cl9iKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGEgPiBiKVxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzb3J0ZWRfZGljID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uc29ydGVkLm1hcCgoaXRlbSkgPT4gKHtcbiAgICAgICAgICAgIFtpdGVtLmtleV06IGl0ZW0udmFsdWUsXG4gICAgICAgIH0pKSk7XG4gICAgICAgIHJldHVybiBzb3J0ZWRfZGljO1xuICAgIH1cbiAgICAvLyDoqK3lrprjg4bjg7zjg5bjg6vjga7ooYzjgavlr77jgZfjgabjgIHjg5fjg6vjg4Djgqbjg7PlpInmm7TjgafnmbrngavjgZnjgotDaGFuZ2XjgqTjg5njg7Pjg4jjgpLov73liqDjgZnjgotcbiAgICBzdGF0aWMgYWRkT25DaGFuZ2VFdmVudChzZWxlY3Rfc2V0KSB7XG4gICAgICAgIGZvciAoY29uc3Qgc2VsZWN0IG9mIHNlbGVjdF9zZXQpIHtcbiAgICAgICAgICAgIHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0YXJnZXRbdGFyZ2V0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICAgICAgICAgIC8vIGNvbnN0IGxhYmVsID0gc2VsZWN0ZWQubGFiZWxcbiAgICAgICAgICAgICAgICBsZXQgb3B0aW9uID0gc2VsZWN0ZWQuZ2V0QXR0cmlidXRlKCdvcHRpb24nKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGNvZGUgPSBzZWxlY3RlZC5nZXRBdHRyaWJ1dGUoJ2NvZGUnKTtcbiAgICAgICAgICAgICAgICBpZiAoY29kZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhbmNlc3RvciA9IHRhcmdldC5jbG9zZXN0KCd0cicpOyAvLyDnpZblhYhUUuimgee0oFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAoYW5jZXN0b3IgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0cyA9IGFuY2VzdG9yLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbnB1dCcpO1xuICAgICAgICAgICAgICAgIGlucHV0c1swXS52YWx1ZSA9IG9wdGlvbjtcbiAgICAgICAgICAgICAgICBpbnB1dHNbMV0udmFsdWUgPSBjb2RlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog44OV44Kj44O844Or44OJ6YG45oqe44OJ44Ot44OD44OX44OA44Km44Oz44KS5qeL56+J44GZ44KLXG4gICAgICogQHBhcmFtIHByb3BzIGZpZWxkcy5qc29u44Gu44Os44K544Od44Oz44K544GucHJvcGVydGllc1xuICAgICAqIEBwYXJhbSBhY2NlcHRzIOWIl+aMmeWvvuixoeOBqOOBmeOCi+ODleOCo+ODvOODq+ODieOCv+OCpOODl1xuICAgICAqIEBwYXJhbSBzZWxlY3RlZF9maWVsZGNvZGUg6YG45oqe5riI44G/44Go44GX44Gf44GE44OV44Kj44O844Or44OJ44Kz44O844OJ77yI55yB55Wl5Y+v77yJXG4gICAgICogQHBhcmFtIHNlbGVjdGVkX25vZGVfaWQg44OJ44Ot44OD44OX44OA44Km44Oz44Gu44OO44O844OJSUTvvIjnnIHnlaXlj6/vvIlcbiAgICAgKiBAcGFyYW0gZW1wdHlfbGFiZWwg56m644Gu6YG45oqe6IKi44KS6L+95Yqg44GZ44KL5aC05ZCI44Gv44Op44OZ44Or5paH5a2X5YiX44KS5oyH5a6a44GZ44KLIG51bGzjga7jgajjgY3jga/ov73liqDjgZfjgarjgYRcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHN0YXRpYyBidWlsZF9maWVsZHNfZHJvcGRvd24ocHJvcHMsIGFjY2VwdHMsIHNlbGVjdGVkX2ZpZWxkY29kZSA9IFwiXCIsIHNlbGVjdGVkX25vZGVfaWQgPSBcIlwiLCBlbXB0eV9sYWJlbCA9IG51bGwpIHtcbiAgICAgICAgY29uc3QgcGFydHMgPSBDb25maWdCdWlsZGVyLmdldF9mb3JtcGFydHMocHJvcHMsIGFjY2VwdHMpO1xuICAgICAgICBjb25zdCBmaWVsZF9kcm9wZG93biA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnc2VsZWN0JywgJ3NlbGVjdC1raW50b25lLWZpZWxkJyk7XG4gICAgICAgIGZpZWxkX2Ryb3Bkb3duLmlkID0gc2VsZWN0ZWRfbm9kZV9pZDtcbiAgICAgICAgaWYgKGVtcHR5X2xhYmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5X2l0ZW0gPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICAgICAgZW1wdHlfaXRlbS5sYWJlbCA9IGVtcHR5X2xhYmVsO1xuICAgICAgICAgICAgZmllbGRfZHJvcGRvd24uYXBwZW5kQ2hpbGQoZW1wdHlfaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBjb2RlIGluIHBhcnRzKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gcGFydHNbY29kZV07XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdmaWVsZGNvZGUnLCBjb2RlKTtcbiAgICAgICAgICAgIGl0ZW0ubGFiZWwgPSBwcm9wLmxhYmVsO1xuICAgICAgICAgICAgaWYgKGNvZGUgPT0gc2VsZWN0ZWRfZmllbGRjb2RlKSB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmllbGRfZHJvcGRvd24uYXBwZW5kQ2hpbGQoaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJycsIFtcbiAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgXCJraW50b25lcGx1Z2luLXNlbGVjdC1vdXRlclwiLCBbXG4gICAgICAgICAgICAgICAgY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAna2ludG9uZXBsdWdpbi1zZWxlY3QnLCBbZmllbGRfZHJvcGRvd25dKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIGZpZWxkcy5qc29uIEFQSeOCkuWRvOOBs+WHuuOBl+OBpuOAgeWIpeOCouODl+ODquOBruODleOCo+ODvOODq+ODiemBuOaKnuODieODreODg+ODl+ODgOOCpuODs+OCkuani+evieOBmeOCi1xuICAgICAqIEBwYXJhbSBhcHBfaWQg5Yil44Ki44OX44Oq44Gu44Ki44OX44OqSURcbiAgICAgKiBAcGFyYW0gYWNjZXB0cyDliJfmjJnlr77osaHjgajjgZnjgovjg5XjgqPjg7zjg6vjg4njgr/jgqTjg5dcbiAgICAgKiBAcGFyYW0gc2VsZWN0ZWRfbGFiZWwg6YG45oqe5riI44G/44Go44GX44Gf44GE44OV44Kj44O844Or44OJ44Op44OZ44Or77yI55yB55Wl5Y+v77yJXG4gICAgICogQHBhcmFtIHNlbGVjdGVkX25vZGVfaWQg44OJ44Ot44OD44OX44OA44Km44Oz44Gu44OO44O844OJSUTvvIjnnIHnlaXlj6/vvIlcbiAgICAgKiBAcGFyYW0gZW1wdHlfbGFiZWwg56m644Gu6YG45oqe6IKi44KS6L+95Yqg44GZ44KL5aC05ZCI44Gv44Op44OZ44Or5paH5a2X5YiX44KS5oyH5a6a44GZ44KLIG51bGzjga7jgajjgY3jga/ov73liqDjgZfjgarjgYRcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHN0YXRpYyBhc3luYyBidWlsZF9maWVsZHNfZHJvcGRvd25fb3RoZXJfYXBwKGFwcF9pZCwgYWNjZXB0cywgc2VsZWN0ZWRfbGFiZWwgPSBcIlwiLCBzZWxlY3RlZF9ub2RlX2lkID0gXCJcIiwgZW1wdHlfbGFiZWwgPSBudWxsKSB7XG4gICAgICAgIC8vIGFwcF9pZOOBjOacquaMh+WumuOBruWgtOWQiOOBr+epuuOBruODieODreODg+ODl+ODgOOCpuODs+OCkumFjee9ruOBmeOCi1xuICAgICAgICBpZiAoYXBwX2lkID09IHVuZGVmaW5lZCB8fCBhcHBfaWQgPT0gY29uZmlnX3V0aWxpdGllc18xLkNvbmZpZ1V0aWxpdGllcy5ERUZBVUxUX09QVElPTikge1xuICAgICAgICAgICAgY29uc3QgZW1wdHlfZHJvcGRvd24gPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcsICdzZWxlY3Qta2ludG9uZS1maWVsZCcpO1xuICAgICAgICAgICAgZW1wdHlfZHJvcGRvd24uaWQgPSBzZWxlY3RlZF9ub2RlX2lkO1xuICAgICAgICAgICAgaWYgKGVtcHR5X2xhYmVsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbXB0eV9pdGVtID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgICAgICBlbXB0eV9pdGVtLmxhYmVsID0gZW1wdHlfbGFiZWw7XG4gICAgICAgICAgICAgICAgZW1wdHlfZHJvcGRvd24uYXBwZW5kQ2hpbGQoZW1wdHlfaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAnJywgW1xuICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgXCJraW50b25lcGx1Z2luLXNlbGVjdC1vdXRlclwiLCBbXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJ2tpbnRvbmVwbHVnaW4tc2VsZWN0JywgW2VtcHR5X2Ryb3Bkb3duXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzcF9maWVsZHMgPSBhd2FpdCBraW50b25lLmFwaSgnL2svdjEvYXBwL2Zvcm0vZmllbGRzJywgJ0dFVCcsIHtcbiAgICAgICAgICAgIGFwcDogcGFyc2VJbnQoYXBwX2lkKVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRfZmllbGRzX2Ryb3Bkb3duKHJlc3BfZmllbGRzLnByb3BlcnRpZXMsIGFjY2VwdHMsIHNlbGVjdGVkX2xhYmVsLCBzZWxlY3RlZF9ub2RlX2lkLCBlbXB0eV9sYWJlbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaMh+WumuOBl+OBn+ODjuODvOODieOCkuWtkOODjuODvOODieOBqOOBl+OBpuOAgeOCv+OCpOODiOODq+OBqOOCs+ODoeODs+ODiOOCkuS7mOS4juOBl+OBn+ODluODreODg+OCr+OCkuani+evieOBmeOCi1xuICAgICAqIEBwYXJhbSBtYWluX25vZGUg5L+u6aO+44GX44Gf44GE44OR44O844OE44KS5ZCr44KA44OO44O844OJXG4gICAgICogQHBhcmFtIHRpdGxlIOODluODreODg+OCr+OBq+OBpOOBkeOCi+OCv+OCpOODiOODq+aWh+Wtl+WIl1xuICAgICAqIEBwYXJhbSBjb21tZW50IOODluODreODg+OCr+OBq+OBpOOBkeOCi+OCs+ODoeODs+ODiOaWh+Wtl+WIl1xuICAgICAqIEBwYXJhbSBibG9ja19jbGFzcyDjg5bjg63jg4Pjgq/jga7jgq/jg6njgrnjgpLmjIflrprjgZnjgovvvIjnnIHnlaXlj6/vvIlcbiAgICAgKiBAcGFyYW0gZmxnX3NlY3JldCDnp5jljL/mg4XloLHjg5Djg4Pjg4LjgpLooajnpLrjgZnjgovvvIjnnIHnlaXlj6/vvIlcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHN0YXRpYyBtYWtlX3BhcnRzX2Jsb2NrKG1haW5fbm9kZSwgdGl0bGUsIGNvbW1lbnQsIGJsb2NrX2NsYXNzID0gXCJcIiwgZmxnX3JlcXVpcmVkID0gZmFsc2UsIGZsZ19zZWNyZXQgPSBmYWxzZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnbWFrZV9wYXJ0c19ibG9jaygpJyk7XG4gICAgICAgIGNvbnN0IGNvbW1lbnRfbm9kZSA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuYnVpbGRFbGVtZW50KHtcbiAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnbWItMycsXG4gICAgICAgICAgICB0ZXh0Q29udGVudDogY29tbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgLy8g6aCF55uu6KaL5Ye644GXXG4gICAgICAgIGNvbnN0IGNhcHRpb25fbm9kZSA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuYnVpbGRFbGVtZW50KHtcbiAgICAgICAgICAgIHRhZ05hbWU6ICdkaXYnLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiAnaDQgbWItMicsXG4gICAgICAgICAgICB0ZXh0Q29udGVudDogdGl0bGVcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIOW/hemgiOioreWumihyZXF1aXJlZCnjg5Djg4PjgrhcbiAgICAgICAgaWYgKGZsZ19yZXF1aXJlZCkge1xuICAgICAgICAgICAgY29uc3QgYmFkZ2UgPSBjb21tb251dGlsc18xLlV0aWxzLmJ1aWxkRWxlbWVudCh7XG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ3NwYW4nLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3RleHQtZGFuZ2VyJyAvLydiYWRnZSBiZy1zZWNvbmRhcnkgcm91bmRlZC1waWxsIG1zLTInXG4gICAgICAgICAgICAgICAgLFxuICAgICAgICAgICAgICAgIHRleHRDb250ZW50OiAnKidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FwdGlvbl9ub2RlLmFwcGVuZENoaWxkKGJhZGdlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDnp5jljL/oqK3lrpooc2VjcmV0KeODkOODg+OCuFxuICAgICAgICBpZiAoZmxnX3NlY3JldCkge1xuICAgICAgICAgICAgY29uc3QgYmFkZ2UgPSBjb21tb251dGlsc18xLlV0aWxzLmJ1aWxkRWxlbWVudCh7XG4gICAgICAgICAgICAgICAgdGFnTmFtZTogJ3NwYW4nLFxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2JhZGdlIGJnLXNlY29uZGFyeSByb3VuZGVkLXBpbGwgbXMtMicsXG4gICAgICAgICAgICAgICAgdGV4dENvbnRlbnQ6ICdzZWNyZXQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhcHRpb25fbm9kZS5hcHBlbmRDaGlsZChiYWRnZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSBjb21tb251dGlsc18xLlV0aWxzLmJ1aWxkRWxlbWVudCh7XG4gICAgICAgICAgICB0YWdOYW1lOiAnZGl2JyxcbiAgICAgICAgICAgIGNsYXNzTmFtZTogYmxvY2tfY2xhc3MgKyAnIG1zLTQgbXQtNCcsXG4gICAgICAgICAgICBjaGlsZEVsZW1lbnRzOiBbXG4gICAgICAgICAgICAgICAgY2FwdGlvbl9ub2RlLFxuICAgICAgICAgICAgICAgIGNvbW1lbnRfbm9kZSxcbiAgICAgICAgICAgICAgICBtYWluX25vZGVcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBibG9jaztcbiAgICB9XG4gICAgLy8g44OG44O844OW44Or44K744Or5YaF44Gr44OJ44Ot44OD44OX44OA44Km44Oz44KS6L+95Yqg44GX44CB44OJ44Ot44OD44OX44OA44Km44Oz44Gu6YG45oqe57WQ5p6c44KS44OG44O844OW44Or6KGM5YaF44Gu5Yil44K744Or44Gr5pu444GN6L6844KAXG4gICAgc3RhdGljIGFkZEZpZWxkU2VsZWN0RXZlbnQocGFyZW50X2Ryb3Bkb3duLCBwYXJlbnRfZmllbGRjb2RlLCBhcHBpZCwgc2VsZWN0ZWRfZmllbGRjb2RlID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtpbnRvbmUuYXBpKCcvay92MS9hcHAvZm9ybS9maWVsZHMnLCAnR0VUJywge1xuICAgICAgICAgICAgYXBwOiBhcHBpZFxuICAgICAgICB9KS50aGVuKChyZXNwX2ZpZWxkcykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZmllbGRzID0gT2JqZWN0LmtleXMocmVzcF9maWVsZHMucHJvcGVydGllcykubWFwKChwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BfZmllbGRzLnByb3BlcnRpZXNbcHJvcF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIOODhuODvOODluODq+alreWGheODieODreODg+ODl+ODgOOCpuODs++8iOWtkO+8ieOBrumBuOaKnuiColxuICAgICAgICAgICAgY29uc3Qgc2luZ2xlX2xpbmVfaXRlbXMgPSBmaWVsZHMuZmlsdGVyKChwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3AudHlwZSA9PSAnU0lOR0xFX0xJTkVfVEVYVCc7XG4gICAgICAgICAgICB9KS5tYXAoKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgJ2NvZGUnOiBmaWVsZC5jb2RlLFxuICAgICAgICAgICAgICAgICAgICAnbGFiZWwnOiBmaWVsZC5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgJ29wdGlvbic6IGZpZWxkLnR5cGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSkubWFwKChkZF9pdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnb3B0aW9uJywgJycpO1xuICAgICAgICAgICAgICAgIGl0ZW0ubGFiZWwgPSBkZF9pdGVtLmxhYmVsO1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdjb2RlJywgZGRfaXRlbS5jb2RlKTtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnb3B0aW9uJywgZGRfaXRlbS5vcHRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChkZF9pdGVtLmNvZGUgPT0gc2VsZWN0ZWRfZmllbGRjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIOODhuODvOODluODq+ihjOWGheODieODreODg+ODl+ODgOOCpuODs++8iOWtkO+8ieOBqOOBneOBrumBuOaKnuOCpOODmeODs+ODiFxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdzZWxlY3QnLCBgc2VsZWN0LWtpbnRvbmUtZmllbGRgLCBzaW5nbGVfbGluZV9pdGVtcyk7XG4gICAgICAgICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coeyBldmVudCB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0YXJnZXRbdGFyZ2V0LnNlbGVjdGVkSW5kZXhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRkX2ZpZWxkY29kZSA9IG1ha2VfZmllbGRjb2RlX2NlbGwoc2VsZWN0ZWQpO1xuICAgICAgICAgICAgICAgIHBhcmVudF9maWVsZGNvZGUuZmlyc3RDaGlsZD8ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgcGFyZW50X2ZpZWxkY29kZS5hcHBlbmRDaGlsZCh0ZF9maWVsZGNvZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBTRUxFQ1RFROOBqk9wdGlvbuimgee0oOOCkuWPl+OBkeWPluOBo+OBpuOAgeWvvuW/nOOBmeOCi2F0dHJpYnV0ZeOBrmlucHV06KaB57Sg44KS5qeL56+J44GZ44KLXG4gICAgICAgICAgICBjb25zdCBtYWtlX2ZpZWxkY29kZV9jZWxsID0gKHNlbGVjdGVkKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGZpZWxkY29kZTtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRjb2RlID0gc2VsZWN0ZWQuZ2V0QXR0cmlidXRlKCdjb2RlJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZGNvZGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRjb2RlID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGRjb2RlID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZV9pbnB1dCA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnaW5wdXQnLCAna2ludG9uZXBsdWdpbi1pbnB1dC10ZXh0JywgW10pO1xuICAgICAgICAgICAgICAgIG5vZGVfaW5wdXQuc2V0QXR0cmlidXRlKCd2YWx1ZScsIGZpZWxkY29kZSk7XG4gICAgICAgICAgICAgICAgbm9kZV9pbnB1dC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsX3RkID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCd0ZCcsICdraW50b25lcGx1Z2luLXRhYmxlLXRkLWNvbnRyb2wnLCBbXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJ2tpbnRvbmVwbHVnaW4tdGFibGUtdGQtY29udHJvbC12YWx1ZScsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJ2tpbnRvbmVwbHVnaW4taW5wdXQtb3V0ZXInLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZV9pbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxfdGQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8g44OJ44Ot44OD44OX44OA44Km44Oz44Gu6L+95YqgXG4gICAgICAgICAgICBjb25zdCBub2RlX2Ryb3Bkb3duID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAna2ludG9uZXBsdWdpbi10YWJsZS10ZC1jb250cm9sLXZhbHVlJywgW1xuICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgXCJraW50b25lcGx1Z2luLXNlbGVjdC1vdXRlclwiLCBbXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJ2tpbnRvbmVwbHVnaW4tc2VsZWN0JywgW3NlbGVjdF0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgcGFyZW50X2Ryb3Bkb3duLmZpcnN0Q2hpbGQ/LnJlbW92ZSgpO1xuICAgICAgICAgICAgcGFyZW50X2Ryb3Bkb3duLmFwcGVuZENoaWxkKG5vZGVfZHJvcGRvd24pO1xuICAgICAgICAgICAgLy8g6L+95Yqg44GX44Gf44OJ44Ot44OD44OX44OA44Km44Oz44Gr5a++5b+c44GZ44KL44OV44Kj44O844Or44OJ44Kz44O844OJ44KSNOWIl+ebruOBq+abuOOBjei+vOOCgFxuICAgICAgICAgICAgcGFyZW50X2ZpZWxkY29kZS5maXJzdENoaWxkPy5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gc2VsZWN0Lml0ZW0oc2VsZWN0LnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICAgICAgY29uc3QgdGRfZmllbGRjb2RlID0gbWFrZV9maWVsZGNvZGVfY2VsbChzZWxlY3RlZCk7XG4gICAgICAgICAgICBwYXJlbnRfZmllbGRjb2RlLmFwcGVuZENoaWxkKHRkX2ZpZWxkY29kZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyDjg6njgrjjgqrjg5zjgr/jg7PjgpLpgbjmip7jgZfjgZ/jgajjgY3jgavnmbrngavjgZnjgovjgqTjg5njg7Pjg4jjgpLnmbvpjLLjgZnjgotcbiAgICBzdGF0aWMgc2V0X3N3aXRjaF9ldmVudChub2RlX3JhZGlvLCBldmVudF90eXBlLCBjYWxsYmFja19vYmplY3QpIHtcbiAgICAgICAgY29uc3QgaW5wdXRfcmFkaW9zID0gbm9kZV9yYWRpby5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwicmFkaW9cIl0nKTtcbiAgICAgICAgaW5wdXRfcmFkaW9zLmZvckVhY2goKGlucHV0KSA9PiB7XG4gICAgICAgICAgICBpbnB1dC5hZGRFdmVudExpc3RlbmVyKGV2ZW50X3R5cGUsIGNhbGxiYWNrX29iamVjdCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDkuIDooYzjg4bjgq3jgrnjg4jlhaXlipvjg5bjg63jg4Pjgq/jgpLmp4vnr4njgZnjgotcbiAgICAgKiBAcGFyYW0gaW5wdXRfZmllbGQg6Kit5a6a6aCF55uu44Gu5a6a576pXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBtYWtlX3N0cmluZ19ibG9jayhpbnB1dF9maWVsZCwgdHlwZSA9ICd0ZXh0Jykge1xuICAgICAgICBpZiAodGhpcy5jb25maWcgPT0gdW5kZWZpbmVkIHx8IHRoaXMucHJvcHMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+OCpOODs+OCueOCv+ODs+OCueOBjOWIneacn+WMluOBleOCjOOBpuOBhOOBvuOBm+OCkycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpZWxkY29kZSA9IGlucHV0X2ZpZWxkLmNvZGU7XG4gICAgICAgIGNvbnN0IHNhdmVkX3ZhbHVlID0gdGhpcy5nZXRfc2F2ZWRfdmFsdWUodGhpcy5jb25maWcsIGlucHV0X2ZpZWxkKTtcbiAgICAgICAgY29uc29sZS5sb2coeyBzYXZlZF92YWx1ZSB9KTtcbiAgICAgICAgY29uc3QgaWQgPSBgJHt0eXBlfS0ke2ZpZWxkY29kZX1gO1xuICAgICAgICBjb25zdCBlbF9zdHIgPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsICdraW50b25lcGx1Z2luLWlucHV0LW91dGVyJywgW1xuICAgICAgICAgICAgY29tbW9udXRpbHNfMS5VdGlscy5jZSgnaW5wdXQnLCAna2ludG9uZXBsdWdpbi1pbnB1dC10ZXh0JywgW10sICcnLCB7XG4gICAgICAgICAgICAgICAgJ3R5cGUnOiB0eXBlLFxuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICd2YWx1ZSc6IHNhdmVkX3ZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICBdKTtcbiAgICAgICAgLy8g5YWl5Yqb5b+F6aCI44OQ44OD44OC44Gu6KGo56S644OV44Op44KwXG4gICAgICAgIGNvbnN0IGZsZ19yZXF1aXJlZCA9ICgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICdyZXF1aXJlZCcgaW4gaXRlbSAmJiBpdGVtLnJlcXVpcmVkID09IHRydWU7XG4gICAgICAgIH0pKGlucHV0X2ZpZWxkKTtcbiAgICAgICAgLy8g56eY5Yy/5oOF5aCx44OQ44OD44OC44Gu6KGo56S644OV44Op44KwXG4gICAgICAgIGNvbnN0IGZsZ19zZWNyZXQgPSAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGlmICgoMCwgY29tbW9uXzEuaXNTZWNyZXRJdGVtKShpdGVtKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoJ3NlY3JldCcgaW4gaXRlbSkgJiYgKGl0ZW0uc2VjcmV0ID09IHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KShpbnB1dF9maWVsZCk7XG4gICAgICAgIGNvbnN0IG5vZGVfYmxvY2sgPSBDb25maWdCdWlsZGVyLm1ha2VfcGFydHNfYmxvY2soZWxfc3RyLCBpbnB1dF9maWVsZC5sYWJlbCwgaW5wdXRfZmllbGQuZGVzYywgJycsIGZsZ19yZXF1aXJlZCwgZmxnX3NlY3JldCk7XG4gICAgICAgIHJldHVybiBub2RlX2Jsb2NrO1xuICAgIH1cbiAgICAvLyB3aG9sZV9jb25maWfjgavmoLzntI3jgZXjgozjgabjgYTjgovlgKTjgpLlj5bjgorlh7rjgZlcbiAgICBnZXRfc2F2ZWRfdmFsdWUod2hvbGVfY29uZmlnLCBpbnB1dF9maWVsZCkge1xuICAgICAgICAvLyDlpJbpg6ggQVBJIOOBruWun+ihjOOBq+W/heimgeOBquaDheWgseOCkuWPluW+l+OBmeOCi1xuICAgICAgICBpZiAoKDAsIGNvbW1vbl8xLmlzU2VjcmV0SXRlbSkoaW5wdXRfZmllbGQpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm94eV9jb25maWcgPSBraW50b25lLnBsdWdpbi5hcHAuZ2V0UHJveHlDb25maWcoaW5wdXRfZmllbGQuVVJMLCBpbnB1dF9maWVsZC5tZXRob2QpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coeyBwcm94eV9jb25maWcgfSk7XG4gICAgICAgICAgICBsZXQgaGVhZGVyID0gaW5wdXRfZmllbGQuaGVhZGVyO1xuICAgICAgICAgICAgaWYgKGhlYWRlciA9PSBcIkF1dGhvcml6YXRpb24gQmVhcmVyXCIpIHtcbiAgICAgICAgICAgICAgICBoZWFkZXIgPSBcIkF1dGhvcml6YXRpb25cIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBpbnB1dF9maWVsZC5kYXRhO1xuICAgICAgICAgICAgaWYgKGhlYWRlciAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXJfdmFsdWUgPSBwcm94eV9jb25maWcuaGVhZGVyc1toZWFkZXJdO1xuICAgICAgICAgICAgICAgIC8vIEF1dGhvcml6YXRpb24gQmVhcmVy5a++5b+cXG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlcl92YWx1ZS5zdGFydHNXaXRoKFwiQmVhcmVyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0ZWQgPSBoZWFkZXJfdmFsdWUuc3BsaXQoLyAvKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNwbGl0ZWRbMV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBoZWFkZXJfdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm94eV9jb25maWcuZGF0YVtkYXRhXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZ2V0X3NhdmVkX3ZhbHVlKCk6IOenmOWMv+aDheWgseODleOCo+ODvOODq+ODieOBqOOBl+OBpuagvOe0jeOBleOCjOOBpuOBhOOCi+aDheWgseOBjOS4jeato+OBp+OBmeOAgigke3Byb3h5X2NvbmZpZ30pYCk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNhdmVkX3ZhbHVlID0gd2hvbGVfY29uZmlnW2lucHV0X2ZpZWxkLmNvZGVdO1xuICAgICAgICBpZiAoc2F2ZWRfdmFsdWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXRfZmllbGQuZGVmYXVsdCAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBzYXZlZF92YWx1ZSA9IGlucHV0X2ZpZWxkLmRlZmF1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzYXZlZF92YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNhdmVkX3ZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDopIfmlbDooYzjg4bjgq3jgrnjg4jlhaXlipvjg5bjg63jg4Pjgq/jgpLmp4vnr4njgZnjgotcbiAgICAgKiBAcGFyYW0gaW5wdXRfZmllbGQg6Kit5a6a6aCF55uu44Gu5a6a576pXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBtYWtlX211bHRpbGluZV9ibG9jayhpbnB1dF9maWVsZCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcgPT0gdW5kZWZpbmVkIHx8IHRoaXMucHJvcHMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+OCpOODs+OCueOCv+ODs+OCueOBjOWIneacn+WMluOBleOCjOOBpuOBhOOBvuOBm+OCkycpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpZWxkY29kZSA9IGlucHV0X2ZpZWxkLmNvZGU7XG4gICAgICAgIGxldCBzYXZlZF92YWx1ZSA9IHRoaXMuY29uZmlnW2ZpZWxkY29kZV07XG4gICAgICAgIGlmIChzYXZlZF92YWx1ZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dF9maWVsZC5kZWZhdWx0ICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNhdmVkX3ZhbHVlID0gaW5wdXRfZmllbGQuZGVmYXVsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHNhdmVkX3ZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyh7IHNhdmVkX3ZhbHVlIH0pO1xuICAgICAgICBjb25zdCBpZCA9IGBtdWx0aWxpbmUtJHtmaWVsZGNvZGV9YDtcbiAgICAgICAgY29uc3QgZWxfc3RyID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAna2ludG9uZXBsdWdpbi1pbnB1dC1vdXRlcicsIFtcbiAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY2UoJ3RleHRhcmVhJywgJycsIFtdLCBzYXZlZF92YWx1ZSwge1xuICAgICAgICAgICAgICAgICdpZCc6IGlkLFxuICAgICAgICAgICAgICAgICdyb3dzJzogJzEwJyxcbiAgICAgICAgICAgICAgICAnY29scyc6ICc2MCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pO1xuICAgICAgICAvLyDlhaXlipvlv4XpoIjjg5Djg4Pjg4Ljga7ooajnpLrjg5Xjg6njgrBcbiAgICAgICAgY29uc3QgZmxnX3JlcXVpcmVkID0gKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJ3JlcXVpcmVkJyBpbiBpdGVtICYmIGl0ZW0ucmVxdWlyZWQgPT0gdHJ1ZTtcbiAgICAgICAgfSkoaW5wdXRfZmllbGQpO1xuICAgICAgICBjb25zdCBub2RlX2Jsb2NrID0gQ29uZmlnQnVpbGRlci5tYWtlX3BhcnRzX2Jsb2NrKGVsX3N0ciwgaW5wdXRfZmllbGQubGFiZWwsIGlucHV0X2ZpZWxkLmRlc2MsICcnLCBmbGdfcmVxdWlyZWQpO1xuICAgICAgICByZXR1cm4gbm9kZV9ibG9jaztcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OB44Kn44OD44Kv44Oc44OD44Kv44K55YWl5Yqb44OW44Ot44OD44Kv44KS5qeL56+J44GZ44KLXG4gICAgICogQHBhcmFtIGlucHV0X2ZpZWxkIOioreWumumgheebruOBruWumue+qVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgbWFrZV9jaGVja2JveF9ibG9jayhpbnB1dF9maWVsZCkge1xuICAgICAgICBpZiAodGhpcy5jb25maWcgPT0gdW5kZWZpbmVkIHx8IHRoaXMucHJvcHMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+OCpOODs+OCueOCv+ODs+OCueOBjOWIneacn+WMluOBleOCjOOBpuOBhOOBvuOBm+OCkycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dF9maWVsZCA9PSB1bmRlZmluZWQgfHwgaW5wdXRfZmllbGQuYWNjZXB0ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25maWdCdWlkbGVyLm1ha2VfY2hlY2tib3hfYmxvY2soKTog5b+F6KaB44Gq44OX44Ot44OR44OG44KjIGFjY2VwdCDjgYzmnKrlrprnvqnjgafjgZnjgILoqK3lrprjgpLopovnm7TjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWVsZGNvZGUgPSBpbnB1dF9maWVsZC5jb2RlO1xuICAgICAgICBsZXQgc2F2ZWRfdmFsdWUgPSB0aGlzLmNvbmZpZ1tmaWVsZGNvZGVdO1xuICAgICAgICBpZiAoc2F2ZWRfdmFsdWUgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzYXZlZF92YWx1ZSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKHsgc2F2ZWRfdmFsdWUgfSk7XG4gICAgICAgIGNvbnN0IGlkID0gYCR7ZmllbGRjb2RlfWA7XG4gICAgICAgIGNvbnN0IGxpc3RfY2hlY2tib3ggPSBpbnB1dF9maWVsZC5hY2NlcHQubWFwKGJveF92YWx1ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGVja2JveF9pZCA9IGAke2lkfS0ke2JveF92YWx1ZX1gO1xuICAgICAgICAgICAgY29uc29sZS5sb2coeyBzYXZlZF92YWx1ZSB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgYm94X3ZhbHVlIH0pO1xuICAgICAgICAgICAgY29uc3QgYXR0cl9jaGVja2JveCA9IHtcbiAgICAgICAgICAgICAgICAndHlwZSc6ICdjaGVja2JveCcsXG4gICAgICAgICAgICAgICAgJ25hbWUnOiAnY2hlY2tib3gnLFxuICAgICAgICAgICAgICAgICd2YWx1ZSc6IGJveF92YWx1ZSxcbiAgICAgICAgICAgICAgICAnaWQnOiBjaGVja2JveF9pZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChzYXZlZF92YWx1ZS5pbmNsdWRlcyhib3hfdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cl9jaGVja2JveFsnY2hlY2tlZCddID0gXCJjaGVja2VkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAna2ludG9uZXBsdWdpbi1pbnB1dC1jaGVja2JveCcsIFtcbiAgICAgICAgICAgICAgICBjb21tb251dGlsc18xLlV0aWxzLmNlKCdzcGFuJywgJ2tpbnRvbmVwbHVnaW4taW5wdXQtY2hlY2tib3gtaXRlbScsIFtcbiAgICAgICAgICAgICAgICAgICAgY29tbW9udXRpbHNfMS5VdGlscy5jZSgnaW5wdXQnLCAna2ludG9uZXBsdWdpbi1pbnB1dC1jaGVja2JveC1pdGVtJywgW10sICcnLCBhdHRyX2NoZWNrYm94KSxcbiAgICAgICAgICAgICAgICAgICAgY29tbW9udXRpbHNfMS5VdGlscy5jZSgnbGFiZWwnLCAnJywgW10sIGJveF92YWx1ZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2Zvcic6IGNoZWNrYm94X2lkXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8g5YWl5Yqb5b+F6aCI44OQ44OD44OC44Gu6KGo56S644OV44Op44KwXG4gICAgICAgIGNvbnN0IGZsZ19yZXF1aXJlZCA9ICgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICdyZXF1aXJlZCcgaW4gaXRlbSAmJiBpdGVtLnJlcXVpcmVkID09IHRydWU7XG4gICAgICAgIH0pKGlucHV0X2ZpZWxkKTtcbiAgICAgICAgY29uc3Qgbm9kZV9ibG9jayA9IENvbmZpZ0J1aWxkZXIubWFrZV9wYXJ0c19ibG9jayhjb21tb251dGlsc18xLlV0aWxzLmNlKCdkaXYnLCAnJywgbGlzdF9jaGVja2JveCwgJycsIHtcbiAgICAgICAgICAgICdpZCc6IGlkXG4gICAgICAgIH0pLCBpbnB1dF9maWVsZC5sYWJlbCwgaW5wdXRfZmllbGQuZGVzYywgJycsIGZsZ19yZXF1aXJlZCk7XG4gICAgICAgIHJldHVybiBub2RlX2Jsb2NrO1xuICAgIH1cbiAgICAvLyDjg6njgrjjgqrjg5zjgr/jg7PjgpLmp4vnr4njgZnjgotcbiAgICBtYWtlX3JhZGlvX2Jsb2NrKGlucHV0X2ZpZWxkLCBibG9ja19jbGFzcyA9IFwiXCIpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnID09IHVuZGVmaW5lZCB8fCB0aGlzLnByb3BzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfjgqTjg7Pjgrnjgr/jg7PjgrnjgYzliJ3mnJ/ljJbjgZXjgozjgabjgYTjgb7jgZvjgpMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWVsZGNvZGUgPSBpbnB1dF9maWVsZC5jb2RlO1xuICAgICAgICBsZXQgc2F2ZWRfc3RyaW5nID0gdGhpcy5jb25maWdbZmllbGRjb2RlXTtcbiAgICAgICAgY29uc29sZS5sb2coeyBzYXZlZF9zdHJpbmcgfSk7XG4gICAgICAgIGlmIChzYXZlZF9zdHJpbmcgPT0gdW5kZWZpbmVkICYmIGlucHV0X2ZpZWxkLmRlZmF1bHQgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBzYXZlZF9zdHJpbmcgPSBpbnB1dF9maWVsZC5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dF9maWVsZCA9PSB1bmRlZmluZWQgfHwgaW5wdXRfZmllbGQuYWNjZXB0ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25maWdCdWlkbGVyLm1ha2VfZHJvcGRvd25fZmllbGRzZWxlY3RfYmxvY2soKTog5b+F6KaB44Gq44OX44Ot44OR44OG44KjIGFjY2VwdCDjgYzmnKrlrprnvqnjgafjgZnjgILoqK3lrprjgpLopovnm7TjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbF9vcHRpb25zID0gaW5wdXRfZmllbGQuYWNjZXB0Lm1hcCgobGFiZWwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gYHJhZGlvLSR7ZmllbGRjb2RlfS0ke2xhYmVsfWA7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gYHJhZGlvLSR7ZmllbGRjb2RlfWA7XG4gICAgICAgICAgICBjb25zdCBlbF9yYWRpbyA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICAgICAgICAgIGVsX3JhZGlvLnNldEF0dHJpYnV0ZSgndHlwZScsICdyYWRpbycpO1xuICAgICAgICAgICAgZWxfcmFkaW8uc2V0QXR0cmlidXRlKCduYW1lJywgbmFtZSk7XG4gICAgICAgICAgICBlbF9yYWRpby5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgbGFiZWwpO1xuICAgICAgICAgICAgZWxfcmFkaW8uc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICAgIGlmIChsYWJlbCA9PSBzYXZlZF9zdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBlbF9yYWRpby5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCAnY2hlY2tlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZWxfbGFiZWwgPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2xhYmVsJywgJycsIFtdLCBsYWJlbCk7XG4gICAgICAgICAgICBlbF9sYWJlbC5zZXRBdHRyaWJ1dGUoJ2ZvcicsIGlkKTtcbiAgICAgICAgICAgIHJldHVybiBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCAna2ludG9uZXBsdWdpbi1pbnB1dC1yYWRpby1pdGVtJywgW2VsX3JhZGlvLCBlbF9sYWJlbF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZWxfcmFkaW8gPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsICdraW50b25lcGx1Z2luLWlucHV0LXJhZGlvJywgZWxfb3B0aW9ucyk7XG4gICAgICAgIGVsX3JhZGlvLmlkID0gZmllbGRjb2RlO1xuICAgICAgICAvLyDlhaXlipvlv4XpoIjjg5Djg4Pjg4Ljga7ooajnpLrjg5Xjg6njgrBcbiAgICAgICAgY29uc3QgZmxnX3JlcXVpcmVkID0gKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJ3JlcXVpcmVkJyBpbiBpdGVtICYmIGl0ZW0ucmVxdWlyZWQgPT0gdHJ1ZTtcbiAgICAgICAgfSkoaW5wdXRfZmllbGQpO1xuICAgICAgICBjb25zdCBub2RlX2Jsb2NrID0gQ29uZmlnQnVpbGRlci5tYWtlX3BhcnRzX2Jsb2NrKGVsX3JhZGlvLCBpbnB1dF9maWVsZC5sYWJlbCwgaW5wdXRfZmllbGQuZGVzYywgYmxvY2tfY2xhc3MsIGZsZ19yZXF1aXJlZCk7XG4gICAgICAgIHJldHVybiBub2RlX2Jsb2NrO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjg4njg63jg4Pjg5fjg4Djgqbjg7PlvaLlvI/jgafjg5XjgqPjg7zjg6vjg4njgpLpgbjmip7jgafjgY3jgovoqK3lrprpoIXnm67nlKhIVE1M44OO44O844OJ44KS5qeL56+J44GX44Gm6L+U44GZXG4gICAgICogQHBhcmFtIGZpZWxkY29kZSDjg5Xjgqnjg7zjg6DjgavmjIflrprjgZnjgovjg5XjgqPjg7zjg6vjg4njgrPjg7zjg4njgIHkv53lrZjlgKTjgoLjgZPjga7jgrPjg7zjg4njgafoqq3jgb/ovrzjgoBcbiAgICAgKiBAcGFyYW0gZW1wdHlfbGFiZWwg6YG45oqe6IKi44Gu44OH44OV44Kp44Or44OI5YCk44KS5oyH5a6a44GZ44KL44CBIG51bGzjga7loLTlkIjjga/pgbjmip7lv4XpoIjjga7jg4njg63jg4Pjg5fjg4Djgqbjg7PjgajjgarjgotcbiAgICAgKiBAcGFyYW0gYmxvY2tfY2xhc3Mg44OW44Ot44OD44Kv5YWo5L2T44Gr5LiO44GI44KL44Kv44Op44K544CB55yB55Wl5Y+vXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBtYWtlX2Ryb3Bkb3duX2ZpZWxkc2VsZWN0X2Jsb2NrKGlucHV0X2ZpZWxkXG4gICAgLy8gLCBlbXB0eV9sYWJlbDogc3RyaW5nIHwgbnVsbCA9IG51bGxcbiAgICAsIGJsb2NrX2NsYXNzID0gXCJcIikge1xuICAgICAgICBjb25zdCBmb3JtX3R5cGVzID0gW107XG4gICAgICAgIGNvbnN0IGxheW91dF90eXBlcyA9IFtdO1xuICAgICAgICBpZiAoaW5wdXRfZmllbGQuYWNjZXB0ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25maWdCdWlkbGVyLm1ha2VfZHJvcGRvd25fZmllbGRzZWxlY3RfYmxvY2soKTog5b+F6KaB44Gq44OX44Ot44OR44OG44KjIGFjY2VwdCDjgYzmnKrlrprnvqnjgafjgZnjgILoqK3lrprjgpLopovnm7TjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dF9maWVsZC5hY2NlcHQuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgaWYgKENvbmZpZ0J1aWxkZXIuaXNfbGF5b3V0X2luZm8odHlwZSkpIHtcbiAgICAgICAgICAgICAgICBsYXlvdXRfdHlwZXMucHVzaCh0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvcm1fdHlwZXMucHVzaCh0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZyA9PSB1bmRlZmluZWQgfHwgdGhpcy5wcm9wcyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign44Kk44Oz44K544K/44Oz44K544GM5Yid5pyf5YyW44GV44KM44Gm44GE44G+44Gb44KTJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxheW91dF90eXBlcy5sZW5ndGggPiAwICYmIHRoaXMubGF5b3V0ID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfjg6zjgqTjgqLjgqbjg4jmg4XloLHjgpLjg63jg7zjg4njgZfjgabjgYTjgb7jgZvjgpPjgIJsb2FkX2xheW91dF9pbmZvKCkg44KS5LqL5YmN44Gr5ZG844Gz5Ye644GX44Gm44GP44Gg44GV44GE44CCJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxheW91dF90eXBlcy5sZW5ndGggPiAwICYmIGZvcm1fdHlwZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfjg5Xjgqnjg7zjg6Dmg4XloLHjga7jg5XjgqPjg7zjg6vjg4njgajjg6zjgqTjgqLjgqbjg4jmg4XloLHjga7jg5XjgqPjg7zjg6vjg4njgajjgYzmt7flnKjjgZfjgZ/jg4njg63jg4Pjg5fjg4Djgqbjg7Pjga/mp4vnr4njgafjgY3jgb7jgZvjgpPjgIInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWVsZGNvZGUgPSBpbnB1dF9maWVsZC5jb2RlO1xuICAgICAgICBjb25zdCBzYXZlZF9zdHJpbmcgPSB0aGlzLmNvbmZpZ1tmaWVsZGNvZGVdO1xuICAgICAgICBsZXQgbm9kZV9kcm9wZG93bjtcbiAgICAgICAgaWYgKGZvcm1fdHlwZXMubGVuZ3RoID4gMCkgeyAvLyDjg5Xjgqnjg7zjg6Dmg4XloLHjga7lj5blvpfvvIjpgJrluLjjga7jg5XjgqPjg7zjg6vjg4nvvIlcbiAgICAgICAgICAgIG5vZGVfZHJvcGRvd24gPSBDb25maWdCdWlsZGVyLmJ1aWxkX2ZpZWxkc19kcm9wZG93bih0aGlzLnByb3BzLCBmb3JtX3R5cGVzLCBzYXZlZF9zdHJpbmcsIGZpZWxkY29kZSwgaW5wdXRfZmllbGQuZGVmYXVsdCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGF5b3V0X3R5cGVzLmxlbmd0aCA+IDApIHsgLy8g44Os44Kk44Ki44Km44OI5oOF5aCx44Gu5Y+W5b6X77yI5Li744Gr44K544Oa44O844K144O877yJXG4gICAgICAgICAgICBub2RlX2Ryb3Bkb3duID0gQ29uZmlnQnVpbGRlci5idWlsZF9maWVsZHNfZHJvcGRvd24odGhpcy5sYXlvdXQsIGxheW91dF90eXBlcywgc2F2ZWRfc3RyaW5nLCBmaWVsZGNvZGUsIGlucHV0X2ZpZWxkLmRlZmF1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfjg5Xjgqnjg7zjg6Dmg4XloLHjgb7jgZ/jga/jg6zjgqTjgqLjgqbjg4jmg4XloLHjgYznqbrmrITjgaflkbzjgbPlh7rjgZXjgozjgb7jgZfjgZ8nKTtcbiAgICAgICAgfVxuICAgICAgICAvLyDlhaXlipvlv4XpoIjjg5Djg4Pjg4Ljga7ooajnpLrjg5Xjg6njgrBcbiAgICAgICAgY29uc3QgZmxnX3JlcXVpcmVkID0gKChpdGVtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gJ3JlcXVpcmVkJyBpbiBpdGVtICYmIGl0ZW0ucmVxdWlyZWQgPT0gdHJ1ZTtcbiAgICAgICAgfSkoaW5wdXRfZmllbGQpO1xuICAgICAgICBjb25zdCBub2RlX2Jsb2NrID0gQ29uZmlnQnVpbGRlci5tYWtlX3BhcnRzX2Jsb2NrKG5vZGVfZHJvcGRvd24sIGlucHV0X2ZpZWxkLmxhYmVsLCBpbnB1dF9maWVsZC5kZXNjLCBibG9ja19jbGFzcywgZmxnX3JlcXVpcmVkKTtcbiAgICAgICAgcmV0dXJuIG5vZGVfYmxvY2s7XG4gICAgfVxuICAgIG1ha2VfaW5jcmVtZW50YWxfdGFibGVfYmxvY2soaW5wdXRfZmllbGQpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnID09IHVuZGVmaW5lZCB8fCB0aGlzLnByb3BzID09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfjgqTjg7Pjgrnjgr/jg7PjgrnjgYzliJ3mnJ/ljJbjgZXjgozjgabjgYTjgb7jgZvjgpMnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmaWVsZGNvZGUgPSBpbnB1dF9maWVsZC5jb2RlO1xuICAgICAgICBjb25zdCBzYXZlZF9yb3dzID0gdGhpcy5jb25maWdbZmllbGRjb2RlXTtcbiAgICAgICAgY29uc29sZS5sb2coc2F2ZWRfcm93cyk7XG4gICAgICAgIGNvbnN0IGVsX3RhYmxlID0gdGhpcy5idWlsZF9pbmNyZW1lbnRhbF90YWJsZShpbnB1dF9maWVsZCwgc2F2ZWRfcm93cyk7XG4gICAgICAgIGNvbnN0IG5vZGVfYmxvY2sgPSBDb25maWdCdWlsZGVyLm1ha2VfcGFydHNfYmxvY2soZWxfdGFibGUsIGlucHV0X2ZpZWxkLmxhYmVsLCBpbnB1dF9maWVsZC5kZXNjKTtcbiAgICAgICAgcmV0dXJuIG5vZGVfYmxvY2s7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOimi+WHuuOBl+ODjuODvOODieOCkuWQq+OCgOODluODreODg+OCr+OCkuani+evieOBl+OBpui/lOOBmVxuICAgICAqIEBwYXJhbSBpbnB1dF9maWVsZCDopovlh7rjgZfjg47jg7zjg4nnlKjjga7oqK3lrprjgqLjgqTjg4bjg6BcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIG1ha2Vfc3VidGl0bGVfYmxvY2soaW5wdXRfZmllbGQpIHtcbiAgICAgICAgY29uc3QgY2xhc3NfaGVhZGluZyA9ICdkaXNwbGF5LTYgbWItMyc7XG4gICAgICAgIGNvbnN0IGhlYWRpbmcgPSBjb21tb251dGlsc18xLlV0aWxzLmNlKCdkaXYnLCBjbGFzc19oZWFkaW5nLCBbXSwgaW5wdXRfZmllbGQubGFiZWwpO1xuICAgICAgICBjb25zdCBkZXNjID0gY29tbW9udXRpbHNfMS5VdGlscy5jZSgnZGl2JywgJ21zLTQgbXQtMiBtYi01JywgW10sIGlucHV0X2ZpZWxkLmRlc2MpO1xuICAgICAgICByZXR1cm4gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAnJywgW1xuICAgICAgICAgICAgaGVhZGluZywgZGVzY1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgLy8g44Os44Kk44Ki44Km44OI5oOF5aCx44KS5Y+W5b6X44GZ44KL44CC44K544Oa44O844K55oOF5aCx44KS5Y+W44KL44Gr44Gv44GT44GT44GM5b+F6KaBXG4gICAgYXN5bmMgbG9hZF9sYXlvdXRfaW5mbygpIHtcbiAgICAgICAgY29uc3QgbGF5b3V0ID0gYXdhaXQga2ludG9uZS5hcGkoJy9rL3YxL3ByZXZpZXcvYXBwL2Zvcm0vbGF5b3V0JywgJ0dFVCcsIHtcbiAgICAgICAgICAgIGFwcDoga2ludG9uZS5hcHAuZ2V0SWQoKVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2cobGF5b3V0KTtcbiAgICAgICAgLy8gdHlwZSA9ICdTUEFDRVInIOOBruODleOCo+ODvOODq+ODieOBoOOBkeOCkuODlOODg+OCr+OCouODg+ODl+OBmeOCi+OAguS7luOBruOCv+OCpOODl+OBjOW/heimgeOBquWgtOWQiOOBr+mBqeWunOi/veWKoOOBmeOCi+OAglxuICAgICAgICBjb25zdCBsYXlvdXRfaW5mb3MgPSBsYXlvdXQubGF5b3V0LnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgICAgICAgaWYgKGN1cnIudHlwZSA9PSBcIkdST1VQXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgY3VycjogJHtjdXJyLnR5cGV9YCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BhY2VycyA9IGN1cnIubGF5b3V0LnJlZHVjZSgocm93X3ByZXYsIHJvd19jdXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd19zcGFjZXJzID0gcm93X2N1cnIuZmllbGRzLmZpbHRlcigocm93X2ZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyb3dfZmllbGQudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93X2ZpZWxkLnR5cGUgPT0gXCJTUEFDRVJcIjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJvd19wcmV2ID0gcm93X3ByZXYuY29uY2F0KHJvd19zcGFjZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYHJvd19wcmV2OiAke3Jvd19wcmV2fWApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcm93X3ByZXY7XG4gICAgICAgICAgICAgICAgfSwgW10pO1xuICAgICAgICAgICAgICAgIHByZXYuY29uY2F0KHNwYWNlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcHJldiA9IHByZXYuY29uY2F0KGN1cnIuZmllbGRzLmZpbHRlcigoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLnR5cGUgPT0gJ1NQQUNFUic7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgLy8g5pW05b2iXG4gICAgICAgIHRoaXMubGF5b3V0ID0gbGF5b3V0X2luZm9zLnJlZHVjZSgocHJldiwgY3VycikgPT4ge1xuICAgICAgICAgICAgY3Vyci5jb2RlID0gY3Vyci5lbGVtZW50SWQ7XG4gICAgICAgICAgICBjdXJyLmxhYmVsID0gY3Vyci5lbGVtZW50SWQ7XG4gICAgICAgICAgICBwcmV2W2N1cnIuY29kZV0gPSBjdXJyO1xuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5sYXlvdXQpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uZmlnQnVpbGRlciA9IENvbmZpZ0J1aWxkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29uZmlnTWFuYWdlciA9IHZvaWQgMDtcbnJlcXVpcmUoXCJAc2hpbi1jaGFuL2t5cGVzXCIpOyAvLyBraW50b25lIHR5cGVzXG4vLyBpbXBvcnQgeyBVdGlscyB9IGZyb20gXCJjb21tb251dGlsc1wiO1xuY29uc3QgY29uZmlnX3V0aWxpdGllc18xID0gcmVxdWlyZShcIi4vY29uZmlnLXV0aWxpdGllc1wiKTtcbmNvbnN0IGNvbmZpZ19idWlsZGVyXzEgPSByZXF1aXJlKFwiLi9jb25maWctYnVpbGRlclwiKTtcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4vY29tbW9uXCIpO1xuY29uc3QgY29tbW9udXRpbHNfMSA9IHJlcXVpcmUoXCJjb21tb251dGlsc1wiKTtcbi8qKlxuICog6Kit5a6a55S76Z2i44Gu44Oh44Kk44Oz5Yem55CGXG4gKiDoqK3lrprlgKTjgpLoqq3jgb/ovrzjgpPjgafliJ3mnJ/ljJbjgIHoqK3lrprnlLvpnaLjga7mp4vnr4njgIHlhaXlipvjga7lj5fku5jjgpLmi4XlvZNcbiAqL1xuY2xhc3MgQ29uZmlnTWFuYWdlciB7XG4gICAgS0VZX0NPTkZJRyA9ICdjb25maWcnO1xuICAgIHNldHRpbmdfaW5wdXQ7XG4gICAgY29uZmlnID0ge307XG4gICAgaG9va3MgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcihQTFVHSU5fSUQsIHNldHRpbmdfaW5wdXQsIHNldHRpbmdzX3ByZWZlcmVuY2UgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgQ09ORiA9IGtpbnRvbmUucGx1Z2luLmFwcC5nZXRDb25maWcoUExVR0lOX0lEKTtcbiAgICAgICAgdGhpcy5zZXRfY29uZmlnKENPTkYpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmNvbmZpZyk7XG4gICAgICAgIHRoaXMuc2V0dGluZ19pbnB1dCA9IHNldHRpbmdfaW5wdXQ7XG4gICAgICAgIGlmIChzZXR0aW5nc19wcmVmZXJlbmNlKSB7XG4gICAgICAgICAgICB0aGlzLnNldF9wcmVmZXJlbmNlKHNldHRpbmdzX3ByZWZlcmVuY2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIOODl+ODqeOCsOOCpOODs+OBruOCv+OCpOODiOODq+OChOiqrOaYjuOCkuihqOekuuOBmeOCi1xuICAgIHNldF9wcmVmZXJlbmNlKHByZWZzKSB7XG4gICAgICAgIGNvbnN0IG5vZGVfdGl0bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGx1Z2luX3RpdGxlJyk7XG4gICAgICAgIGlmIChub2RlX3RpdGxlKSB7XG4gICAgICAgICAgICBub2RlX3RpdGxlLnRleHRDb250ZW50ID0gcHJlZnMudGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgbm9kZV9kZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwbHVnaW5fZGVzY3JpcHRpb24nKTtcbiAgICAgICAgaWYgKG5vZGVfZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIG5vZGVfZGVzY3JpcHRpb24udGV4dENvbnRlbnQgPSBwcmVmcy5kZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiDoqK3lrprnlLvpnaLjgpLmp4vnr4njgZnjgovjgILjgZ3jga7pmpvjgatmaWVsZHMgQVBJ44KS5ZG844Gz5Ye644GX44Gm44CB44Ki44OX44Oq44Gu44OV44Kj44O844Or44OJ5oOF5aCx44KS5Yip55So44GZ44KL44CCXG4gICAgICovXG4gICAgYnVpbGQoKSB7XG4gICAgICAgIGtpbnRvbmUuYXBpKCcvay92MS9wcmV2aWV3L2FwcC9mb3JtL2ZpZWxkcycsIC8vIOioreWumuS4reOBruODleOCo+ODvOODq+ODieOCguWPluW+l+OBp+OBjeOCi+OCiOOBhuOBq+OBmeOCi1xuICAgICAgICAnR0VUJywge1xuICAgICAgICAgICAgYXBwOiBraW50b25lLmFwcC5nZXRJZCgpXG4gICAgICAgIH0pLnRoZW4oYXN5bmMgKHJlc3ApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVfc2V0dGluZ3MgPSB0aGlzLm1ha2Vfc2V0dGluZ19maWVsZHMocmVzcC5wcm9wZXJ0aWVzKTsgLy8g6Kit5a6a44OV44Kj44O844Or44OJ6YWN5YiXXG4gICAgICAgICAgICBjb25zdCBidG5fc3VibWl0ID0gdGhpcy5tYWtlX2J1dHRvbl9zdWJtaXQoKTsgLy8g6YGp55So44Oc44K/44OzXG4gICAgICAgICAgICBjb25zdCBidG5fY2FuY2VsID0gdGhpcy5tYWtlX2J1dHRvbl9jYW5jZWwoKTsgLy8g44Kt44Oj44Oz44K744Or44Oc44K/44OzXG4gICAgICAgICAgICAvLyDjg4jjg4Pjg5fjga7jg5Xjgqnjg7zjg6Djg47jg7zjg4njgpLmp4vnr4njgZfjgabphY3nva5cbiAgICAgICAgICAgIGNvbnN0IGZvcm1fbm9kZSA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZm9ybScsICcnLCBhd2FpdCBub2RlX3NldHRpbmdzKTtcbiAgICAgICAgICAgICAgICBub2RlLmlkID0gJ2Zvcm1fc2V0dGluZ3MnO1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIC8vIOioreWumuODleOCqeODvOODoOOBruODiOODg+ODl+OBq+ioree9rlxuICAgICAgICAgICAgY29uc3QgdG9wID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbmZpZ19ib2R5Jyk7XG4gICAgICAgICAgICB0b3A/LmFwcGVuZENoaWxkKGF3YWl0IGZvcm1fbm9kZSk7XG4gICAgICAgICAgICBjb25zdCBidXR0b25zID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAnbXQtNScsIFtcbiAgICAgICAgICAgICAgICBidG5fY2FuY2VsLFxuICAgICAgICAgICAgICAgIGJ0bl9zdWJtaXRcbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgdG9wPy5hcHBlbmRDaGlsZChidXR0b25zKTtcbiAgICAgICAgfSkudGhlbigoX3Jlc3ApID0+IHtcbiAgICAgICAgICAgIC8vIGxvYWTjgqTjg5njg7Pjg4jjga7lh6bnkIZcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdleGVjdXRlIGxvYWQgZXZlbnRzJylcbiAgICAgICAgICAgIHRoaXMuY2FsbF90YXJnZXRfZXZlbnQoJ2xvYWQnKTtcbiAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8g5oyH5a6a44GX44Gf44Kt44O844Gu44Kk44OZ44Oz44OI44Gr55m76Yyy44GM44GC44KM44Gw6YCQ5qyh5a6f6KGM44GZ44KLXG4gICAgYXN5bmMgY2FsbF90YXJnZXRfZXZlbnQoZXZlbnRfbmFtZSkge1xuICAgICAgICBjb25zdCBmdW5jcyA9IHRoaXMuaG9va3NbZXZlbnRfbmFtZV07XG4gICAgICAgIGlmIChmdW5jcyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbyhg44Kk44OZ44Oz44OIWyR7ZXZlbnRfbmFtZX1d44Gv5pyq55m76Yyy44Gn44GZ44CCYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBmdW5jIG9mIGZ1bmNzKSB7XG4gICAgICAgICAgICBpZiAoZnVuYyAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh7IGZ1bmMgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgZnVuYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHRpbmdzLmlucHV0IOOBruioreWumuOCkuWPgueFp+OBl+OBpuioreWumueUu+mdouOBruODrOOCpOOCouOCpuODiOOCkuani+evieOBmeOCi1xuICAgICAqIEBwYXJhbSBidWlsZGVyIOioreWumua4iOOBv+OBrkNvbmZpZ0J1aWxkZXLjgqTjg7Pjgrnjgr/jg7PjgrlcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGxheW91dF9pbnB1dHMoYnVpbGRlciwgaW5wdXQpIHtcbiAgICAgICAgY29uc3Qgc2V0dGluZ19pdGVtcyA9IGlucHV0Lm1hcCgoY29uZmlnKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYXJhZ3JhcGggPSB0aGlzLm1ha2VfcGFyYWdyYXBoKGJ1aWxkZXIsIGNvbmZpZyk7XG4gICAgICAgICAgICByZXR1cm4gcGFyYWdyYXBoO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHNldHRpbmdfaXRlbXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHRpbmdzLmlucHV044Gu5a6a576p44KS44Gy44Go44Gk5Y+X44GR5Y+W44KK44CB5rih44GV44KM44Gf6Kit5a6a6aCF55uu44GuRE9N44KS5qeL56+J44GX44Gm6L+U44GZXG4gICAgICogQHBhcmFtIGJ1aWxkZXIg5Yid5pyf6Kit5a6a5riI44G/44GuQ29uZmlnQnVpbGRlclxuICAgICAqIEBwYXJhbSBjb25maWcg6Kit5a6a6aCF55uu44Gu5a6a576pXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBtYWtlX3BhcmFncmFwaChidWlsZGVyLCBjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzog44Op44K444Kq44Oc44K/44Oz44KE44OJ44Ot44OD44OX44OA44Km44Oz44KC44GT44GT44GL44KJ5qeL56+J44GZ44KLXG4gICAgICAgIHN3aXRjaCAoY29uZmlnLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLlRleHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIubWFrZV9zdHJpbmdfYmxvY2soY29uZmlnKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLk11bHRpbGluZVRleHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIubWFrZV9tdWx0aWxpbmVfYmxvY2soY29uZmlnKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLlJhZGlvOlxuICAgICAgICAgICAgICAgIHJldHVybiBidWlsZGVyLm1ha2VfcmFkaW9fYmxvY2soY29uZmlnKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLk51bWJlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRlci5tYWtlX3N0cmluZ19ibG9jayhjb25maWcsICdudW1iZXInKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLkNoZWNrYm94OlxuICAgICAgICAgICAgICAgIHJldHVybiBidWlsZGVyLm1ha2VfY2hlY2tib3hfYmxvY2soY29uZmlnKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLkluY3JlbWVudGFsVGFibGU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkZXIubWFrZV9pbmNyZW1lbnRhbF90YWJsZV9ibG9jayhjb25maWcpO1xuICAgICAgICAgICAgY2FzZSBjb21tb25fMS5GaWVsZFR5cGUuTGFiZWw6IC8vIOimi+WHuuOBl+ODjuODvOODiVxuICAgICAgICAgICAgICAgIHJldHVybiBidWlsZGVyLm1ha2Vfc3VidGl0bGVfYmxvY2soY29uZmlnKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLlNlcGFyYXRvcjogLy8g44K744OR44Os44O844K/44O844OO44O844OJXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJ210LTUgYmctaW5mbycpO1xuICAgICAgICAgICAgY2FzZSBjb21tb25fMS5GaWVsZFR5cGUuRHJvcGRvd25fRmllbGRTZWxlY3Q6XG4gICAgICAgICAgICAgICAgaWYgKCEoJ2FjY2VwdCcgaW4gY29uZmlnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+ODl+ODreODkeODhuOCoyBhY2NlcHQg44GM5b+F6KaB44Gn44GZ44CCY29uZmlnL3NldHRpbmdzLnRzIOOBruioreWumuOCkuimi+ebtOOBl+OBpuOBj+OBoOOBleOBhOOAgicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYnVpbGRlci5tYWtlX2Ryb3Bkb3duX2ZpZWxkc2VsZWN0X2Jsb2NrKGNvbmZpZyk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5pyq5a6f6KOF44GuRmllbGRUeXBl44KS6KaB5rGC44GX44Gm44GE44G+44GZ44CCJHtjb25maWcudHlwZX0g44KS5a6f6KOF44GX44Gm44GP44Gg44GV44GE44CCYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8g6Kit5a6a5YCk44KSdGhpcy5jb25maWfjgavoqq3jgb/ovrzjgoBcbiAgICBzZXRfY29uZmlnKENPTkYpIHtcbiAgICAgICAgY29uc3Qgc2VyaWFsaXplZCA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuZ2V0X2Zyb20oQ09ORiwgdGhpcy5LRVlfQ09ORklHLCAnJyk7XG4gICAgICAgIGlmIChzZXJpYWxpemVkID09ICcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ+ioreWumuWApOOBjOOBguOCiuOBvuOBm+OCk+OAguWIneacn+WApOOBp+mWi+Wni+OBl+OBvuOBmeOAgicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25maWcgPSBKU09OLnBhcnNlKHNlcmlhbGl6ZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIOODl+ODqeOCsOOCpOODs+ioreWumuWApOOCkuWPluW+l+OBmeOCiyhkZXNlcmlhbGl6ZWTjgZfjgZ/ovp7mm7jjgpLlj5blvpfjgafjgY3jgospXG4gICAgZ2V0X2NvbmZpZyhrZXkgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGtleSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZzsgLy8ge1tmaWVsZGNvZGU6c3RyaW5nXTogc3RyaW5nfSDjga7ovp7mm7jjgIHjg5XjgqPjg7zjg6vjg4njgrPjg7zjg4njgaflvJXjgYTjgabjg6njg5njg6vjgpLlvpfjgonjgozjgotcbiAgICAgICAgfVxuICAgICAgICBpZiAoa2V5IGluIHRoaXMuY29uZmlnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWdba2V5XTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOacquWumue+qeOBvuOBn+OBr+acquioreWumuOBruioreWumuOCreODvOOBjOaMh+WumuOBleOCjOOBvuOBl+OBnzogWyR7a2V5fV1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6Kit5a6a6aCF55uu44Gu44OO44O844OJ5qeL56+J44Go5YuV5L2c6Kit5a6a44Go6KGo56S66aCG5bqPXG4gICAgICogQHBhcmFtIHByb3BzIGZpZWxkcy5qc29uIEFQSeOBi+OCieWPluW+l+OBl+OBn+ODleOCo+ODvOODq+ODieaDheWgsVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYXN5bmMgbWFrZV9zZXR0aW5nX2ZpZWxkcyhwcm9wcykge1xuICAgICAgICBjb25zdCBidWlsZGVyID0gbmV3IGNvbmZpZ19idWlsZGVyXzEuQ29uZmlnQnVpbGRlcihwcm9wcywgdGhpcy5jb25maWcpO1xuICAgICAgICBhd2FpdCBidWlsZGVyLmxvYWRfbGF5b3V0X2luZm8oKTsgLy8g44K544Oa44O844K55oOF5aCx44KS5Y+W5b6X44GZ44KL44Gf44KB44Gr5b+F6KaBXG4gICAgICAgIC8vIOODrOOCpOOCouOCpuODiOOBruani+eviVxuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRfaW5wdXRzKGJ1aWxkZXIsIHRoaXMuc2V0dGluZ19pbnB1dCk7XG4gICAgfVxuICAgIC8vIOOCquODluOCuOOCp+OCr+ODiOOBjHNlY3JldOOCkuaMgeOBpOOBqOOBjeOAgVNlY3JldEl0ZW3jga7oqK3lrprjgafjgYLjgovjgajliKTlrprjgZfjgb7jgZlcbiAgICBpc1NlY3JldEl0ZW0oaXRlbSkge1xuICAgICAgICByZXR1cm4gJ3NlY3JldCcgaW4gaXRlbTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ09ORuOBq+agvOe0jeOBm+OBmuOAgXNldFByb3h5Q29uZmlnKCnjgafmoLzntI3jgZfjgZ/jgYTovp7mm7jjgpLmp4vnr4njgZnjgotcbiAgICAgKiBAcmV0dXJucyB7W2tleTogc3RyaW5nXTogU2VjcmV0SXRlbX0g56eY5a+G44OR44Op44Oh44O844K/44Gu44Kq44OW44K444Kn44Kv44OIXG4gICAgICovXG4gICAgc2VjcmV0X3BhcmFtZXRlcnMoY29uZmlnX3Rpbmtlcikge1xuICAgICAgICAvLyBjb25zdCBzZXR0aW5nczogU2VjcmV0SXRlbVtdID0gW11cbiAgICAgICAgY29uc3Qgc2VjcmV0cyA9IHRoaXMuc2V0dGluZ19pbnB1dC5maWx0ZXIoKGNvbmZpZykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBjb21tb25fMS5pc1NlY3JldEl0ZW0pKGNvbmZpZyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBwcm94eV9wYXJhbXMgPSB0aGlzLm1ha2VfcHJveHlfcGFyYW1zKHNlY3JldHMsIGNvbmZpZ190aW5rZXIpOyAvLyDjg5fjg63jgq3jgrfjgavjgo/jgZ/jgZnjg5Hjg6njg6Hjg7zjgr/jgrvjg4Pjg4jjgpLkvZzjgotcbiAgICAgICAgcmV0dXJuIHByb3h5X3BhcmFtcztcbiAgICB9XG4gICAgLy8g6Kit5a6a5oOF5aCx44GuU2VjcmV0SXRlbVtd44KS5Y+X44GR5Y+W44KK44CBc2V0UHJveHlQYXJhbXPjgavmipXjgZLjgonjgozjgovlvaLjga7jgqrjg5bjgrjjgqfjgq/jg4jphY3liJfjgpLov5TjgZfjgb7jgZlcbiAgICBtYWtlX3Byb3h5X3BhcmFtcyhzZWNyZXRzLCBjb25maWdfdGlua2VyKSB7XG4gICAgICAgIC8vIFNlY3JldEl0ZW3jgpJVUkzjgahtZXRob2TjgafmjK/jgorliIbjgZHjgotcbiAgICAgICAgY29uc3QgaXRlbXMgPSBzZWNyZXRzLnJlZHVjZSgocHJldiwgc2VjcmV0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBzZWNyZXQubWV0aG9kICsgXCI6XCIgKyBzZWNyZXQuVVJMO1xuICAgICAgICAgICAgaWYgKHByZXZba2V5XSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBwcmV2W2tleV0gPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZba2V5XS5wdXNoKHNlY3JldCk7XG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgfSwge30pO1xuICAgICAgICAvLyBrZXnliKXjgatoZWFkZXJzLCBkYXRh44KS5qeL56+J44GX44GmUHJveHlQYXJhbeOBrumFjeWIl+OCkui/lOOBmVxuICAgICAgICBjb25zdCByZXN1bHRfcGFyYW1zID0gT2JqZWN0LmtleXMoaXRlbXMpLnJlZHVjZSgocGFyYW1zLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNlY3JldHMgPSBpdGVtc1trZXldOyAvLyBzZWNyZXRz44Gv44CBVVJM44GobWV0aG9k44GM5ZCM5LiA44Gu44KC44Gu44GM5o+D44Gj44Gm44GE44KLXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh7IHNlY3JldHMgfSk7XG4gICAgICAgICAgICBjb25zdCBnZXRfdGV4dF9hbmRfdmFsaWRhdGVfdmFsdWUgPSAoc2VjcmV0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb25maWdfdGlua2VyLmdldF90ZXh0X3ZhbHVlKHNlY3JldC5jb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoISgncmVxdWlyZWQnIGluIHNlY3JldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VjcmV0LnJlcXVpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIHJlcXVpcmVkID09IHRydWXjga7loLTlkIhcbiAgICAgICAgICAgICAgICBpZiAoc2VjcmV0LnJlcXVpcmVkID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5b+F6aCI44Gu6aCF55uuWyR7c2VjcmV0LmxhYmVsfV3jgYzmnKroqJjlhaXjgafjgZnjgIJgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyByZXF1aXJlZCA9PSBmYWxzZeOBruWgtOWQiOOBr+epuuashOOCkuioseWuueOBmeOCi1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSB1bmRlZmluZWQgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIOenmOWMv+aDheWgseOBrmhlYWRlcnPjgpLmp4vnr4njgZnjgotcbiAgICAgICAgICAgIGNvbnN0IGhlYWRlcnMgPSBzZWNyZXRzLmZpbHRlcigoc2VjcmV0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdoZWFkZXInIGluIHNlY3JldDtcbiAgICAgICAgICAgIH0pLnJlZHVjZSgocHJldiwgc2VjcmV0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRfdGV4dF9hbmRfdmFsaWRhdGVfdmFsdWUoc2VjcmV0KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VjcmV0LmhlYWRlciA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfnp5jljL/oqK3lrprjga5oZWFkZXLopoHntKDjgYzmnKrlrprnvqnjgafjgZnjgIInKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNlY3JldC5oZWFkZXIgPT0gXCJBdXRob3JpemF0aW9uIEJlYXJlclwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZbXCJBdXRob3JpemF0aW9uXCJdID0gXCJCZWFyZXIgXCIgKyB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZbc2VjcmV0LmhlYWRlcl0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgICAvLyDnp5jljL/mg4XloLHjga5kYXRh44KS5qeL56+J44GZ44KLXG4gICAgICAgICAgICBjb25zdCBkYXRhID0gc2VjcmV0cy5maWx0ZXIoKHNlY3JldCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGF0YScgaW4gc2VjcmV0O1xuICAgICAgICAgICAgfSkucmVkdWNlKChwcmV2LCBzZWNyZXQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldF90ZXh0X2FuZF92YWxpZGF0ZV92YWx1ZShzZWNyZXQpO1xuICAgICAgICAgICAgICAgIGlmIChzZWNyZXQuZGF0YSA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfnp5jljL/oqK3lrprjga5kYXRh6KaB57Sg44GM5pyq5a6a576p44Gn44GZJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZbc2VjcmV0LmRhdGFdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgICAgICBjb25zdCBwYXJhbSA9IHtcbiAgICAgICAgICAgICAgICAnVVJMJzogc2VjcmV0c1swXS5VUkwsXG4gICAgICAgICAgICAgICAgJ21ldGhvZCc6IHNlY3JldHNbMF0ubWV0aG9kLFxuICAgICAgICAgICAgICAgICdoZWFkZXJzJzogaGVhZGVycyxcbiAgICAgICAgICAgICAgICAnZGF0YSc6IGRhdGFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJhbXMucHVzaChwYXJhbSk7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9LCBbXSk7XG4gICAgICAgIHJldHVybiByZXN1bHRfcGFyYW1zO1xuICAgIH1cbiAgICAvLyBDT05G44Gr5qC857SN44GZ44KL6L6e5pu444KS5qeL56+J44GZ44KLXG4gICAgc3RvcmVfcGFyYW1ldGVycyhjb25maWdfdGlua2VyKSB7XG4gICAgICAgIGNvbnN0IHN0b3JlID0ge307XG4gICAgICAgIHRoaXMuc2V0dGluZ19pbnB1dC5mb3JFYWNoKChjb25maWcpID0+IHtcbiAgICAgICAgICAgIGlmIChjb25maWcudHlwZSA9PSBjb21tb25fMS5GaWVsZFR5cGUuTGFiZWwgfHwgY29uZmlnLnR5cGUgPT0gY29tbW9uXzEuRmllbGRUeXBlLlNlcGFyYXRvcikge1xuICAgICAgICAgICAgICAgIC8vIOS/neWtmOS4jeimgeOBquOCouOCpOODhuODoFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNlY3JldOODl+ODreODkeODhuOCo+OCkuaMgeOBo+OBpuOBhOOBpuOAgeOBi+OBpHRydWXjga7loLTlkIjjga/kv53lrZjjgZfjgarjgYTvvIhzZXRQcm94eUNvbmZpZygp44KS5L2/55So44GZ44KLIO+8iVxuICAgICAgICAgICAgaWYgKCdzZWNyZXQnIGluIGNvbmZpZyAmJiBjb25maWcuc2VjcmV0ID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcgPSBjb25maWc7XG4gICAgICAgICAgICBjb25zdCBjb2RlID0gY29uZmlnLmNvZGU7XG4gICAgICAgICAgICBjb25zdCByZXF1aXJlZCA9IGNvbmZpZy5yZXF1aXJlZDtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgY29kZSB9KTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gY29uZmlnX3Rpbmtlci5nZXRfc2VsZWN0ZWQoY29kZSwgY29uZmlnLnR5cGUpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgc3RvcmVbY29kZV0gPSBzZWxlY3RlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBg5b+F6aCI44Gu6Kit5a6a6aCF55uuIFske2NvbmZpZy5sYWJlbH1dIOOBjOacquioreWumuOBp+OBmSgke2NvZGV9KWA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdG9yZVtjb2RlXSA9ICcnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHN0b3JlKTtcbiAgICAgICAgcmV0dXJuIHN0b3JlO1xuICAgIH1cbiAgICAvLyDpgannlKjjg5zjgr/jg7NcbiAgICBtYWtlX2J1dHRvbl9zdWJtaXQoKSB7XG4gICAgICAgIGNvbnN0IGJ0bl9zdWJtaXQgPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicsICdraW50b25lcGx1Z2luLWJ1dHRvbi1kaWFsb2ctb2snKTtcbiAgICAgICAgYnRuX3N1Ym1pdC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnYnV0dG9uJyk7XG4gICAgICAgIGJ0bl9zdWJtaXQudGV4dENvbnRlbnQgPSAn6YGp55SoJztcbiAgICAgICAgYnRuX3N1Ym1pdC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuaXNDb21wb3NpbmcgfHwgZXZlbnQuY29kZSA9PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCfpgannlKjjg5zjgr/jg7Pjga5lbnRlcuOCkueEoeWKueWMluOBl+OBvuOBl+OBn+OAgicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGJ0bl9zdWJtaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCB0aGlzX2Zvcm0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9ybV9zZXR0aW5ncycpO1xuICAgICAgICAgICAgaWYgKHRoaXNfZm9ybSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ0VSUk9SOiDjg5Xjgqnjg7zjg6DopoHntKDjgpLlj5blvpfjgafjgY3jgb7jgZvjgpPjgafjgZfjgZ/jgIInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gc3VibWl044Kk44OZ44Oz44OI44KS5a6f6KGM44GZ44KLXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmNhbGxfdGFyZ2V0X2V2ZW50KCdzdWJtaXQnKVxuICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBg4puUIOioreWumuOBruS/neWtmOOBp+OCqOODqeODvOOBjOeZuueUn+OBl+OBvuOBl+OBn+OAgu+8iCR7ZXJyb3J977yJYDtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cpO1xuICAgICAgICAgICAgICAgIGFsZXJ0KG1zZyk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZ190aW5rZXIgPSBuZXcgY29uZmlnX3V0aWxpdGllc18xLkNvbmZpZ1V0aWxpdGllcyh0aGlzX2Zvcm0pO1xuICAgICAgICAgICAgLy8g56eY5Yy/5oOF5aCx44Gu6Kit5a6a5YCk44KS44OX44Ot44Kt44K344Gr5qC857SN44GZ44KLXG4gICAgICAgICAgICBsZXQgcHJveHlfcGFyYW1zO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwcm94eV9wYXJhbXMgPSB0aGlzLnNlY3JldF9wYXJhbWV0ZXJzKGNvbmZpZ190aW5rZXIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgcHJveHlfcGFyYW1zIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGwgNicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IGDim5Qg6Kit5a6a5YCk44Gu5L+d5a2Y44Gn44Ko44Op44O844GM55m655Sf44GX44G+44GX44Gf44CC6Kit5a6a5YCk44KS6KaL55u044GX44Gm44GP44Gg44GV44GE44CC77yIJHtlcnJvcn3vvIlgO1xuICAgICAgICAgICAgICAgIGFsZXJ0KG1zZyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGwgNycpO1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb3h5X3BhcmFtcy5mb3JFYWNoKGFzeW5jIChwYXJhbSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgcGFyYW0gfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ga2ludG9uZS5wbHVnaW4uYXBwLnNldFByb3h5Q29uZmlnKHBhcmFtLlVSTCwgcGFyYW0ubWV0aG9kLCBwYXJhbS5oZWFkZXJzLCBwYXJhbS5kYXRhLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIOeUu+mdoumBt+enu+OBleOBm+OBquOBhOOBn+OCgeOBq3N1Y2Nlc3MgY2FsbGJhY2vjgpLlrprnvqnjgZnjgotcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coeyByZXN1bHQgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIOmAmuW4uOOBruioreWumuWApOOCkuagvOe0jeOBmeOCi1xuICAgICAgICAgICAgbGV0IHN0b3JlX3BhcmFtZXRlcnM7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxsIDEnKTtcbiAgICAgICAgICAgICAgICBzdG9yZV9wYXJhbWV0ZXJzID0gdGhpcy5zdG9yZV9wYXJhbWV0ZXJzKGNvbmZpZ190aW5rZXIpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjYWxsIDInKTtcbiAgICAgICAgICAgICAgICAvLyDjg4fjg7zjgr/jg5njg7zjgrnjg63jg4Pjgq/jgqjjg6njg7zjga7lm57pgb/jga7jgZ/jgoHjgavjgqbjgqfjgqTjg4jjgpLlhaXjgozjgabjgYTjgotcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGwgMycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkoc3RvcmVfcGFyYW1ldGVycyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNlcmlhbGl6ZWQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb25maWcgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnW3RoaXMuS0VZX0NPTkZJR10gPSBzZXJpYWxpemVkO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2FsbCA0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGtpbnRvbmUucGx1Z2luLmFwcC5zZXRDb25maWcoY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBhbGVydCgn8J+GmSDjg5fjg6njgrDjgqTjg7PoqK3lrprjgpLkv53lrZjjgZfjgb7jgZfjgZ/jgILjgqLjg5fjg6rjga7mm7TmlrDjgpLjgYrlv5jjgozjgarjgY/vvIEnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJy4uLy4uL2Zsb3c/YXBwPScgKyBraW50b25lLmFwcC5nZXRJZCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGwgNicpO1xuICAgICAgICAgICAgICAgIGFsZXJ0KGDim5Qg6Kit5a6a5YCk44Gu5L+d5a2Y44Gn44Ko44Op44O844GM55m655Sf44GX44G+44GX44Gf44CC6Kit5a6a5YCk44KS6KaL55u044GX44Gm44GP44Gg44GV44GE44CC77yIJHtlcnJvcn3vvIlgKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2FsbCA3Jyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coJ2NhbGwgOCcpO1xuICAgICAgICByZXR1cm4gYnRuX3N1Ym1pdDtcbiAgICB9XG4gICAgLy8g44Kt44Oj44Oz44K744Or44Oc44K/44OzXG4gICAgbWFrZV9idXR0b25fY2FuY2VsKCkge1xuICAgICAgICBjb25zdCBidG5fY2FuY2VsID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdidXR0b24nLCAnanMtY2FuY2VsLWJ1dHRvbiBraW50b25lcGx1Z2luLWJ1dHRvbi1kaWFsb2ctY2FuY2VsJyk7XG4gICAgICAgIGJ0bl9jYW5jZWwudGV4dENvbnRlbnQgPSAn44Kt44Oj44Oz44K744OrJztcbiAgICAgICAgYnRuX2NhbmNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXZlbnQpO1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSAnLi4vLi4vJyArIGtpbnRvbmUuYXBwLmdldElkKCkgKyAnL3BsdWdpbi8nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGJ0bl9jYW5jZWw7XG4gICAgfVxuICAgIC8vIOOCpOODmeODs+ODiOODleODg+OCr+OCkueZu+mMsuOBmeOCi1xuICAgIGFkZF9ob29rKGV2ZW50X25hbWUsIGZ1bmMpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9va3NbZXZlbnRfbmFtZV0gPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhvb2tzW2V2ZW50X25hbWVdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ob29rc1tldmVudF9uYW1lXT8ucHVzaChmdW5jKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbmZpZ01hbmFnZXIgPSBDb25maWdNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbmZpZ1V0aWxpdGllcyA9IHZvaWQgMDtcbmNvbnN0IGNvbW1vbnV0aWxzXzEgPSByZXF1aXJlKFwiY29tbW9udXRpbHNcIik7XG4vLyBpbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuL2NvbW1vblwiKTtcbi8qKlxuICog6Kit5a6a55S76Z2i44Gu5YWx6YCa5Yem55CGXG4gKi9cbmNsYXNzIENvbmZpZ1V0aWxpdGllcyB7XG4gICAgc3RhdGljIERFRkFVTFRfT1BUSU9OID0gJy0tLS0nOyAvLyDmnKrpgbjmip7nirbmhYvjgpLooajjgZnmloflrZfliJdcbiAgICBjb25maWdfZm9ybTtcbiAgICB3aG9sZV9zZWxlY3RlZF9maWVsZF9jb2RlcztcbiAgICBjb25zdHJ1Y3Rvcihjb25maWdfZm9ybSkge1xuICAgICAgICB0aGlzLmNvbmZpZ19mb3JtID0gY29uZmlnX2Zvcm07XG4gICAgICAgIC8vIOODleOCo+ODvOODq+ODieOBrumHjeikh+ODgeOCp+ODg+OCr1xuICAgICAgICB0aGlzLndob2xlX3NlbGVjdGVkX2ZpZWxkX2NvZGVzID0gW107XG4gICAgfVxuICAgIGFkZF9zZWxlY3RlZF9maWVsZF9jb2RlcyA9IChjb2RlKSA9PiB7XG4gICAgICAgIHRoaXMud2hvbGVfc2VsZWN0ZWRfZmllbGRfY29kZXMucHVzaChjb2RlKTtcbiAgICB9O1xuICAgIC8vIOODl+ODq+ODgOOCpuODs+OBp+mBuOaKnua4iOOBv+OBruODleOCo+ODvOODq+ODieOBq+mHjeikh+OBjOOBquOBhOOBi+ODgeOCp+ODg+OCr+OBmeOCi1xuICAgIGlzX292ZXJsYXBwZWQoYWRkaXRpb25hbF9sYWJlbHMpIHtcbiAgICAgICAgcmV0dXJuIGNvbW1vbnV0aWxzXzEuVXRpbHMuaXNfb3ZlcmxhcHBlZCh0aGlzLm92ZXJsYXBwZWQoYWRkaXRpb25hbF9sYWJlbHMpKTtcbiAgICB9XG4gICAgb3ZlcmxhcHBlZChhZGRpdGlvbmFsX2xhYmVscyA9IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYWRkaXRpb25hbF9sYWJlbHMgIT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLndob2xlX3NlbGVjdGVkX2ZpZWxkX2NvZGVzLmNvbmNhdChhZGRpdGlvbmFsX2xhYmVscyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbW1vbnV0aWxzXzEuVXRpbHMub3ZlcmxhcHBlZCh0aGlzLndob2xlX3NlbGVjdGVkX2ZpZWxkX2NvZGVzKTtcbiAgICB9XG4gICAgY2xlYXJfc2VsZWN0ZWRfZmllbGRfbGFiZWxzKCkge1xuICAgICAgICB0aGlzLndob2xlX3NlbGVjdGVkX2ZpZWxkX2NvZGVzID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODieODreODg+ODl+ODgOOCpuODs+imgee0oOOBi+OCiemBuOaKnuOBl+OBpuOBhOOCi+ODleOCo+ODvOODq+ODieOBruODleOCo+ODvOODq+ODieOCs+ODvOODieOCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBzZWxlY3Rfbm9kZV9pZCDpgbjmip7jgZfjgZ/jg5XjgqPjg7zjg6vjg4njga7jg5XjgqPjg7zjg6vjg4njgrPjg7zjg4lcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldF9zZWxlY3RlZF9maWVsZGNvZGUgPSAoc2VsZWN0X25vZGVfaWQpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coYFtDb25maWdUaW5rZXJdIGdldF9zZWxlY3RlZF9maWVsZGNvZGUoKTogJHtzZWxlY3Rfbm9kZV9pZH1gKTtcbiAgICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdF9ub2RlX2lkKTtcbiAgICAgICAgaWYgKG5vZGUuc2VsZWN0ZWRJbmRleCA9PSAtMSkgeyAvLyDpgbjmip7jgZXjgozjgabjgYTjgarjgYRcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChub2RlLm9wdGlvbnNbbm9kZS5zZWxlY3RlZEluZGV4XS5sYWJlbCA9PSBDb25maWdVdGlsaXRpZXMuREVGQVVMVF9PUFRJT04pIHsgLy8g44OH44OV44Kp44Or44OI5YCk77yI56m65qyE77yJ44GM6YG45oqe44GV44KM44Gm44GE44KLXG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29kZSA9IG5vZGUuc2VsZWN0ZWRPcHRpb25zWzBdLmdldEF0dHJpYnV0ZSgnZmllbGRjb2RlJyk7XG4gICAgICAgIGlmIChjb2RlID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg44OO44O844OJWyAke3NlbGVjdF9ub2RlX2lkfSBd44Gv44OV44Kj44O844Or44OJ6YG45oqe44Gn44Gv44GC44KK44G+44Gb44KT44CCYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiDjg4njg63jg4Pjg5fjg4Djgqbjg7PopoHntKDjgYvjgonpgbjmip7mloflrZfliJfjgpLlj5blvpfjgZnjgotcbiAgICAgKiBAcGFyYW0gc2VsZWN0X25vZGVfaWQg44OJ44Ot44OD44OX44OA44Km44Oz44GuSURcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldF9zZWxlY3RlZF9sYWJlbCA9IChzZWxlY3Rfbm9kZV9pZCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0NvbmZpZ1Rpbmtlcl0gZ2V0X3NlbGVjdGVkX2xhYmVsKCk6ICR7c2VsZWN0X25vZGVfaWR9YCk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzZWxlY3Rfbm9kZV9pZCk7XG4gICAgICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29uZmlnVXRpbGl0aWVzLmdldF9zZWxlY3RlZF9sYWJlbCgpOiDmjIflrprjga5JRCcke3NlbGVjdF9ub2RlX2lkfSfjgYwgbnVsbCDjgafjgZfjgZ/jgIJgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS5zZWxlY3RlZEluZGV4ID09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGUuc2VsZWN0ZWRPcHRpb25zWzBdLmxhYmVsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICog44OB44Kn44OD44Kv44Oc44OD44Kv44K544GL44KJ44CB6YG45oqe44Oc44OD44Kv44K544Gu44Op44OZ44Or44KS6YWN5YiX44Gn5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIHNlbGVjdF9ub2RlX2lkIOODgeOCp+ODg+OCr+ODnOODg+OCr+OCueOBrklEXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBnZXRfY2hlY2tlZF9ib3hlcyA9IChzZWxlY3Rfbm9kZV9pZCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhgW0NvbmZpZ1Rpbmtlcl0gZ2V0X2NoZWNrZWRfYm94ZXMoKTogJHtzZWxlY3Rfbm9kZV9pZH1gKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0X2JveGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgW2lkXj1cIiR7c2VsZWN0X25vZGVfaWR9LVwiXWApO1xuICAgICAgICBpZiAodGFyZ2V0X2JveGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbmZpZ1V0aWxpdGllcy5nZXRfY2hlY2tlZF9ib3hlcygpOiDmjIflrprjga5JRCcke3NlbGVjdF9ub2RlX2lkfS0n44GL44KJ5aeL44G+44KL44OB44Kn44OD44Kv44Oc44OD44Kv44K544GM6KaL44Gk44GL44KK44G+44Gb44KT44Gn44GX44Gf44CCYCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hlY2tlZF9sYWJlbHMgPSBBcnJheS5mcm9tKHRhcmdldF9ib3hlcykucmVkdWNlKChjaGVja2VkLCBjdXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoY3Vyci5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgY2hlY2tlZC5wdXNoKGN1cnIudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrZWQ7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgY29uc29sZS5sb2coeyBjaGVja2VkX2xhYmVscyB9KTtcbiAgICAgICAgcmV0dXJuIGNoZWNrZWRfbGFiZWxzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICog44Op44K444Kq44Oc44K/44Oz6KaB57Sg44GL44KJ6YG45oqe5paH5a2X5YiX44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIHNlbGVjdF9ub2RlX2lkIOODqeOCuOOCquODnOOCv+ODs+OBrk5hbWVcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldF9zZWxlY3RlZF9yYWRpbyhyYWRpb19pZCkge1xuICAgICAgICBjb25zdCByYWRpb19uYW1lID0gYHJhZGlvLSR7cmFkaW9faWR9YDtcbiAgICAgICAgY29uc29sZS5sb2coYFtDb25maWdUaW5rZXJdIGdldF9zZWxlY3RlZF9yYWRpbygpOiAke3JhZGlvX25hbWV9YCk7XG4gICAgICAgIGNvbnN0IG5vZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUocmFkaW9fbmFtZSk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IG5vZGVzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZV9pbnB1dCA9IG5vZGVzW2lkeF07XG4gICAgICAgICAgICBpZiAobm9kZV9pbnB1dC5jaGVja2VkID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZV9pbnB1dC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OG44Kt44K544OI5YWl5Yqb6KaB57Sg44GL44KJ5YWl5Yqb5paH5a2X5YiX44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIHNlbGVjdF9ub2RlX2lkIOODhuOCreOCueODiOWFpeWKm+OBrk5hbWVcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldF90ZXh0X3ZhbHVlKGZpZWxkY29kZSkge1xuICAgICAgICBjb25zdCBmaWVsZF9pZCA9IGB0ZXh0LSR7ZmllbGRjb2RlfWA7XG4gICAgICAgIGNvbnNvbGUubG9nKGBbQ29uZmlnVGlua2VyXSBnZXRfdGV4dF92YWx1ZSgpOiAke2ZpZWxkX2lkfWApO1xuICAgICAgICBjb25zdCBub2RlX2lucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZmllbGRfaWQpO1xuICAgICAgICByZXR1cm4gbm9kZV9pbnB1dC52YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6KSH5pWw6KGM44OG44Kt44K544OI5YWl5Yqb6KaB57Sg44GL44KJ5YWl5Yqb5paH5a2X5YiX44KS5Y+W5b6X44GZ44KLXG4gICAgICogQHBhcmFtIHNlbGVjdF9ub2RlX2lkIOODhuOCreOCueODiOWFpeWKm+OBrk5hbWVcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldF9tdWx0aWxpbmV0ZXh0X3ZhbHVlKGZpZWxkY29kZSkge1xuICAgICAgICBjb25zdCBmaWVsZF9pZCA9IGBtdWx0aWxpbmUtJHtmaWVsZGNvZGV9YDtcbiAgICAgICAgY29uc29sZS5sb2coYFtDb25maWdUaW5rZXJdIGdldF9tdWx0aWxpbmVfdmFsdWUoKTogJHtmaWVsZF9pZH1gKTtcbiAgICAgICAgY29uc3Qgbm9kZV9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZpZWxkX2lkKTtcbiAgICAgICAgcmV0dXJuIG5vZGVfaW5wdXQudmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaVsOWtl+WFpeWKm+imgee0oOOBi+OCieWFpeWKm+aWh+Wtl+WIl+OCkuWPluW+l+OBmeOCi1xuICAgICAqIEBwYXJhbSBzZWxlY3Rfbm9kZV9pZCDjg4bjgq3jgrnjg4jlhaXlipvjga5OYW1lXG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBnZXRfbnVtYmVyX3ZhbHVlKGZpZWxkY29kZSkge1xuICAgICAgICBjb25zdCBmaWVsZF9pZCA9IGBudW1iZXItJHtmaWVsZGNvZGV9YDtcbiAgICAgICAgY29uc29sZS5sb2coYFtDb25maWdUaW5rZXJdIGdldF9udW1iZXJfdmFsdWUoKTogJHtmaWVsZF9pZH1gKTtcbiAgICAgICAgY29uc3Qgbm9kZV9pbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZpZWxkX2lkKTtcbiAgICAgICAgcmV0dXJuIG5vZGVfaW5wdXQudmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCpOODs+OCr+ODquODoeODs+OCv+ODq+ODhuODvOODluODq+OBrmZpZWxkY29kZeOCkuaMh+WumuOBl+OBpmlucHV06KaB57Sg44Gu5YCk44Gg44GR44KS5oqc44GN5Ye644GX44Gf6YWN5YiX44KS5qeL56+J44GZ44KLXG4gICAgICogQHBhcmFtIGZpZWxkY29kZSDjg4bjg7zjg5bjg6vopoHntKDjga7jg5XjgqPjg7zjg6vjg4njgrPjg7zjg4lcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldF9pbmNyZW1lbnRhbF90YWJsZV92YWx1ZXMoZmllbGRjb2RlKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkX2lkID0gYHRhYmxlLSR7ZmllbGRjb2RlfWA7XG4gICAgICAgIGNvbnN0IG5vZGVfdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmaWVsZF9pZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKGZpZWxkX2lkKTtcbiAgICAgICAgY29uc29sZS5sb2cobm9kZV90YWJsZSk7XG4gICAgICAgIGlmIChub2RlX3RhYmxlID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5oyH5a6a44GX44Gf44OG44O844OW44Or44GM6KaL44Gk44GL44KK44G+44Gb44KT44CCKGlkOiAke2ZpZWxkX2lkfSlgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hYnN0cnVjdF9mcm9tX2luY3JlbWVudGFsX3RhYmxlKG5vZGVfdGFibGUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDjgqTjg7Pjgq/jg6rjg6Hjg7Pjgr/jg6vjg4bjg7zjg5bjg6vjgYvjgolpbnB1dOimgee0oOOBruWApOOBoOOBkeOCkuaKnOOBjeWHuuOBl+OBn+mFjeWIl+OCkuani+evieOBmeOCi1xuICAgICAqIEBwYXJhbSBub2RlX3RhYmxlIOOCpOODs+OCr+ODquODoeODs+OCv+ODq+ODhuODvOODluODq+OBrkRPTVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYWJzdHJ1Y3RfZnJvbV9pbmNyZW1lbnRhbF90YWJsZShub2RlX3RhYmxlKSB7XG4gICAgICAgIGNvbnN0IHdob2xlX2hlYWRlcnMgPSBBcnJheS5mcm9tKG5vZGVfdGFibGUucm93cykuZmlsdGVyKChyb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByb3cuZmlyc3RDaGlsZD8ubm9kZU5hbWUgPT0gXCJUSFwiOyAvLyDjg5jjg4Pjg4DooYzjgpLlj5bjgorlh7rjgZlcbiAgICAgICAgfSkubWFwKChyb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRzID0gQXJyYXkuZnJvbShyb3cuY2VsbHMpLmZpbHRlcigoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBjZWxsLmlubmVyVGV4dCAhPSBcIlwiO1xuICAgICAgICAgICAgfSkubWFwKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNlbGwuaW5uZXJUZXh0O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0ZXh0cyk7XG4gICAgICAgICAgICByZXR1cm4gdGV4dHM7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gd2hvbGVfaGVhZGVyc1swXTtcbiAgICAgICAgY29uc29sZS5sb2coeyBoZWFkZXJzIH0pO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBBcnJheS5mcm9tKG5vZGVfdGFibGUucm93cykuZmlsdGVyKChyb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByb3cuZmlyc3RDaGlsZD8ubm9kZU5hbWUgIT0gXCJUSFwiOyAvLyDjg5jjg4Pjg4DooYzjgpLpmaTjgY9cbiAgICAgICAgfSkubWFwKChyb3cpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNlbGxzID0gQXJyYXkuZnJvbShyb3cuY2VsbHMpLmZpbHRlcigoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0X2VsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2tpbnRvbmVwbHVnaW4taW5wdXQtdGV4dCcpWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkX2VsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NlbGVjdC1raW50b25lLWZpZWxkJylbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgY2hlY2tib3hfZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgna2ludG9uZXBsdWdpbi1pbnB1dC1jaGVja2JveC1pdGVtJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0X2VsZW1lbnQgIT09IHVuZGVmaW5lZCB8fCBzZWxlY3RlZF9lbGVtZW50ICE9PSB1bmRlZmluZWQgfHwgY2hlY2tib3hfZWxlbWVudCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSkubWFwKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8g5LiA6KGM44OG44Kt44K544OIXG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRfZWxlbWVudCA9IGNlbGwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgna2ludG9uZXBsdWdpbi1pbnB1dC10ZXh0JylbMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coeyBpbnB1dF9lbGVtZW50IH0pO1xuICAgICAgICAgICAgICAgIGlmIChpbnB1dF9lbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0X2VsZW1lbnQudmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIOaKnuS4gOmBuOaKnlxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkX2VsZW1lbnQgPSBjZWxsLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3NlbGVjdC1raW50b25lLWZpZWxkJylbMF07XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coeyBzZWxlY3RlZF9lbGVtZW50IH0pO1xuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZF9lbGVtZW50ICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzZWxlY3RlZF9lbGVtZW50LnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgaW5kZXggfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdGVkX2VsZW1lbnRbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoJ2ZpZWxkY29kZScgaW4gc2VsZWN0ZWRfZWxlbWVudFtpbmRleF0uYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYHNlbGVjdGVkX2VsZW1lbnQgZmllbGRjb2RlOiAke29wdGlvbi5nZXRBdHRyaWJ1dGUoJ2ZpZWxkY29kZScpfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRjb2RlID0gb3B0aW9uLmdldEF0dHJpYnV0ZSgnZmllbGRjb2RlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRjb2RlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmllbGRjb2RlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZF9lbGVtZW50W2luZGV4XS5sYWJlbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8g44OB44Kn44OD44Kv44Oc44OD44Kv44K5XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coeyBjZWxsIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94X2l0ZW1zID0gY2VsbC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdraW50b25lcGx1Z2luLWlucHV0LWNoZWNrYm94Jyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coeyBjaGVja2JveF9pdGVtcyB9KTtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tib3hfaXRlbXMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShjaGVja2JveF9pdGVtcykuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZV9jaGVja2JveCA9IGl0ZW0uY2hpbGROb2Rlc1swXS5jaGlsZE5vZGVzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGVfY2hlY2tib3guY2hlY2tlZDtcbiAgICAgICAgICAgICAgICAgICAgfSkubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coeyBpdGVtIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udGV4dENvbnRlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign44Op44OZ44Or44Gu44Gq44GE44OB44Kn44OD44Kv44Oc44OD44Kv44K544GM5a6a576p44GV44KM44Gm44GE44G+44GZ44CCJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS50ZXh0Q29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihg5pyq5a++5b+c44Gu44OG44O844OW44Or44K744OrICR7cm93fSDjgYzmuKHjgZXjgozjgb7jgZfjgZ/jgIJgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNlbGxzO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS5sb2coeyB2YWx1ZXMgfSk7IC8vIHN0cmluZ1tdW11cbiAgICAgICAgY29uc3QgZmlsdGVyZWQgPSB2YWx1ZXMuZmlsdGVyKChyb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByb3cubGVuZ3RoID4gMDtcbiAgICAgICAgfSkuZmlsdGVyKChyb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiByb3cuZmlsdGVyKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNlbGwubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIH0pLmxlbmd0aCA+IDA7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyhmaWx0ZXJlZCk7XG4gICAgICAgIGlmIChmaWx0ZXJlZC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaGVhZGVyZXPjgah2YWx1ZXPjgafovp7mm7jjgpLmp4vnr4njgZfjgabov5TjgZnjgIJcbiAgICAgICAgLy8gY29uc3Qga2V5cyA9IFsnYScsICdiJywgJ2MnXTtcbiAgICAgICAgLy8gY29uc3QgdmFsdWVzID0gWzEsIDIsIDNdO1xuICAgICAgICBjb25zdCB0YWJsZV92YWx1ZXMgPSB2YWx1ZXMubWFwKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnJlZHVjZSgocHJldiwgY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBwcmV2W2hlYWRlcnNbaW5kZXhdXSA9IGNlbGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyh7IHRhYmxlX3ZhbHVlcyB9KTtcbiAgICAgICAgcmV0dXJuIHRhYmxlX3ZhbHVlcztcbiAgICB9XG4gICAgLy8gRmllbGRUeXBl44KS5Y+X44GR5Y+W44Gj44Gm6YGp5YiH44Gq5YCk44KS6L+U44GZXG4gICAgZ2V0X3NlbGVjdGVkKG5vZGVfaWQsIGZpZWxkX3R5cGUpIHtcbiAgICAgICAgc3dpdGNoIChmaWVsZF90eXBlKSB7XG4gICAgICAgICAgICBjYXNlIGNvbW1vbl8xLkZpZWxkVHlwZS5Ecm9wZG93bjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfc2VsZWN0ZWRfbGFiZWwobm9kZV9pZCk7XG4gICAgICAgICAgICBjYXNlIGNvbW1vbl8xLkZpZWxkVHlwZS5DaGVja2JveDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfY2hlY2tlZF9ib3hlcyhub2RlX2lkKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLlJhZGlvOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF9zZWxlY3RlZF9yYWRpbyhub2RlX2lkKTtcbiAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLkRyb3Bkb3duX0ZpZWxkU2VsZWN0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF9zZWxlY3RlZF9maWVsZGNvZGUobm9kZV9pZCk7XG4gICAgICAgICAgICBjYXNlIGNvbW1vbl8xLkZpZWxkVHlwZS5UZXh0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF90ZXh0X3ZhbHVlKG5vZGVfaWQpO1xuICAgICAgICAgICAgY2FzZSBjb21tb25fMS5GaWVsZFR5cGUuTnVtYmVyOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF9udW1iZXJfdmFsdWUobm9kZV9pZCk7XG4gICAgICAgICAgICBjYXNlIGNvbW1vbl8xLkZpZWxkVHlwZS5NdWx0aWxpbmVUZXh0OlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldF9tdWx0aWxpbmV0ZXh0X3ZhbHVlKG5vZGVfaWQpO1xuICAgICAgICAgICAgY2FzZSBjb21tb25fMS5GaWVsZFR5cGUuSW5jcmVtZW50YWxUYWJsZTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRfaW5jcmVtZW50YWxfdGFibGVfdmFsdWVzKG5vZGVfaWQpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgZ2V0X3NlbGVjdGVkKCk6IOS4jeaYjuOBquODleOCo+ODvOODq+ODieOCv+OCpOODl+OBjOa4oeOBleOCjOOBvuOBl+OBnyAoZmllbGRfdHlwZTogJHtmaWVsZF90eXBlfSlgKTtcbiAgICB9XG59XG5leHBvcnRzLkNvbmZpZ1V0aWxpdGllcyA9IENvbmZpZ1V0aWxpdGllcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5GaWVsZEJ1aWxkZXIgPSB2b2lkIDA7XG5jb25zdCBjb21tb251dGlsc18xID0gcmVxdWlyZShcImNvbW1vbnV0aWxzXCIpO1xuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi9jb21tb25cIik7XG5jb25zdCBjb25maWdfYnVpbGRlcl8xID0gcmVxdWlyZShcIi4vY29uZmlnLWJ1aWxkZXJcIik7XG5jb25zdCBjb25maWdfdXRpbGl0aWVzXzEgPSByZXF1aXJlKFwiLi9jb25maWctdXRpbGl0aWVzXCIpO1xuY2xhc3MgRmllbGRCdWlsZGVyIHtcbiAgICBwcm9wcztcbiAgICBlbXB0eV9sYWJlbDtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcywgZW1wdHlfbGFiZWwgPSBjb25maWdfdXRpbGl0aWVzXzEuQ29uZmlnVXRpbGl0aWVzLkRFRkFVTFRfT1BUSU9OKSB7XG4gICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgdGhpcy5lbXB0eV9sYWJlbCA9IGVtcHR5X2xhYmVsO1xuICAgIH1cbiAgICAvLyBcbiAgICAvLyBUT0RPOiDjg4bjgq3jgrnjg4jjg5XjgqPjg7zjg6vjg4nku6XlpJbjgpLov73liqDlrp/oo4XjgZnjgotcbiAgICAvLyDov73liqDlrp/oo4XjgZfjgZ/loLTlkIjjga/jgIHjgYLjgo/jgZvjgaYgQ29uZmlnVXRpbGl0aWVzLmdldF9zZWxlY3RlZCgp44Gr44KC5L+d5a2Y5Yem55CG44Gu5a6f6KOF44GM5b+F6KaB44Gn44GZ44CCXG4gICAgLy8gIENvbmZpZ01hbmFnZXIubWFrZV9wYXJhZ3JhcGgoKSDjgYvjgonjgoLlrprnvqnjgZfjgabjgY/jgaDjgZXjgYTjgIJcbiAgICAvKipcbiAgICAgKiBGaWVsZFR5cGXjgavlkIjjgo/jgZvjgZ/jgrvjg6vjgpLmp4vnr4njgZfjgabov5TjgZlcbiAgICAgKiBAcGFyYW0gdGFibGVfaWQg5qeL56+J5Lit44OG44O844OW44Or44Gu44OV44Kj44O844Or44OJ44Kz44O844OJXG4gICAgICogQHBhcmFtIGNvbHVtbiDjg4bjg7zjg5bjg6vjgrvjg6vjgavlhaXjgozjgovjg5XjgqPjg7zjg6vjg4noqK3lrprjgIFzZXR0aW5ncy5qc+OBi+OCieOAglxuICAgICAqIEBwYXJhbSB2YWx1ZSDkv53lrZjjgZXjgozjgabjgYTjgZ/lgKRcbiAgICAgKiBAcGFyYW0gcm93X2NvdW50IOihjOeVquWPt1xuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYnVpbGRfdGFibGVfY2VsbCh0YWJsZV9pZCwgY29sdW1uLCB2YWx1ZSwgcm93X2NvdW50KSB7XG4gICAgICAgIC8vIFRhYmxlTXVsdGlwbGVDb2x1bW7jga7jgrHjg7zjgrlcbiAgICAgICAgaWYgKCdhY2NlcHQnIGluIGNvbHVtbikge1xuICAgICAgICAgICAgc3dpdGNoIChjb2x1bW4udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLkNoZWNrYm94OiAvLyDjg4Hjgqfjg4Pjgq/jg5zjg4Pjgq/jgrlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRfY2hlY2tib3hfY2VsbCh2YWx1ZSwgY29sdW1uLCB0YWJsZV9pZCwgcm93X2NvdW50KTtcbiAgICAgICAgICAgICAgICBjYXNlIGNvbW1vbl8xLkZpZWxkVHlwZS5Ecm9wZG93bjogLy8g44OJ44Ot44OD44OX44OA44Km44OzXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkX2Ryb3Bkb3duX2NlbGwodmFsdWUsIGNvbHVtbik7XG4gICAgICAgICAgICAgICAgY2FzZSBjb21tb25fMS5GaWVsZFR5cGUuRHJvcGRvd25fRmllbGRTZWxlY3Q6IC8vIOODleOCo+ODvOODq+ODiemBuOaKnuODieODreODg+ODl+ODgOOCpuODs1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZF9kcm9wZG93bl9maWVsZHNlbGVjdF9jZWxsKHZhbHVlLCBjb2x1bW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIFRhYmxlQ29sdW1u44Gu44Kx44O844K5XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoIChjb2x1bW4udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgY29tbW9uXzEuRmllbGRUeXBlLlRleHQ6IC8vIOS4gOihjOODhuOCreOCueODiFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZF90ZXh0Y2VsbCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDmnKrlrprnvqnjga5GaWVsZFR5cGXjgYzmuKHjgZXjgozjgb7jgZfjgZ/jgIJGaWVsZFR5cGXjgaske2NvbHVtbi50eXBlfSDjgpLlrp/oo4XjgZfjgabjgY/jgaDjgZXjgYTjgIJgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5LiA6KGM44OG44Kt44K544OI44K744Or44KS5qeL56+JXG4gICAgICogQHBhcmFtIHByZXNldCDoqK3lrprnlLvpnaLjga7kv53lrZjlgKRcbiAgICAgKiBAcGFyYW0gY29sdW1uIOOCu+ODq+OBruioreWumuaDheWgsVxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYnVpbGRfdGV4dGNlbGwgPSAocHJlc2V0KSA9PiB7XG4gICAgICAgIHByZXNldCA9IHByZXNldCA9PT0gdW5kZWZpbmVkID8gJycgOiBwcmVzZXQ7XG4gICAgICAgIHJldHVybiBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsICdraW50b25lcGx1Z2luLWlucHV0LW91dGVyJywgW1xuICAgICAgICAgICAgY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdpbnB1dCcsICdraW50b25lcGx1Z2luLWlucHV0LXRleHQnLCBbXSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICAgICAgJ3R5cGUnOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgJ3ZhbHVlJzogcHJlc2V0XG4gICAgICAgICAgICB9KVxuICAgICAgICBdKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIOODgeOCp+ODg+OCr+ODnOODg+OCr+OCueOCu+ODq+OCkuani+eviVxuICAgICAqIEBwYXJhbSBwcmVzZXQg6Kit5a6a55S76Z2i44Gu5L+d5a2Y5YCkXG4gICAgICogQHBhcmFtIGNvbHVtbiDjgrvjg6vjga7oqK3lrprmg4XloLFcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGJ1aWxkX2NoZWNrYm94X2NlbGwgPSAocHJlc2V0LCBjb2x1bW4sIHRhYmxlX2lkLCByb3dfY291bnQpID0+IHtcbiAgICAgICAgY29uc3QgbGlzdF9jaGVja2JveCA9IGNvbHVtbi5hY2NlcHQubWFwKGJveF92YWx1ZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjaGVja2JveF9pZCA9IGAke3RhYmxlX2lkfS0ke3Jvd19jb3VudH0tJHtib3hfdmFsdWV9YDtcbiAgICAgICAgICAgIHByZXNldCA9IHByZXNldCA9PT0gdW5kZWZpbmVkID8gW10gOiBwcmVzZXQ7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh7IGJveF92YWx1ZSB9KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgcHJlc2V0IH0pO1xuICAgICAgICAgICAgY29uc3QgY2hlY2tlZCA9IHByZXNldC5pbmNsdWRlcyhib3hfdmFsdWUpID8gXCJjaGVja2VkXCIgOiBcIlwiO1xuICAgICAgICAgICAgY29uc3Qgbm9kZV9jaGVja2JveCA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY2UoJ2lucHV0JywgJycsIFtdLCAnJywge1xuICAgICAgICAgICAgICAgICd0eXBlJzogJ2NoZWNrYm94JyxcbiAgICAgICAgICAgICAgICAnbmFtZSc6ICdjaGVja2JveCcsXG4gICAgICAgICAgICAgICAgJ3ZhbHVlJzogYm94X3ZhbHVlLFxuICAgICAgICAgICAgICAgICdpZCc6IGNoZWNrYm94X2lkXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChjaGVja2VkICE9IFwiXCIpIHtcbiAgICAgICAgICAgICAgICBub2RlX2NoZWNrYm94LnNldEF0dHJpYnV0ZSgnY2hlY2tlZCcsIGNoZWNrZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbW1vbnV0aWxzXzEuVXRpbHMuY2UoJ2RpdicsICdraW50b25lcGx1Z2luLWlucHV0LWNoZWNrYm94JywgW1xuICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnc3BhbicsICdraW50b25lcGx1Z2luLWlucHV0LWNoZWNrYm94LWl0ZW0nLCBbXG4gICAgICAgICAgICAgICAgICAgIG5vZGVfY2hlY2tib3gsXG4gICAgICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY2UoJ2xhYmVsJywgJycsIFtdLCBib3hfdmFsdWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdmb3InOiBjaGVja2JveF9pZFxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsICcnLCBsaXN0X2NoZWNrYm94KTtcbiAgICB9O1xuICAgIGJ1aWxkX2Ryb3Bkb3duX2NlbGwgPSAocHJlc2V0LCBjb2x1bW4pID0+IHtcbiAgICAgICAgaWYgKGNvbHVtbiA9PSB1bmRlZmluZWQgfHwgISgnYWNjZXB0JyBpbiBjb2x1bW4pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+mBuOaKnuiCouaDheWgseOBqOOBl+OBpnVuZGVmaW5lZOOBjOa4oeOBleOCjOOBvuOBl+OBn+OAgicpO1xuICAgICAgICB9XG4gICAgICAgIHByZXNldCA9IHByZXNldCA9PT0gdW5kZWZpbmVkID8gJycgOiBwcmVzZXQ7XG4gICAgICAgIC8vIHN0YXRpYyBidWlsZF9maWVsZHNfZHJvcGRvd24oXG4gICAgICAgIC8vICAgICBwcm9wczogYW55XG4gICAgICAgIC8vICAgICAsIGFjY2VwdHM6IHN0cmluZ1tdXG4gICAgICAgIC8vICAgICAsIHNlbGVjdGVkX2ZpZWxkY29kZTogc3RyaW5nID0gXCJcIlxuICAgICAgICAvLyAgICAgLCBzZWxlY3RlZF9ub2RlX2lkID0gXCJcIlxuICAgICAgICAvLyAgICAgLCBlbXB0eV9sYWJlbDogc3RyaW5nIHwgbnVsbCA9IG51bGxcbiAgICAgICAgLy8gKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkX2Ryb3Bkb3duID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdzZWxlY3QnLCAnc2VsZWN0LWtpbnRvbmUtZmllbGQnKTtcbiAgICAgICAgaWYgKGNvbHVtbi5lbXB0eV9sYWJlbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBlbXB0eV9pdGVtID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIGVtcHR5X2l0ZW0ubGFiZWwgPSBjb2x1bW4uZW1wdHlfbGFiZWw7XG4gICAgICAgICAgICBmaWVsZF9kcm9wZG93bi5hcHBlbmRDaGlsZChlbXB0eV9pdGVtKTtcbiAgICAgICAgfVxuICAgICAgICBjb2x1bW4uYWNjZXB0LmZvckVhY2goKGxhYmVsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIGl0ZW0ubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgICAgIGlmIChsYWJlbCA9PSBwcmVzZXQpIHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZF9kcm9wZG93bi5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsICcnLCBbXG4gICAgICAgICAgICBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsIFwia2ludG9uZXBsdWdpbi1zZWxlY3Qtb3V0ZXJcIiwgW1xuICAgICAgICAgICAgICAgIGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJ2tpbnRvbmVwbHVnaW4tc2VsZWN0JywgW2ZpZWxkX2Ryb3Bkb3duXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICog44Kk44Oz44Kv44Oq44Oh44Oz44K/44Or44OG44O844OW44Or5Lit44Gn44CB44OV44Kj44O844Or44OJ6YG45oqe44Gu44OJ44Ot44OD44OX44OA44Km44Oz44KS5qeL56+J44GZ44KLXG4gICAgICogQHBhcmFtIHByZXNldCDkv53lrZjmuIjjgb/oqK3lrprmg4XloLFcbiAgICAgKiBAcGFyYW0gY29sdW1uIOODleOCo+ODvOODq+ODiemBuOaKnuODieODreODg+ODl+ODgOOCpuODs+OBrumBuOaKnuiCouOBqOOBl+OBpuWIl+aMmeOBl+OBn+OBhOODleOCo+ODvOODq+ODieOBruWei+aDheWgseOCkuWQq+OCgOODh+ODvOOCv1xuICAgICAqIEBwYXJhbSBzaG93X2ZjIHRydWXjga7jgajjgY1vcHRpb27jga7jg6njg5njg6vjgavjg5XjgqPjg7zjg6vjg4njgrPjg7zjg4njgpLooajnpLrjgZnjgotcbiAgICAgKi9cbiAgICBidWlsZF9kcm9wZG93bl9maWVsZHNlbGVjdF9jZWxsID0gKHByZXNldCwgY29sdW1uKSA9PiB7XG4gICAgICAgIGlmIChjb2x1bW4gPT0gdW5kZWZpbmVkIHx8ICEoJ2FjY2VwdCcgaW4gY29sdW1uKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCfpgbjmip7ogqLmg4XloLHjgajjgZfjgaZ1bmRlZmluZWTjgYzmuKHjgZXjgozjgb7jgZfjgZ/jgIInKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJ0cyA9IGNvbmZpZ19idWlsZGVyXzEuQ29uZmlnQnVpbGRlci5nZXRfZm9ybXBhcnRzKHRoaXMucHJvcHMsIGNvbHVtbi5hY2NlcHQpO1xuICAgICAgICBjb25zdCBmaWVsZF9kcm9wZG93biA9IGNvbW1vbnV0aWxzXzEuVXRpbHMuY3JlYXRlRWxlbWVudCgnc2VsZWN0JywgJ3NlbGVjdC1raW50b25lLWZpZWxkJyk7XG4gICAgICAgIGZpZWxkX2Ryb3Bkb3duLmlkID0gcHJlc2V0ID09PSB1bmRlZmluZWQgPyAnJyA6IHByZXNldDtcbiAgICAgICAgLy8g5pyq6YG45oqe44Ki44Kk44OG44Og77yI5Yid5pyf5YCk77yJ44KS5L2c5oiQXG4gICAgICAgIGNvbnN0IGVtcHR5X2l0ZW0gPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xuICAgICAgICBlbXB0eV9pdGVtLmxhYmVsID0gdGhpcy5lbXB0eV9sYWJlbDtcbiAgICAgICAgZmllbGRfZHJvcGRvd24uYXBwZW5kQ2hpbGQoZW1wdHlfaXRlbSk7XG4gICAgICAgIGNvbnN0IHNob3dfZmMgPSBjb2x1bW4uZm9vdG5vdGUgPyBjb2x1bW4uZm9vdG5vdGUgOiBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBjb2RlIGluIHBhcnRzKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gcGFydHNbY29kZV07XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdmaWVsZGNvZGUnLCBjb2RlKTtcbiAgICAgICAgICAgIGlmIChzaG93X2ZjKSB7IC8vIOODleOCo+ODvOODq+ODieOCs+ODvOODieOBruihqOekuuWIh+OCiuabv+OBiFxuICAgICAgICAgICAgICAgIGl0ZW0ubGFiZWwgPSBwcm9wLmxhYmVsICsgYCBbJHtjb2RlfV1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5sYWJlbCA9IHByb3AubGFiZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29kZSA9PSBwcmVzZXQpIHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWVsZF9kcm9wZG93bi5hcHBlbmRDaGlsZChpdGVtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCAnJywgW1xuICAgICAgICAgICAgY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCdkaXYnLCBcImtpbnRvbmVwbHVnaW4tc2VsZWN0LW91dGVyXCIsIFtcbiAgICAgICAgICAgICAgICBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ2RpdicsICdraW50b25lcGx1Z2luLXNlbGVjdCcsIFtmaWVsZF9kcm9wZG93bl0pXG4gICAgICAgICAgICBdKVxuICAgICAgICBdKTtcbiAgICB9O1xufVxuZXhwb3J0cy5GaWVsZEJ1aWxkZXIgPSBGaWVsZEJ1aWxkZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW5jcmVtZW50YWxUYWJsZUJ1aWxkZXIgPSB2b2lkIDA7XG5jb25zdCBjb21tb251dGlsc18xID0gcmVxdWlyZShcImNvbW1vbnV0aWxzXCIpO1xuY29uc3QgY29uZmlnX2J1aWxkZXJfMSA9IHJlcXVpcmUoXCIuL2NvbmZpZy1idWlsZGVyXCIpO1xuY2xhc3MgSW5jcmVtZW50YWxUYWJsZUJ1aWxkZXIge1xuICAgIHRhYmxlX2NvbmY7XG4gICAgc2F2ZWRfcm93cztcbiAgICB0YWJsZV9yb3dzO1xuICAgIGZpZWxkX2J1aWxkZXI7XG4gICAgcm93c19jb3VudDsgLy8g44OG44O844OW44Or5YaF6YOo44Gr44KC44Gk6KGM5pWwXG4gICAgY29uc3RydWN0b3IoaW5wdXRfZmllbGQsIHNhdmVkX3Jvd3MsIGZpZWxkX2J1aWxkZXIpIHtcbiAgICAgICAgdGhpcy50YWJsZV9jb25mID0gaW5wdXRfZmllbGQ7XG4gICAgICAgIHRoaXMuc2F2ZWRfcm93cyA9IHNhdmVkX3Jvd3M7XG4gICAgICAgIHRoaXMuZmllbGRfYnVpbGRlciA9IGZpZWxkX2J1aWxkZXI7XG4gICAgICAgIHRoaXMudGFibGVfcm93cyA9IFtdO1xuICAgICAgICB0aGlzLnJvd3NfY291bnQgPSAwO1xuICAgIH1cbiAgICBidWlsZCgpIHtcbiAgICAgICAgLy8gY29uc3QgZmllbGRjb2RlID0gdGhpcy50YWJsZV9jb25mLmNvZGVcbiAgICAgICAgY29uc3QgdGFibGVfY29scyA9IHRoaXMudGFibGVfY29uZi50YWJsZV9jb2xzOyAvLyDjgqvjg6njg6Dopovlh7rjgZfjga7ovp7mm7hcbiAgICAgICAgY29uc3Qgc3BhY2VyX2NvdW50ID0gdGFibGVfY29scy5sZW5ndGggLSAzO1xuICAgICAgICBpZiAodGhpcy5zYXZlZF9yb3dzID09IG51bGwgfHwgT2JqZWN0LmtleXModGhpcy5zYXZlZF9yb3dzKS5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgLy8g5L+d5a2Y44GV44KM44Gm44GE44Gq44GE5aC05ZCI44Gv56m655m944GuMeihjOOCkui/veWKoOOBmeOCi1xuICAgICAgICAgICAgdGhpcy50YWJsZV9yb3dzLnB1c2godGhpcy5idWlsZF90YWJsZV9yb3coMCwgdGFibGVfY29scywgdW5kZWZpbmVkLCBzcGFjZXJfY291bnQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIOS/neWtmOOBleOCjOOBpuOBhOOBn+WgtOWQiOOBr+WFqOihjOOCkuW+qeaXp+OBmeOCi1xuICAgICAgICAgICAgLy8gZm9yIChjb25zdCBvcHQgb2YgdGhpcy5zYXZlZF9yb3dzKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmVkX3Jvd3MuZm9yRWFjaCgob3B0LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHRoaXMuYnVpbGRfdGFibGVfcm93KGluZGV4LCB0YWJsZV9jb2xzLCBvcHQsIHNwYWNlcl9jb3VudCk7XG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZV9yb3dzLnB1c2gocm93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy50YWJsZV9yb3dzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDoqK3lrprjg4bjg7zjg5bjg6vjga4x6KGM44KS5qeL56+J44GZ44KL44CC44GT44GT44Gn44Gv44OY44OD44OA44Gv5qeL56+J44GX44Gq44GE44CCXG4gICAgICogQHBhcmFtIHRhYmxlX2NvbHMgIOOCq+ODqeODoOOBruimi+WHuuOBl+OBqOOCu+ODq+OBrkZpZWxkU3R5bGXjga7ovp7mm7jphY3liJdcbiAgICAgKiBAcGFyYW0gc2F2ZWRfZGF0YSAgICDkv53lrZjjgZXjgozjgZ/lgKTjgIHliJ3mnJ/lgKTjga91bmRlZmluZWRcbiAgICAgKiBAcGFyYW0gc3BhY2VyX2NvbHMgICDjgrnjg5rjg7zjgrXjg7zjgpLjganjgZPjgavlhaXjgozjgovjgYvvvJ9cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGJ1aWxkX3RhYmxlX3Jvdyhyb3dfbnVtYmVyLCB0YWJsZV9jb2xzLCBzYXZlZF9kYXRhID0gdW5kZWZpbmVkLCBzcGFjZXJfY29scyA9IDApIHtcbiAgICAgICAgLy8g6KGM44KS5qeL56+JXG4gICAgICAgIGNvbnNvbGUubG9nKHsgdGFibGVfY29scyB9KTtcbiAgICAgICAgY29uc29sZS5sb2coeyBzYXZlZF9kYXRhIH0pO1xuICAgICAgICBjb25zdCBidWlsdF9yb3cgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHRhYmxlX2NvbHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjb2x1bW4gPSB0YWJsZV9jb2xzW2luZGV4XTtcbiAgICAgICAgICAgIC8vIGNvbnN0IHR5cGUgPSBjb2x1bW4udHlwZSAgICAgICAgLy8gRmllbGRUeXBlXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHNhdmVkX2RhdGEgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2F2ZWRfZGF0YVtjb2x1bW4uaGVhZGVyXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHsgdmFsdWUgfSk7XG4gICAgICAgICAgICBjb25zdCBpbnB1dF9maWVsZCA9IHRoaXMuZmllbGRfYnVpbGRlci5idWlsZF90YWJsZV9jZWxsKHRoaXMudGFibGVfY29uZi5jb2RlLCBjb2x1bW4sIHZhbHVlLCByb3dfbnVtYmVyKTtcbiAgICAgICAgICAgIGJ1aWx0X3Jvdy5wdXNoKGNvbW1vbnV0aWxzXzEuVXRpbHMuY2UoJ3RkJywgJycsIFtcbiAgICAgICAgICAgICAgICBjb21tb251dGlsc18xLlV0aWxzLmNlKCdkaXYnLCAna2ludG9uZXBsdWdpbi10YWJsZS10ZC1jb250cm9sJywgW1xuICAgICAgICAgICAgICAgICAgICBjb21tb251dGlsc18xLlV0aWxzLmNlKCdkaXYnLCAna2ludG9uZXBsdWdpbi10YWJsZS10ZC1jb250cm9sLXZhbHVlJywgW1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRfZmllbGRcbiAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSkpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFsrXeODnOOCv+ODs1xuICAgICAgICBjb25zdCBub2RlX2J1dHRvbl9hZGQgPSB0aGlzLmNyZWF0ZV9idXR0b25fcm93X2FkZCh0YWJsZV9jb2xzKTtcbiAgICAgICAgLy8gWy1d44Oc44K/44OzXG4gICAgICAgIGNvbnN0IG5vZGVfYnV0dG9uX3JlbW92ZSA9IHRoaXMuY3JlYXRlX2J1dHRvbl9yb3dfcmVtb3ZlKCk7XG4gICAgICAgIC8vIOOCueODmuODvOOCteODvFxuICAgICAgICBjb25zb2xlLmxvZyh7IHNwYWNlcl9jb2xzIH0pO1xuICAgICAgICBzcGFjZXJfY29scyA9IHNwYWNlcl9jb2xzIDwgMCA/IDAgOiBzcGFjZXJfY29scztcbiAgICAgICAgY29uc3Qgc3BhY2VycyA9IFsuLi5BcnJheShzcGFjZXJfY29scyldLm1hcCgoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCd0ZCcsICd0ZF9zcGFjZXInKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIOS4gOihjOWIhuOCkuani+eviVxuICAgICAgICBjb25zdCB0ZHMgPSBbXG4gICAgICAgICAgICAuLi5idWlsdF9yb3csXG4gICAgICAgICAgICAuLi5zcGFjZXJzLFxuICAgICAgICAgICAgY29tbW9udXRpbHNfMS5VdGlscy5jcmVhdGVFbGVtZW50KCd0ZCcsICdraW50b25lcGx1Z2luLXRhYmxlLXRkLW9wZXJhdGlvbicsIFtcbiAgICAgICAgICAgICAgICBub2RlX2J1dHRvbl9hZGQsXG4gICAgICAgICAgICAgICAgbm9kZV9idXR0b25fcmVtb3ZlXG4gICAgICAgICAgICBdKVxuICAgICAgICBdO1xuICAgICAgICB0aGlzLnJvd3NfY291bnQgPSBidWlsdF9yb3cubGVuZ3RoO1xuICAgICAgICBjb25zdCB0YWJsZV9yb3cgPSBjb21tb251dGlsc18xLlV0aWxzLmNyZWF0ZUVsZW1lbnQoJ3RyJywgJycsIHRkcyk7XG4gICAgICAgIHJldHVybiB0YWJsZV9yb3c7XG4gICAgfVxuICAgIGdldF90YWJsZV9yb3dzX2NvdW50KCkge1xuICAgICAgICBjb25zdCB0YWJsZV9pZCA9IGB0YWJsZS0ke3RoaXMudGFibGVfY29uZi5jb2RlfWA7XG4gICAgICAgIGNvbnN0IHRhYmxlX25vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0YWJsZV9pZCk7XG4gICAgICAgIGlmICh0YWJsZV9ub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGFibGVfbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndHInKS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGDmjIflrprjgZfjgZ/jg4bjg7zjg5bjg6tJRCAke3RhYmxlX2lkfSDjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIJgKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44OX44Or44OA44Km44Oz44OG44O844OW44Or44GuWytd44Oc44K/44Oz44KS55Sf5oiQ44GZ44KLXG4gICAgICogQHBhcmFtIHRhYmxlX2NvbHMg44OX44Or44OA44Km44Oz44Gu6YG45oqe6IKi44Go44GX44Gm5Lim44G544KL44OV44Kj44O844Or44OJ5LiA6KanXG4gICAgICogQHBhcmFtIGNsYXNzbmFtZV9zZWxlY3RfZWxlbWVudCDov73liqDjgZnjgovooYzjga7jg5fjg6vjg4Djgqbjg7Pjg5XjgqPjg7zjg6vjg4njgavkuI7jgYjjgovjgq/jg6njgrnlkI1cbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIC8vIHN0YXRpYyBjcmVhdGVfYnV0dG9uX3Jvd19hZGQoZmllbGRzOiB7IFtrZXk6IHN0cmluZ106IERyb3Bkb3duRGF0YSB9LCBjbGFzc25hbWVfc2VsZWN0X2VsZW1lbnQ6IHN0cmluZyk6IEhUTUxCdXR0b25FbGVtZW50IHtcbiAgICBjcmVhdGVfYnV0dG9uX3Jvd19hZGQodGFibGVfY29scykge1xuICAgICAgICBjb25zdCBub2RlX2J1dHRvbl9hZGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgbm9kZV9idXR0b25fYWRkLmNsYXNzTmFtZSA9ICdraW50b25lcGx1Z2luLWJ1dHRvbi1hZGQtcm93LWltYWdlJztcbiAgICAgICAgbm9kZV9idXR0b25fYWRkLnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgICAgICAgbm9kZV9idXR0b25fYWRkLnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnQWRkIHJvdycpO1xuICAgICAgICBub2RlX2J1dHRvbl9hZGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIOODhuODvOODluODq+OCkuS4gOihjOi/veWKoOOBmeOCi1xuICAgICAgICAgICAgY29uc29sZS5sb2coYOODhuODvOODluODq+OCkuS4gOihjOi/veWKoOOBmeOCiyR7ZXZlbnR9YCk7XG4gICAgICAgICAgICBjb25zdCBncmFuZF90ciA9IGNvbmZpZ19idWlsZGVyXzEuQ29uZmlnQnVpbGRlci5nZXRfZ3JhbmRfdHIoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIGNvbnN0IGFuY2VzdG9yX3Rib2R5ID0gZ3JhbmRfdHI/LnBhcmVudE5vZGU7XG4gICAgICAgICAgICAvLyBjb25zdCBhbmNlc3Rvcl90Ym9keSA9IHNlbGYuY2xvc2VzdCgndGJvZHknKVxuICAgICAgICAgICAgaWYgKGdyYW5kX3RyID09IG51bGwgfHwgYW5jZXN0b3JfdGJvZHkgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRocm93ICdFUlJPUjog56WW5YWI44GudGJvZHnjgpLlj5blvpfjgafjgY3jgb7jgZvjgpPjgafjgZfjgZ/jgIInO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQ/LnRhcmdldDtcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHNwYWNlcl9jb3VudCA9IGdyYW5kX3RyLmNoaWxkcmVuLmxlbmd0aCAtIDEgLSB0YWJsZV9jb2xzLmxlbmd0aDsgLy8g5YiX5pWwIC0g44OX44Op44Oe44Kk44Oc44K/44OzIC0g44OH44OV44Kp44Or44OI5YiX5pWwXG4gICAgICAgICAgICBjb25zdCByb3dzX2NvdW50ID0gdGhpcy5nZXRfdGFibGVfcm93c19jb3VudCgpICsgMTtcbiAgICAgICAgICAgIGNvbnN0IGFkZF9lbGVtID0gdGhpcy5idWlsZF90YWJsZV9yb3cocm93c19jb3VudCwgdGFibGVfY29scywgdW5kZWZpbmVkLCBzcGFjZXJfY291bnQpO1xuICAgICAgICAgICAgYW5jZXN0b3JfdGJvZHkuaW5zZXJ0QmVmb3JlKGFkZF9lbGVtLCBncmFuZF90ci5uZXh0RWxlbWVudFNpYmxpbmcpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5vZGVfYnV0dG9uX2FkZDtcbiAgICB9XG4gICAgLy8g44OX44Or44OA44Km44Oz44OG44O844OW44Or44GuWy1d44Oc44K/44Oz44KS55Sf5oiQ44GZ44KLXG4gICAgY3JlYXRlX2J1dHRvbl9yb3dfcmVtb3ZlKCkge1xuICAgICAgICBjb25zdCBub2RlX2J1dHRvbl9yZW1vdmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgbm9kZV9idXR0b25fcmVtb3ZlLmNsYXNzTmFtZSA9ICdraW50b25lcGx1Z2luLWJ1dHRvbi1yZW1vdmUtcm93LWltYWdlJztcbiAgICAgICAgbm9kZV9idXR0b25fcmVtb3ZlLnNldEF0dHJpYnV0ZSgndHlwZScsICdidXR0b24nKTtcbiAgICAgICAgbm9kZV9idXR0b25fcmVtb3ZlLnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnRGVsZXRlIHRoaXMgcm93Jyk7XG4gICAgICAgIG5vZGVfYnV0dG9uX3JlbW92ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ3JhbmRfdHIgPSBjb25maWdfYnVpbGRlcl8xLkNvbmZpZ0J1aWxkZXIuZ2V0X2dyYW5kX3RyKGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICBpZiAoZ3JhbmRfdHIucGFyZW50Tm9kZT8uY2hpbGROb2Rlcy5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyYW5kX3RyLnBhcmVudE5vZGU/LnJlbW92ZUNoaWxkKGdyYW5kX3RyKTtcbiAgICAgICAgICAgIC8vIOODhuODvOODluODq+OCkuS4gOihjOWJiumZpOOBmeOCi1xuICAgICAgICAgICAgY29uc29sZS5sb2coYOODhuODvOODluODq+OCkuS4gOihjOWJiumZpOOBmeOCiyR7ZXZlbnR9YCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbm9kZV9idXR0b25fcmVtb3ZlO1xuICAgIH1cbn1cbmV4cG9ydHMuSW5jcmVtZW50YWxUYWJsZUJ1aWxkZXIgPSBJbmNyZW1lbnRhbFRhYmxlQnVpbGRlcjtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH0pO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY29uZmlnLWJ1aWxkZXJcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbmZpZy1tYW5hZ2VyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25maWctdXRpbGl0aWVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9maWVsZC1idWlsZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbmNyZW1lbnRhbC10YWJsZS1idWlsZGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb21tb25cIiksIGV4cG9ydHMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CdXR0b25JbnN0YWxsZXIgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5yZXF1aXJlKFwiQHNoaW4tY2hhbi9reXBlc1wiKTsgLy8ga2ludG9uZSB0eXBlc1xuLy8g44Oc44K/44Oz44KS6Kit572u44GZ44KL44Op44Kk44OW44Op44Oq44CB44Kk44OZ44Oz44OI44Gvc2V0X2J1dHRvbigp44GZ44KL5YmN44Gr44Oc44K/44Oz44Gr5LuY5LiO44GX44Gm44GK44GP5YmN5o+QXG4vLyBjcmVhdGVfYnV0dG9uKCk6IOODnOOCv+ODs+ODjuODvOODieOCkuani+evieOBl+OBpuWPluW+l+OBmeOCi1xuLy8gYWRkX2J1dHRvbigpOiDlj5blvpfjgZfjgZ/jg5zjgr/jg7Pjg47jg7zjg4njgpLov73liqDjgZnjgotcbi8vIGluc3RhbGwoKTog5qC857SN44GX44Gm44GE44KL44Oc44K/44Oz44KSaG1z44Gr6Kit572u44GZ44KLXG5jbGFzcyBCdXR0b25JbnN0YWxsZXIge1xuICAgIGNsYXNzX2htc19idXR0b24gPSAnYnV0dG9uLWhtcy1pdGVtcyc7XG4gICAgYnV0dG9ucyA9IFtdOyAvLyDoqK3nva7jgZnjgovjg5zjgr/jg7PphY3liJdcbiAgICAvLyBsYWJlbGxpbmdfY29sdW1uOiBzdHJpbmcgfCB1bmRlZmluZWQgICAgLy8g5piH6aCG44O76ZmN6aCG44KS5LuY5LiO44GX44Gf44GE44Kr44Op44Og44Gu44OY44OD44OA5paH5a2X5YiXXG4gICAgLy8gZGVmaW5pdGlvbnM6IFNob3J0Y3V0RGVmaW5pdGlvbnMgICAgICAgIC8vIOOCt+ODp+ODvOODiOOCq+ODg+ODiOOBruWumue+qVxuICAgIGNhbnZhczsgLy8g44OX44Op44Kw44Kk44Oz44Kt44Oj44Oz44OQ44K5XG4gICAgY29uc3RydWN0b3IoY2xhc3NuYW1lID0gJycpIHtcbiAgICAgICAgaWYgKGNsYXNzbmFtZSAhPSAnJykge1xuICAgICAgICAgICAgdGhpcy5jbGFzc19obXNfYnV0dG9uID0gY2xhc3NuYW1lO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODnOOCv+ODs+OCkuani+evieOBmeOCi1xuICAgICAqIEBwYXJhbSBpY29uX2xhYmVsIOODnOOCv+ODs+OBruihqOiomFxuICAgICAqIEBwYXJhbSB0b29sdGlwIOODhOODvOODq+ODgeODg+ODl+ihqOekulxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgY3JlYXRlX2J1dHRvbihpY29uX2xhYmVsLCB0b29sdGlwID0gJycpIHtcbiAgICAgICAgY29uc3QgaWNvbiA9IHV0aWxzXzEuVXRpbHMuY2UoJ3NwYW4nLCAnJywgW10sIGljb25fbGFiZWwpO1xuICAgICAgICBpY29uLnN0eWxlLmNvbG9yID0gJ2RvZGdlcmJsdWUnO1xuICAgICAgICBsZXQgYnV0dG9uID0gdXRpbHNfMS5VdGlscy5jZSgnYnV0dG9uJywgdGhpcy5jbGFzc19obXNfYnV0dG9uLCBbaWNvbl0sICcnLCB7XG4gICAgICAgICAgICAndGl0bGUnOiB0b29sdGlwXG4gICAgICAgIH0pO1xuICAgICAgICBidXR0b24gPSB1dGlsc18xLlV0aWxzLmRlY29yYXRlX21lbnVfaWNvbihidXR0b24pO1xuICAgICAgICBjb25zb2xlLmxvZyhpY29uX2xhYmVsLmxlbmd0aCk7XG4gICAgICAgIGlmIChpY29uX2xhYmVsLmxlbmd0aCA+IDIpIHsgLy8gMuKDo+aWh+Wtl+OBvuOBp+OBrzI4cHjjgIHwn5CI44Gq44Gp57W15paH5a2X44GvMuaWh+Wtl+OCq+OCpuODs+ODiFxuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmZvbnRTaXplID0gJzE2cHgnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIGFkZF9idXR0b24oYnV0dG9uKSB7XG4gICAgICAgIHRoaXMuYnV0dG9ucy5wdXNoKGJ1dHRvbik7XG4gICAgfVxuICAgIGluc3RhbGwoKSB7XG4gICAgICAgIGlmICh0aGlzLmFscmVhZHlfaW5zdGFsbGVkKCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygn44Oc44K/44Oz44Gv44GZ44Gn44Gr6Kit572u5riI44G/44Gn44GZ44CCJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29uc3QgYnV0dG9ucyA9IHRoaXMuY3JlYXRlX2J1dHRvbnMoKVxuICAgICAgICBpZiAodGhpcy5idXR0b25zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ+ODnOOCv+ODs+OBjOioreWumuOBleOCjOOBpuOBhOOBvuOBm+OCk+OAguS9leOCguOBm+OBmuOBq+e1guS6huOBl+OBvuOBmeOAgicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHV0X2J1dHRvbnModGhpcy5idXR0b25zKTtcbiAgICB9XG4gICAgc2V0X2NhbnZhcyhjYW52YXMpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgfVxuICAgIGdldF9obXMoKSB7XG4gICAgICAgIGNvbnN0IGhtcyA9IGtpbnRvbmUuYXBwLmdldEhlYWRlck1lbnVTcGFjZUVsZW1lbnQoKTtcbiAgICAgICAgaWYgKGhtcyA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICfjg5zjgr/jg7PphY3nva7jgrnjg5rjg7zjgrnjgYzlj5blvpfjgafjgY3jgb7jgZvjgpPjgafjgZfjgZ/jgIInO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhtcztcbiAgICB9XG4gICAgYWxyZWFkeV9pbnN0YWxsZWQoKSB7XG4gICAgICAgIGNvbnN0IGhtc19idXR0b25zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSh0aGlzLmNsYXNzX2htc19idXR0b24pO1xuICAgICAgICBpZiAoaG1zX2J1dHRvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwdXRfYnV0dG9ucyhidXR0b25zKSB7XG4gICAgICAgIGNvbnN0IGhtcyA9IHRoaXMuY2FudmFzID09PSB1bmRlZmluZWQgPyB0aGlzLmdldF9obXMoKSA6IHRoaXMuY2FudmFzO1xuICAgICAgICBidXR0b25zLmZvckVhY2goKGJ0bikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coaG1zKTtcbiAgICAgICAgICAgIGhtcy5hcHBlbmQoYnRuKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8vIGNyZWF0ZV9zaG9ydGN1dF9idXR0b24oc2hvcnRjdXQ6IFNob3J0Y3V0KTogSFRNTEVsZW1lbnQge1xuICAgIC8vICAgICBjb25zdCBpY29uX2xhYmVsID0gc2hvcnRjdXQuaWNvblxuICAgIC8vICAgICBjb25zdCB1cmwgPSBzaG9ydGN1dC5saW5rXG4gICAgLy8gICAgIGNvbnN0IHRpcCA9IHNob3J0Y3V0LnRvb2x0aXBcbiAgICAvLyAgICAgY29uc3QgaWNvbiA9IFV0aWxzLmNlKCdzcGFuJywgJycsIFtdLCBpY29uX2xhYmVsKVxuICAgIC8vICAgICBpY29uLnN0eWxlLmNvbG9yID0gJ2RvZGdlcmJsdWUnXG4gICAgLy8gICAgIGxldCBidXR0b24gPSBVdGlscy5jZSgnYnV0dG9uJywgdGhpcy5jbGFzc19obXNfYnV0dG9uLCBbaWNvbl0sICcnLCB7XG4gICAgLy8gICAgICAgICAndGl0bGUnOiB0aXBcbiAgICAvLyAgICAgfSlcbiAgICAvLyAgICAgYnV0dG9uID0gVXRpbHMuZGVjb3JhdGVfbWVudV9pY29uKGJ1dHRvbilcbiAgICAvLyAgICAgY29uc29sZS5sb2coaWNvbl9sYWJlbC5sZW5ndGgpXG4gICAgLy8gICAgIGlmIChpY29uX2xhYmVsLmxlbmd0aCA+IDIpIHsgICAgLy8gMuKDo+aWh+Wtl+OBvuOBp+OBrzI4cHjjgIHwn5CI44Gq44Gp57W15paH5a2X44GvMuaWh+Wtl+OCq+OCpuODs+ODiFxuICAgIC8vICAgICAgICAgYnV0dG9uLnN0eWxlLmZvbnRTaXplID0gJzE2cHgnXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgaWYgKHVybCAhPSBcIlwiKSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyh7IHVybCB9KVxuICAgIC8vICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKF9ldmVudCkgPT4ge1xuICAgIC8vICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmxcbiAgICAvLyAgICAgICAgIH0pXG4gICAgLy8gICAgIH1cbiAgICAvLyAgICAgcmV0dXJuIGJ1dHRvblxuICAgIC8vIH1cbiAgICBnZXRfaGVhZGVyX2VsZW1lbnQoaW5kZXhfdGV4dCkge1xuICAgICAgICBjb25zdCBoZWFkZXJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJlY29yZGxpc3QtaGVhZGVyLWxhYmVsLWdhaWEnKTtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oaGVhZGVycykuZmlsdGVyKChoZWFkZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBoZWFkZXIudGV4dENvbnRlbnQgPT0gaW5kZXhfdGV4dDtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5CdXR0b25JbnN0YWxsZXIgPSBCdXR0b25JbnN0YWxsZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9idXR0b25faW5zdGFsbGVyXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9wbHVnaW5fY2FudmFzXCIpLCBleHBvcnRzKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QbHVnaW5DYW52YXMgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG4vLyBpbXBvcnQgJ2Jvb3RzdHJhcCdcbi8vIGltcG9ydCBcIi4uL3Njc3Mvc3R5bGUuc2Nzc1wiOyAgICAvLyBib290c3RyYXDjga7jgrnjgr/jgqTjg6tcbnJlcXVpcmUoXCJAc2hpbi1jaGFuL2t5cGVzXCIpOyAvLyBraW50b25lIHR5cGVzXG5jbGFzcyBQbHVnaW5DYW52YXMge1xuICAgIHN0YXRpYyBDTEFTU19ESVNNSVNTID0gJ29mZmNhbnZhcy1kaXNtaXNzJztcbiAgICBpZF9pc2xhbmQ7XG4gICAgaWRfb2ZmY2FudmFzO1xuICAgIHRpdGxlX29mZmNhbnZhcztcbiAgICBpc2xhbmQ7IC8vIOODnuOCpuOCueODm+ODkOODvOOBp+ODl+ODqeOCsOOCpOODs+OCouOCpOOCs+ODs+OCkuihqOekuuOBmeOCi+WztuODjuODvOODiVxuICAgIGVuYWJsZV9vZmZjYW52YXM7XG4gICAgY29uc3RydWN0b3IodGl0bGUsIGlkX2lzbGFuZCwgZGVmYXVsdF9lbGVtZW50ID0gbnVsbCwgaWNvbl9lbGVtZW50ID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMudGl0bGVfb2ZmY2FudmFzID0gdGl0bGU7XG4gICAgICAgIHRoaXMuaWRfaXNsYW5kID0gYHBsdWdpbl9pc2xhbmRfaWRfJHtpZF9pc2xhbmR9YDtcbiAgICAgICAgdGhpcy5pZF9vZmZjYW52YXMgPSBgb2ZmY2FudmFzXyR7dGhpcy5pZF9pc2xhbmR9YDtcbiAgICAgICAgLy8g5Yid5pyf5YyW44G+44Gf44Gv44Kq44OV44Kt44Oj44Oz44OQ44K544KS5L2/44KP44Gq44GEXG4gICAgICAgIGlmIChpZF9pc2xhbmQgPT0gXCJcIikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFske3RoaXMuY29uc3RydWN0b3IubmFtZX1dIOOCquODleOCreODo+ODs+ODkOOCueOCkuS9v+OBhOOBvuOBm+OCk+OAgmApO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRfZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdF9lbGVtZW50ID0ga2ludG9uZS5hcHAuZ2V0SGVhZGVyTWVudVNwYWNlRWxlbWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlZmF1bHRfZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdraW50b25lLmFwcC5IZWFkZXJNZW51U3BhY2VFbGVtZW50KCkg44KS5Y+W5b6X44Gn44GN44G+44Gb44KT44Gn44GX44Gf44CCJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmlzbGFuZCA9IGRlZmF1bHRfZWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlX29mZmNhbnZhcyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIOOCquODleOCreODo+ODs+ODkOOCueOCkuS9v+eUqOOBmeOCi1xuICAgICAgICB0aGlzLmVuYWJsZV9vZmZjYW52YXMgPSB0cnVlO1xuICAgICAgICBjb25zdCBhbHJlYWR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5pZF9pc2xhbmQpO1xuICAgICAgICBpZiAoYWxyZWFkeSkgeyAvLyDlkIzjgZhJROOBp+aXouWtmOOBruWztuOBjOOBguOCjOOBsOOBneOCjOOCkuS9v+OBhlxuICAgICAgICAgICAgY29uc29sZS5sb2coYFske3RoaXMuY29uc3RydWN0b3IubmFtZX1dIOaXouWtmOOBruOCquODleOCreODo+ODs+ODkOOCueOCkuS9v+eUqOOBl+OBvuOBmeOAgmApO1xuICAgICAgICAgICAgdGhpcy5pc2xhbmQgPSBhbHJlYWR5O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFske3RoaXMuY29uc3RydWN0b3IubmFtZX1dIOOCquODleOCreODo+ODs+ODkOOCueOCkklEWyR7dGhpcy5pZF9pc2xhbmR9XeOBp+S9nOaIkOOBl+OBvuOBmeOAgmApO1xuICAgICAgICAgICAgLy8g44Kq44OV44Kt44Oj44Oz44OQ44K544Gu44Ki44Kk44Kz44OzXG4gICAgICAgICAgICBjb25zdCBpY29uX2JhbGxvb24gPSAoKGljb24pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaWNvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWNvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiB1dC5jZSgnaScsICdmYS1zb2xpZCBmYS1jb21tZW50LWRvdHMgcHMtMicpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJhbG9vbiA9IHV0aWxzXzEuVXRpbHMuY2UoJ3NwYW4nLCAnJywgW10sICfwn46IJyk7XG4gICAgICAgICAgICAgICAgICAgIGJhbG9vbi5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYWxvb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkoaWNvbl9lbGVtZW50KTtcbiAgICAgICAgICAgIGljb25fYmFsbG9vbi5zdHlsZS5jb2xvciA9ICdkb2RnZXJibHVlJztcbiAgICAgICAgICAgIGxldCBpc2xhbmQgPSB1dGlsc18xLlV0aWxzLmNlKCdkaXYnLCAnYmJrLXRvb2wtaWNvbi1ib3gnLCBbaWNvbl9iYWxsb29uXSwgJycsIHtcbiAgICAgICAgICAgICAgICAnaWQnOiB0aGlzLmlkX2lzbGFuZCxcbiAgICAgICAgICAgICAgICAnZGF0YS1icy10b2dnbGUnOiAnb2ZmY2FudmFzJyxcbiAgICAgICAgICAgICAgICAnYXJpYS1jb250cm9scyc6IHRoaXMuaWRfb2ZmY2FudmFzLFxuICAgICAgICAgICAgICAgICdkYXRhLWJzLXRhcmdldCc6IGAjJHt0aGlzLmlkX29mZmNhbnZhc31gXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlzbGFuZCA9IHV0aWxzXzEuVXRpbHMuZGVjb3JhdGVfbWVudV9pY29uKGlzbGFuZCk7XG4gICAgICAgICAgICB0aGlzLmlzbGFuZCA9IGlzbGFuZDtcbiAgICAgICAgICAgIHRoaXMuaW5pdF9vZmZjYW52YXMoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbml0X29mZmNhbnZhcygpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyU3BhY2UgPSBraW50b25lLmFwcC5nZXRIZWFkZXJNZW51U3BhY2VFbGVtZW50KCk7XG4gICAgICAgIGlmIChoZWFkZXJTcGFjZSkge1xuICAgICAgICAgICAgaGVhZGVyU3BhY2UuYXBwZW5kQ2hpbGQodGhpcy5nZXRfbm9kZSgpKTtcbiAgICAgICAgICAgIGhlYWRlclNwYWNlLmFwcGVuZENoaWxkKHRoaXMuYnVpbGRfbm9kZV9vZmZjYW52YXMoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0X25vZGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzbGFuZDtcbiAgICB9XG4gICAgYnVpbGRfbm9kZV9vZmZjYW52YXMoKSB7XG4gICAgICAgIHJldHVybiB1dGlsc18xLlV0aWxzLmNlKCdkaXYnLCAnb2ZmY2FudmFzIG9mZmNhbnZhcy1zdGFydCcsIFtcbiAgICAgICAgICAgIHV0aWxzXzEuVXRpbHMuY2UoJ2RpdicsICdvZmZjYW52YXMtaGVhZGVyJywgW1xuICAgICAgICAgICAgICAgIHV0aWxzXzEuVXRpbHMuY2UoJ2g1JywgJ29mZmNhbnZhcy10aXRsZScsIFtdLCB0aGlzLnRpdGxlX29mZmNhbnZhcywge1xuICAgICAgICAgICAgICAgICAgICAnaWQnOiBgJHt0aGlzLmlkX29mZmNhbnZhc31MYWJlbGBcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICB1dGlsc18xLlV0aWxzLmNlKCdidXR0b24nLCAnYnRuLWNsb3NlIHRleHQtcmVzZXQnLCBbXSwgJycsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2RhdGEtYnMtZGlzbWlzcyc6ICdvZmZjYW52YXMnLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1sYWJlbCc6ICdDbG9zZSdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICB1dGlsc18xLlV0aWxzLmNlKCdkaXYnLCAnb2ZmY2FudmFzLWJvZHknLCBbXG4gICAgICAgICAgICAgICAgdXRpbHNfMS5VdGlscy5jZSgnZGl2JywgJ21iLTQnLCBbXSwgJ+OBk+OBk+OBi+OCieWQhOeoruODl+ODqeOCsOOCpOODs+OCkuWRvOOBs+WHuuOBm+OBvuOBmeOAgicpXG4gICAgICAgICAgICBdLCAnJywge1xuICAgICAgICAgICAgICAgICdpZCc6IGAke3RoaXMuaWRfb2ZmY2FudmFzfS1ib2R5YFxuICAgICAgICAgICAgfSlcbiAgICAgICAgXSwgJycsIHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMScsXG4gICAgICAgICAgICAnaWQnOiBgJHt0aGlzLmlkX29mZmNhbnZhc31gLFxuICAgICAgICAgICAgJ2FyaWEtbGFiZWxsZWRieSc6IGAke3RoaXMuaWRfb2ZmY2FudmFzfUxhYmVsYCxcbiAgICAgICAgICAgICdkYXRhLWJzLWJhY2tkcm9wJzogJ2ZhbHNlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXBwZW5kKG5vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlX29mZmNhbnZhcykge1xuICAgICAgICAgICAgY29uc3Qgb2ZmY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYCR7dGhpcy5pZF9vZmZjYW52YXN9LWJvZHlgKTtcbiAgICAgICAgICAgIC8vIG5vZGUuc2V0QXR0cmlidXRlKCdkYXRhLWJzLWRpc21pc3MnLCBcIm9mZmNhbnZhc1wiKVxuICAgICAgICAgICAgdGhpcy5kZWFsX2Rpc21pc3NfYXR0cmlidXRlKG5vZGUpO1xuICAgICAgICAgICAgb2ZmY2FudmFzPy5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNsYW5kLmFwcGVuZChub2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWFsX2Rpc21pc3NfYXR0cmlidXRlKG5vZGUpIHtcbiAgICAgICAgY29uc3QgZGlzbWlzc0VsZW1lbnRzID0gQXJyYXkuZnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke1BsdWdpbkNhbnZhcy5DTEFTU19ESVNNSVNTfWApKTtcbiAgICAgICAgY29uc29sZS5sb2coZGlzbWlzc0VsZW1lbnRzKTtcbiAgICAgICAgaWYgKGRpc21pc3NFbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBkaXNtaXNzRWxlbWVudHMubWFwKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtYnMtZGlzbWlzcycsIFwib2ZmY2FudmFzXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnZGF0YS1icy1kaXNtaXNzJywgXCJvZmZjYW52YXNcIik7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLlBsdWdpbkNhbnZhcyA9IFBsdWdpbkNhbnZhcztcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5VdGlscyA9IHZvaWQgMDtcbmNsYXNzIFV0aWxzIHtcbiAgICAvKipcbiAgICAgKiDph43opIfnpoHmraLjg5XjgqPjg7zjg6vjg4njgaDjgZHjgpLjg5Tjg4Pjgq/jgqLjg4Pjg5fjgZnjgotcbiAgICAgKiBAcGFyYW0gcHJvcGVydGllcyBmaWVsZHMuanNvbuOBruODrOOCueODneODs+OCueOBrnByb3BlcnRpZXNcbiAgICAgKiBAcGFyYW0gd2l0aF9yZWNvcmRfbnVtYmVyIFJFQ09SRF9OVU1CRVLjg5XjgqPjg7zjg6vjg4njgpLov5TjgZnjg5Xjg6njgrBcbiAgICAgKi9cbiAgICBzdGF0aWMgdW5pcXVlX3Byb3BlcnRpZXMocHJvcHMsIHdpdGhfcmVjb3JkX251bWJlciA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZGNvZGUgb2YgT2JqZWN0LmtleXMocHJvcHMpKSB7XG4gICAgICAgICAgICBjb25zdCBwcm9wID0gcHJvcHNbZmllbGRjb2RlXTtcbiAgICAgICAgICAgIGlmIChwcm9wLnVuaXF1ZSA9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHByb3ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAod2l0aF9yZWNvcmRfbnVtYmVyICYmIHByb3BbJ3R5cGUnXSA9PSAnUkVDT1JEX05VTUJFUicpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgfVxuICAgIC8vIOepuuaWh+Wtl+WIl+OBp+OBr+OBquOBhOOBk+OBqOOCkuODgeOCp+ODg+OCr+OBmeOCi1xuICAgIHN0YXRpYyBpc19ub3RfZW1wdHlfc3RyaW5nKHRlc3Rfc3RyKSB7XG4gICAgICAgIHJldHVybiAhVXRpbHMuaXNfZW1wdHlfc3RyaW5nKHRlc3Rfc3RyKTtcbiAgICB9XG4gICAgLy8g56m65paH5a2X5YiX44Gn44GC44KL44GT44Go44KS44OB44Kn44OD44Kv44GZ44KLXG4gICAgc3RhdGljIGlzX2VtcHR5X3N0cmluZyh0ZXN0X3N0cikge1xuICAgICAgICBpZiAodGVzdF9zdHIgPT0gbnVsbCB8fCB0ZXN0X3N0ciA9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXN0X3N0ci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIOioreWumuWApOOBvuOBn+OBr+ODh+ODleOCqeODq+ODiOWApOOCkuWPluW+l1xuICAgIHN0YXRpYyBnZXRfZnJvbSA9IChkaWMsIGNvbmZfa2V5LCBkZWZhdWx0cykgPT4ge1xuICAgICAgICBpZiAoZGljLmhhc093blByb3BlcnR5KGNvbmZfa2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGRpY1tjb25mX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH07XG4gICAgc3RhdGljIGJ1aWxkRWxlbWVudCA9IChwYXJhbXMpID0+IHtcbiAgICAgICAgY29uc3QgdGFnID0gcGFyYW1zWyd0YWdOYW1lJ107XG4gICAgICAgIGNvbnN0IGNsID0gcGFyYW1zWydjbGFzc05hbWUnXSA/IHBhcmFtc1snY2xhc3NOYW1lJ10gOiBcIlwiO1xuICAgICAgICBjb25zdCBjZSA9IHBhcmFtc1snY2hpbGRFbGVtZW50cyddID8gcGFyYW1zWydjaGlsZEVsZW1lbnRzJ10gOiBbXTtcbiAgICAgICAgY29uc3QgdGMgPSBwYXJhbXNbJ3RleHRDb250ZW50J10gPyBwYXJhbXNbJ3RleHRDb250ZW50J10gOiBcIlwiO1xuICAgICAgICBjb25zdCBhdCA9IHBhcmFtc1snYXR0cnMnXSA/IHBhcmFtc1snYXR0cnMnXSA6IHt9O1xuICAgICAgICByZXR1cm4gVXRpbHMuY3JlYXRlRWxlbWVudCh0YWcsIGNsLCBjZSwgdGMsIGF0KTtcbiAgICB9O1xuICAgIC8vIOODjuODvOODieOCkuani+evieOBl+OBpui/lOOBmVxuICAgIHN0YXRpYyBjcmVhdGVFbGVtZW50ID0gKHRhZ05hbWUsIGNsYXNzTmFtZSA9IFwiXCIsIGNoaWxkRWxlbWVudHMgPSBbXSwgdGV4dENvbnRlbnQgPSBcIlwiLCBhdHRycyA9IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgICAgIGVsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICAgICAgZWwudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcbiAgICAgICAgaWYgKGNoaWxkRWxlbWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2hpbGRFbGVtZW50cy5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGVsLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIOWxnuaAp+WApOOCkuOCu+ODg+ODiFxuICAgICAgICBpZiAoYXR0cnMpIHtcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKGF0dHJzKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWw7XG4gICAgfTtcbiAgICAvLyBzaG90Y3V0IGZvciBjcmVhdGVFbGVtZW50XG4gICAgc3RhdGljIGNlID0gKHQsIGMgPSBcIlwiLCBjZSA9IFtdLCB0YyA9IFwiXCIsIGF0ID0gdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVsZW1lbnQodCwgYywgY2UsIHRjLCBhdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBraW50b25l44Gu44Oh44OL44Ol44O844Ki44Kk44Kz44Oz6aKo44Gr44K544K/44Kk44Or44KS5LuY5LiO44GZ44KLXG4gICAgICogQHBhcmFtIGVsIOijhemjvuWvvuixoeOBruODjuODvOODiVxuICAgICAqL1xuICAgIHN0YXRpYyBkZWNvcmF0ZV9tZW51X2ljb24oZWwpIHtcbiAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gJzQ4cHgnO1xuICAgICAgICBlbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnI2Y3ZjlmYSc7XG4gICAgICAgIGVsLnN0eWxlLmZvbnRTaXplID0gJzI4cHgnO1xuICAgICAgICBlbC5zdHlsZS5ib3JkZXIgPSAnMXB4IHNvbGlkICNlM2U3ZTgnO1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZSc7XG4gICAgICAgIGVsLnN0eWxlLm1hcmdpbkxlZnQgPSAnMnB4JztcbiAgICAgICAgZWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnMnB4JztcbiAgICAgICAgZWwuc3R5bGUudmVydGljYWxBbGlnbiA9ICdtaWRkbGUnO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODhuOCreOCueODiOOBoOOBkeOCkuaMgeOBo+OBn0RJVuimgee0oOOCkuani+evieOBl+OBpui/lOOBmVxuICAgICAqIEBwYXJhbSBtc2cgaW5uZXJUZXh0XG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBzdGF0aWMgc2ltcGxlRGl2ID0gKG1zZykgPT4ge1xuICAgICAgICByZXR1cm4gVXRpbHMuY3JlYXRlRWxlbWVudCgnZGl2JywgJycsIFtdLCBtc2cpO1xuICAgIH07XG4gICAgLy8g6YWN5YiX44Gu44GG44Gh44CB6YeN6KSH44GX44Gf44KC44Gu44GM44GC44KM44GwVHJ1ZeOCkui/lOOBmVxuICAgIHN0YXRpYyBpc19vdmVybGFwcGVkID0gKGxpc3QpID0+IHtcbiAgICAgICAgY29uc3Qgb3ZlcmxhcHBlZCA9IFV0aWxzLm92ZXJsYXBwZWQobGlzdCk7XG4gICAgICAgIGlmIChvdmVybGFwcGVkLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8vIOmFjeWIl+OBruOBhuOBoeOAgemHjeikh+OBl+OBn+OCguOBruOCklVuaXHjgZfjgabov5TjgZlcbiAgICBzdGF0aWMgb3ZlcmxhcHBlZCA9IChsaXN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG92ZXJsYXBwZWQgPSBsaXN0LmZpbHRlcigoeCwgX2ksIHNlbGYpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLmluZGV4T2YoeCkgIT09IHNlbGYubGFzdEluZGV4T2YoeCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KG92ZXJsYXBwZWQpKTtcbiAgICB9O1xuICAgIC8vIOePvuWcqOmWi+OBhOOBpuOBhOOCi2tpbnRvbmXjg4njg6HjgqTjg7Pjga7jgYbjgaHmjIflrprjgZfjgZ/nlarlj7fjga7jgqLjg5fjg6rjga5VUkzjgpLmp4vnr4njgZfjgabov5TjgZlcbiAgICBzdGF0aWMgZ2V0X2FwcGxpY2F0aW9uX3VybChhcHBpZCkge1xuICAgICAgICByZXR1cm4gYCR7bG9jYXRpb24ucHJvdG9jb2x9Ly8ke2xvY2F0aW9uLmhvc3R9L2svJHthcHBpZH1gO1xuICAgIH1cbiAgICAvLyBraW50b25lIGNsaWVudOOBruOCqOODqeODvOOCkuWPl+OBkeWPluOBo+OBpuODoeODg+OCu+ODvOOCuOOCkuaKveWHuuOBl+OAgeaWh+Wtl+WIl+mFjeWIl+OBruW9ouOBp+i/lOOBmVxuICAgIHN0YXRpYyByZXRyaWV2ZV9lcnJvcnMoZXJyb3IsIG1heF9tc2dzID0gLTEpIHtcbiAgICAgICAgY29uc3QgZXJyb3JzID0gZXJyb3I/LmVycm9yPy5lcnJvcnM7XG4gICAgICAgIGlmIChlcnJvcnMgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIOODoeODg+OCu+ODvOOCuOOBruani+eviVxuICAgICAgICBsZXQgd2hvbGVfZXJyb3JzID0gW107XG4gICAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1zZ3MgPSBlcnJvcnNbZmllbGRdLm1lc3NhZ2VzO1xuICAgICAgICAgICAgY29uc3QgY29tbWVudHMgPSBtc2dzLm1hcCgobXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBbJHtmaWVsZH1dICR7bXNnfWA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdob2xlX2Vycm9ycyA9IHdob2xlX2Vycm9ycy5jb25jYXQoY29tbWVudHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8g44K944O844OIXG4gICAgICAgIHdob2xlX2Vycm9ycy5zb3J0KCk7XG4gICAgICAgIC8vIOOCqOODqeODvOODrOOCs+ODvOODieOBruS7tuaVsOOBjOWkmuOBhOWgtOWQiOOBq+ecgeeVpVxuICAgICAgICBpZiAobWF4X21zZ3MgPj0gMCAmJiBtYXhfbXNncyA8IHdob2xlX2Vycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbWFpbl9tc2dzID0gd2hvbGVfZXJyb3JzLmxlbmd0aCAtIG1heF9tc2dzO1xuICAgICAgICAgICAgd2hvbGVfZXJyb3JzID0gd2hvbGVfZXJyb3JzLnNwbGljZSgwLCBtYXhfbXNncyk7XG4gICAgICAgICAgICB3aG9sZV9lcnJvcnMucHVzaChg5Lul5LiLJHtyZW1haW5fbXNnc33ku7bjga7jgqjjg6njg7zjg6Hjg4Pjgrvjg7zjgrjjgpLnnIHnlaXjgZfjgb7jgZfjgZ/jgIJgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gd2hvbGVfZXJyb3JzO1xuICAgIH1cbn1cbmV4cG9ydHMuVXRpbHMgPSBVdGlscztcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBDb25maWdNYW5hZ2VyIH0gZnJvbSBcInBsdWdpbi1wYXJhbWV0ZXJzLWhlbHBlclwiO1xuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi9zZXR0aW5nc1wiO1xuXG4oZnVuY3Rpb24gKFBMVUdJTl9JRCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBjb25zb2xlLmluZm8oJ3J1biBjb25maWcgbWFpbicpXG5cblxuICAgIGlmIChQTFVHSU5fSUQgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUExVR0lOX0lEID09IHVuZGVmaW5lZCDjgaflkbzjgbPlh7rjgZXjgozjgb7jgZfjgZ/jgIInKVxuICAgIH1cblxuICAgIGNvbnN0IHNldHRpbmdfcHJlZnMgPSBTZXR0aW5ncy5wcmVmZXJlbmNlXG4gICAgY29uc3Qgc2V0dGluZ19pbnB1dCA9IFNldHRpbmdzLmlucHV0XG4gICAgY29uc3QgbWFuYWdlciA9IG5ldyBDb25maWdNYW5hZ2VyKFBMVUdJTl9JRCwgc2V0dGluZ19pbnB1dCwgc2V0dGluZ19wcmVmcylcbiAgICBtYW5hZ2VyLmJ1aWxkKClcblxufSkoa2ludG9uZS4kUExVR0lOX0lEKTtcblxuIl0sIm5hbWVzIjpbIlNldHRpbmdzIiwiRmllbGRUeXBlIiwiQ09OU1RBTlRTIiwiUExVR0lOX05BTUUiLCJFTVBUWV9MQUJFTCIsIkFQSV9LRVkiLCJNT0RFTF9JRCIsIlNUQVRJQ19QUk9NUFQiLCJVTklRVUVfUFJPTVBUIiwiSU5QVVRfRklFTEQiLCJPVVRQVVRfRklFTEQiLCJCVE5fU1BBQ0VfRklFTEQiLCJGTEFHX1JFQ09SRF9NT0RJRklFUiIsIkxBQkVMU19SRUNPUkRfTU9ESUZJRVIiLCJOVU1CRVJfTUFYX1RPS0VOUyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNTZWNyZXRJdGVtIiwiaXRlbSIsIkNvbmZpZ0J1aWxkZXIiLCJyZXF1aXJlIiwiY29tbW9udXRpbHNfMSIsImNvbmZpZ191dGlsaXRpZXNfMSIsImNvbW1vbl8xIiwiZmllbGRfYnVpbGRlcl8xIiwiaW5jcmVtZW50YWxfdGFibGVfYnVpbGRlcl8xIiwiY29uc3RydWN0b3IiLCJwcm9wcyIsImNvbmZpZyIsInVuZGVmaW5lZCIsInRoaXMiLCJmaWVsZF9idWlsZGVyIiwiRmllbGRCdWlsZGVyIiwic3RhdGljIiwidHlwZSIsIkxBWU9VVF9QQVJUUyIsImluY2x1ZGVzIiwidHlwZXMiLCJyZWR1Y2UiLCJwcmV2IiwiY3VyciIsImlzX2xheW91dF9pbmZvIiwiYnVpbGRfaW5jcmVtZW50YWxfdGFibGUiLCJpbnB1dF9maWVsZCIsInNhdmVkX3Jvd3MiLCJjb25zb2xlIiwibG9nIiwidGFibGVfcm93cyIsIkluY3JlbWVudGFsVGFibGVCdWlsZGVyIiwiYnVpbGQiLCJlbGVtZW50c190aCIsInRhYmxlX2NvbHMiLCJtYXAiLCJjb2x1bW4iLCJlbF9zcGFuIiwiVXRpbHMiLCJjcmVhdGVFbGVtZW50IiwidGV4dENvbnRlbnQiLCJoZWFkZXIiLCJwdXNoIiwidHIiLCJ0aGVhZCIsInRib2R5IiwiY29kZSIsInRhcmdldCIsInNlbGYiLCJwYXJlbnRfdGQiLCJwYXJlbnROb2RlIiwiYWNjZXB0X3R5cGVzIiwibGlzdHMiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3AiLCJsYWJlbCIsInNvcnRlZCIsImtleXMiLCJrIiwic29ydCIsImEiLCJiIiwidG9TdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImFzc2lnbiIsInNlbGVjdF9zZXQiLCJzZWxlY3QiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJvcHRpb24iLCJnZXRBdHRyaWJ1dGUiLCJhbmNlc3RvciIsImNsb3Nlc3QiLCJpbnB1dHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFjY2VwdHMiLCJzZWxlY3RlZF9maWVsZGNvZGUiLCJzZWxlY3RlZF9ub2RlX2lkIiwiZW1wdHlfbGFiZWwiLCJwYXJ0cyIsImdldF9mb3JtcGFydHMiLCJmaWVsZF9kcm9wZG93biIsImlkIiwiZW1wdHlfaXRlbSIsImFwcGVuZENoaWxkIiwic2V0QXR0cmlidXRlIiwiYXBwX2lkIiwic2VsZWN0ZWRfbGFiZWwiLCJDb25maWdVdGlsaXRpZXMiLCJERUZBVUxUX09QVElPTiIsImVtcHR5X2Ryb3Bkb3duIiwicmVzcF9maWVsZHMiLCJraW50b25lIiwiYXBpIiwiYXBwIiwicGFyc2VJbnQiLCJidWlsZF9maWVsZHNfZHJvcGRvd24iLCJwcm9wZXJ0aWVzIiwibWFpbl9ub2RlIiwidGl0bGUiLCJjb21tZW50IiwiYmxvY2tfY2xhc3MiLCJmbGdfcmVxdWlyZWQiLCJmbGdfc2VjcmV0IiwiY29tbWVudF9ub2RlIiwiYnVpbGRFbGVtZW50IiwidGFnTmFtZSIsImNsYXNzTmFtZSIsImNhcHRpb25fbm9kZSIsImJhZGdlIiwiY2hpbGRFbGVtZW50cyIsInBhcmVudF9kcm9wZG93biIsInBhcmVudF9maWVsZGNvZGUiLCJhcHBpZCIsInRoZW4iLCJzaW5nbGVfbGluZV9pdGVtcyIsImZpbHRlciIsImZpZWxkIiwiZGRfaXRlbSIsInRkX2ZpZWxkY29kZSIsIm1ha2VfZmllbGRjb2RlX2NlbGwiLCJmaXJzdENoaWxkIiwicmVtb3ZlIiwiZmllbGRjb2RlIiwibm9kZV9pbnB1dCIsIm5vZGVfZHJvcGRvd24iLCJub2RlX3JhZGlvIiwiZXZlbnRfdHlwZSIsImNhbGxiYWNrX29iamVjdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiaW5wdXQiLCJtYWtlX3N0cmluZ19ibG9jayIsIkVycm9yIiwic2F2ZWRfdmFsdWUiLCJnZXRfc2F2ZWRfdmFsdWUiLCJlbF9zdHIiLCJjZSIsInJlcXVpcmVkIiwic2VjcmV0IiwibWFrZV9wYXJ0c19ibG9jayIsImRlc2MiLCJ3aG9sZV9jb25maWciLCJwcm94eV9jb25maWciLCJwbHVnaW4iLCJnZXRQcm94eUNvbmZpZyIsIlVSTCIsIm1ldGhvZCIsImRhdGEiLCJoZWFkZXJfdmFsdWUiLCJoZWFkZXJzIiwic3RhcnRzV2l0aCIsInNwbGl0IiwiZGVmYXVsdCIsIm1ha2VfbXVsdGlsaW5lX2Jsb2NrIiwibWFrZV9jaGVja2JveF9ibG9jayIsImFjY2VwdCIsImxpc3RfY2hlY2tib3giLCJib3hfdmFsdWUiLCJjaGVja2JveF9pZCIsImF0dHJfY2hlY2tib3giLCJtYWtlX3JhZGlvX2Jsb2NrIiwic2F2ZWRfc3RyaW5nIiwiZWxfb3B0aW9ucyIsIm5hbWUiLCJlbF9yYWRpbyIsImVsX2xhYmVsIiwibWFrZV9kcm9wZG93bl9maWVsZHNlbGVjdF9ibG9jayIsImZvcm1fdHlwZXMiLCJsYXlvdXRfdHlwZXMiLCJsZW5ndGgiLCJsYXlvdXQiLCJtYWtlX2luY3JlbWVudGFsX3RhYmxlX2Jsb2NrIiwiZWxfdGFibGUiLCJtYWtlX3N1YnRpdGxlX2Jsb2NrIiwiaGVhZGluZyIsImFzeW5jIiwiZ2V0SWQiLCJsYXlvdXRfaW5mb3MiLCJzcGFjZXJzIiwicm93X3ByZXYiLCJyb3dfY3VyciIsInJvd19zcGFjZXJzIiwiZmllbGRzIiwicm93X2ZpZWxkIiwiY29uY2F0IiwiZWxlbWVudElkIiwiQ29uZmlnTWFuYWdlciIsImNvbmZpZ19idWlsZGVyXzEiLCJQTFVHSU5fSUQiLCJzZXR0aW5nX2lucHV0Iiwic2V0dGluZ3NfcHJlZmVyZW5jZSIsIkNPTkYiLCJnZXRDb25maWciLCJzZXRfY29uZmlnIiwic2V0X3ByZWZlcmVuY2UiLCJwcmVmcyIsIm5vZGVfdGl0bGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwibm9kZV9kZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uIiwibm9kZV9zZXR0aW5ncyIsIm1ha2Vfc2V0dGluZ19maWVsZHMiLCJyZXNwIiwiYnRuX3N1Ym1pdCIsIm1ha2VfYnV0dG9uX3N1Ym1pdCIsImJ0bl9jYW5jZWwiLCJtYWtlX2J1dHRvbl9jYW5jZWwiLCJmb3JtX25vZGUiLCJub2RlIiwidG9wIiwiYnV0dG9ucyIsIl9yZXNwIiwiY2FsbF90YXJnZXRfZXZlbnQiLCJjYXRjaCIsImVyciIsImV2ZW50X25hbWUiLCJmdW5jcyIsImhvb2tzIiwiZnVuYyIsImluZm8iLCJsYXlvdXRfaW5wdXRzIiwiYnVpbGRlciIsIm1ha2VfcGFyYWdyYXBoIiwiVGV4dCIsIk11bHRpbGluZVRleHQiLCJSYWRpbyIsIk51bWJlciIsIkNoZWNrYm94IiwiSW5jcmVtZW50YWxUYWJsZSIsIkxhYmVsIiwiU2VwYXJhdG9yIiwiRHJvcGRvd25fRmllbGRTZWxlY3QiLCJzZXJpYWxpemVkIiwiZ2V0X2Zyb20iLCJLRVlfQ09ORklHIiwiSlNPTiIsInBhcnNlIiwiZ2V0X2NvbmZpZyIsImxvYWRfbGF5b3V0X2luZm8iLCJzZWNyZXRfcGFyYW1ldGVycyIsImNvbmZpZ190aW5rZXIiLCJzZWNyZXRzIiwibWFrZV9wcm94eV9wYXJhbXMiLCJpdGVtcyIsInJlc3VsdF9wYXJhbXMiLCJwYXJhbXMiLCJnZXRfdGV4dF9hbmRfdmFsaWRhdGVfdmFsdWUiLCJnZXRfdGV4dF92YWx1ZSIsInBhcmFtIiwic3RvcmVfcGFyYW1ldGVycyIsInN0b3JlIiwiZ2V0X3NlbGVjdGVkIiwibXNnIiwiZXJyb3IiLCJpc0NvbXBvc2luZyIsInByZXZlbnREZWZhdWx0IiwidGhpc19mb3JtIiwiYWxlcnQiLCJwcm94eV9wYXJhbXMiLCJyZXN1bHQiLCJzZXRQcm94eUNvbmZpZyIsInNldFRpbWVvdXQiLCJzdHJpbmdpZnkiLCJzZXRDb25maWciLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJhZGRfaG9vayIsImNvbmZpZ19mb3JtIiwid2hvbGVfc2VsZWN0ZWRfZmllbGRfY29kZXMiLCJzZWxlY3Rfbm9kZV9pZCIsIm9wdGlvbnMiLCJzZWxlY3RlZE9wdGlvbnMiLCJ0YXJnZXRfYm94ZXMiLCJjaGVja2VkX2xhYmVscyIsIkFycmF5IiwiZnJvbSIsImNoZWNrZWQiLCJpc19vdmVybGFwcGVkIiwiYWRkaXRpb25hbF9sYWJlbHMiLCJvdmVybGFwcGVkIiwiY2xlYXJfc2VsZWN0ZWRfZmllbGRfbGFiZWxzIiwiZ2V0X3NlbGVjdGVkX3JhZGlvIiwicmFkaW9faWQiLCJyYWRpb19uYW1lIiwibm9kZXMiLCJnZXRFbGVtZW50c0J5TmFtZSIsImlkeCIsImZpZWxkX2lkIiwiZ2V0X211bHRpbGluZXRleHRfdmFsdWUiLCJnZXRfbnVtYmVyX3ZhbHVlIiwiZ2V0X2luY3JlbWVudGFsX3RhYmxlX3ZhbHVlcyIsIm5vZGVfdGFibGUiLCJhYnN0cnVjdF9mcm9tX2luY3JlbWVudGFsX3RhYmxlIiwicm93cyIsInJvdyIsIm5vZGVOYW1lIiwidGV4dHMiLCJjZWxscyIsImNlbGwiLCJpbm5lclRleHQiLCJ2YWx1ZXMiLCJpbnB1dF9lbGVtZW50IiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInNlbGVjdGVkX2VsZW1lbnQiLCJjaGVja2JveF9lbGVtZW50IiwiaW5kZXgiLCJhdHRyaWJ1dGVzIiwiY2hlY2tib3hfaXRlbXMiLCJjaGlsZE5vZGVzIiwiZmlsdGVyZWQiLCJ0YWJsZV92YWx1ZXMiLCJub2RlX2lkIiwiZmllbGRfdHlwZSIsIkRyb3Bkb3duIiwiZ2V0X3NlbGVjdGVkX2xhYmVsIiwiZ2V0X2NoZWNrZWRfYm94ZXMiLCJnZXRfc2VsZWN0ZWRfZmllbGRjb2RlIiwicHJlc2V0IiwidGFibGVfaWQiLCJyb3dfY291bnQiLCJub2RlX2NoZWNrYm94Iiwic2hvd19mYyIsImZvb3Rub3RlIiwiYnVpbGRfdGFibGVfY2VsbCIsImJ1aWxkX2NoZWNrYm94X2NlbGwiLCJidWlsZF9kcm9wZG93bl9jZWxsIiwiYnVpbGRfZHJvcGRvd25fZmllbGRzZWxlY3RfY2VsbCIsImJ1aWxkX3RleHRjZWxsIiwidGFibGVfY29uZiIsInJvd3NfY291bnQiLCJzcGFjZXJfY291bnQiLCJidWlsZF90YWJsZV9yb3ciLCJvcHQiLCJyb3dfbnVtYmVyIiwic2F2ZWRfZGF0YSIsInNwYWNlcl9jb2xzIiwiYnVpbHRfcm93Iiwibm9kZV9idXR0b25fYWRkIiwiY3JlYXRlX2J1dHRvbl9yb3dfYWRkIiwibm9kZV9idXR0b25fcmVtb3ZlIiwiY3JlYXRlX2J1dHRvbl9yb3dfcmVtb3ZlIiwidGRzIiwiZ2V0X3RhYmxlX3Jvd3NfY291bnQiLCJ0YWJsZV9ub2RlIiwiZ3JhbmRfdHIiLCJnZXRfZ3JhbmRfdHIiLCJhbmNlc3Rvcl90Ym9keSIsImNoaWxkcmVuIiwiYWRkX2VsZW0iLCJpbnNlcnRCZWZvcmUiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJyZW1vdmVDaGlsZCIsIl9fY3JlYXRlQmluZGluZyIsImNyZWF0ZSIsIm8iLCJtIiwiazIiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiX19leHBvcnRTdGFyIiwicCIsInByb3RvdHlwZSIsImNhbGwiLCJtb2R1bGUiLCJCdXR0b25JbnN0YWxsZXIiLCJ1dGlsc18xIiwiY2xhc3NfaG1zX2J1dHRvbiIsImNhbnZhcyIsImNsYXNzbmFtZSIsImNyZWF0ZV9idXR0b24iLCJpY29uX2xhYmVsIiwidG9vbHRpcCIsImljb24iLCJzdHlsZSIsImNvbG9yIiwiYnV0dG9uIiwiZGVjb3JhdGVfbWVudV9pY29uIiwiZm9udFNpemUiLCJhZGRfYnV0dG9uIiwiaW5zdGFsbCIsImFscmVhZHlfaW5zdGFsbGVkIiwicHV0X2J1dHRvbnMiLCJzZXRfY2FudmFzIiwiZ2V0X2htcyIsImhtcyIsImdldEhlYWRlck1lbnVTcGFjZUVsZW1lbnQiLCJidG4iLCJhcHBlbmQiLCJnZXRfaGVhZGVyX2VsZW1lbnQiLCJpbmRleF90ZXh0IiwiUGx1Z2luQ2FudmFzIiwiaWRfaXNsYW5kIiwiaWRfb2ZmY2FudmFzIiwidGl0bGVfb2ZmY2FudmFzIiwiaXNsYW5kIiwiZW5hYmxlX29mZmNhbnZhcyIsImRlZmF1bHRfZWxlbWVudCIsImljb25fZWxlbWVudCIsImFscmVhZHkiLCJpY29uX2JhbGxvb24iLCJiYWxvb24iLCJjdXJzb3IiLCJpbml0X29mZmNhbnZhcyIsImhlYWRlclNwYWNlIiwiZ2V0X25vZGUiLCJidWlsZF9ub2RlX29mZmNhbnZhcyIsIm9mZmNhbnZhcyIsImRlYWxfZGlzbWlzc19hdHRyaWJ1dGUiLCJkaXNtaXNzRWxlbWVudHMiLCJDTEFTU19ESVNNSVNTIiwiZWxlbWVudCIsIndpdGhfcmVjb3JkX251bWJlciIsInJlc3VsdHMiLCJ1bmlxdWUiLCJ0ZXN0X3N0ciIsImlzX2VtcHR5X3N0cmluZyIsImRpYyIsImNvbmZfa2V5IiwiZGVmYXVsdHMiLCJ0YWciLCJjbCIsInRjIiwiYXQiLCJhdHRycyIsImVsIiwiY2hpbGQiLCJlbnRyaWVzIiwidCIsImMiLCJoZWlnaHQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJib3JkZXIiLCJkaXNwbGF5IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwidmVydGljYWxBbGlnbiIsImxpc3QiLCJ4IiwiX2kiLCJpbmRleE9mIiwibGFzdEluZGV4T2YiLCJTZXQiLCJwcm90b2NvbCIsImhvc3QiLCJtYXhfbXNncyIsImVycm9ycyIsIndob2xlX2Vycm9ycyIsImNvbW1lbnRzIiwibWVzc2FnZXMiLCJyZW1haW5fbXNncyIsInNwbGljZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJkZWZpbml0aW9uIiwib2JqIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwic2V0dGluZ19wcmVmcyIsIiRQTFVHSU5fSUQiXSwic291cmNlUm9vdCI6IiJ9