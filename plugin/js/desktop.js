/*! For license information please see desktop.js.LICENSE.txt */
(()=>{var e={"./node_modules/@popperjs/core/lib/createPopper.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{createPopper:()=>j,detectOverflow:()=>h.default,popperGenerator:()=>y});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),a=i("./node_modules/@popperjs/core/lib/utils/orderModifiers.js"),c=i("./node_modules/@popperjs/core/lib/utils/debounce.js"),d=i("./node_modules/@popperjs/core/lib/utils/validateModifiers.js"),u=i("./node_modules/@popperjs/core/lib/utils/uniqueBy.js"),p=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),f=i("./node_modules/@popperjs/core/lib/utils/mergeByName.js"),h=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),m=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),_=i("./node_modules/@popperjs/core/lib/enums.js"),g="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",b={placement:"bottom",modifiers:[],strategy:"absolute"};function v(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function y(e){void 0===e&&(e={});var t=e,i=t.defaultModifiers,h=void 0===i?[]:i,y=t.defaultOptions,j=void 0===y?b:y;return function(e,t,i){void 0===i&&(i=j);var y={placement:"bottom",orderedModifiers:[],options:Object.assign({},b,j),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},w=[],E=!1,C={state:y,setOptions:function(i){var o="function"==typeof i?i(y.options):i;T(),y.options=Object.assign({},j,y.options,o),y.scrollParents={reference:(0,m.isElement)(e)?(0,s.default)(e):e.contextElement?(0,s.default)(e.contextElement):[],popper:(0,s.default)(t)};var n=(0,a.default)((0,f.default)([].concat(h,y.options.modifiers)));y.orderedModifiers=n.filter((function(e){return e.enabled}));var r=(0,u.default)([].concat(n,y.options.modifiers),(function(e){return e.name}));(0,d.default)(r),(0,p.default)(y.options.placement)===_.auto&&(y.orderedModifiers.find((function(e){return"flip"===e.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var c=(0,l.default)(t);return[c.marginTop,c.marginRight,c.marginBottom,c.marginLeft].some((function(e){return parseFloat(e)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),y.orderedModifiers.forEach((function(e){var t=e.name,i=e.options,o=void 0===i?{}:i,n=e.effect;if("function"==typeof n){var s=n({state:y,name:t,instance:C,options:o}),r=function(){};w.push(s||r)}})),C.update()},forceUpdate:function(){if(!E){var e=y.elements,t=e.reference,i=e.popper;if(v(t,i)){y.rects={reference:(0,o.default)(t,(0,r.default)(i),"fixed"===y.options.strategy),popper:(0,n.default)(i)},y.reset=!1,y.placement=y.options.placement,y.orderedModifiers.forEach((function(e){return y.modifiersData[e.name]=Object.assign({},e.data)}));for(var s=0,l=0;l<y.orderedModifiers.length;l++){if((s+=1)>100){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}if(!0!==y.reset){var a=y.orderedModifiers[l],c=a.fn,d=a.options,u=void 0===d?{}:d,p=a.name;"function"==typeof c&&(y=c({state:y,options:u,name:p,instance:C})||y)}else y.reset=!1,l=-1}}else console.error(g)}},update:(0,c.default)((function(){return new Promise((function(e){C.forceUpdate(),e(y)}))})),destroy:function(){T(),E=!0}};if(!v(e,t))return console.error(g),C;function T(){w.forEach((function(e){return e()})),w=[]}return C.setOptions(i).then((function(e){!E&&i.onFirstUpdate&&i.onFirstUpdate(e)})),C}}var j=y()},"./node_modules/@popperjs/core/lib/dom-utils/contains.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function n(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&(0,o.isShadowRoot)(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}},"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),n=i("./node_modules/@popperjs/core/lib/utils/math.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function l(e,t,i){void 0===t&&(t=!1),void 0===i&&(i=!1);var l=e.getBoundingClientRect(),a=1,c=1;t&&(0,o.isHTMLElement)(e)&&(a=e.offsetWidth>0&&(0,n.round)(l.width)/e.offsetWidth||1,c=e.offsetHeight>0&&(0,n.round)(l.height)/e.offsetHeight||1);var d=((0,o.isElement)(e)?(0,s.default)(e):window).visualViewport,u=!(0,r.default)()&&i,p=(l.left+(u&&d?d.offsetLeft:0))/a,f=(l.top+(u&&d?d.offsetTop:0))/c,h=l.width/a,m=l.height/c;return{width:h,height:m,top:f,right:p+h,bottom:f+m,left:p,x:p,y:f}}},"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>b});var o=i("./node_modules/@popperjs/core/lib/enums.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),d=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),u=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),p=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),f=i("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),h=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),m=i("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),_=i("./node_modules/@popperjs/core/lib/utils/math.js");function g(e,t,i){return t===o.viewport?(0,m.default)((0,n.default)(e,i)):(0,d.isElement)(t)?function(e,t){var i=(0,u.default)(e,!1,"fixed"===t);return i.top=i.top+e.clientTop,i.left=i.left+e.clientLeft,i.bottom=i.top+e.clientHeight,i.right=i.left+e.clientWidth,i.width=e.clientWidth,i.height=e.clientHeight,i.x=i.left,i.y=i.top,i}(t,i):(0,m.default)((0,s.default)((0,a.default)(e)))}function b(e,t,i,o){var n="clippingParents"===t?function(e){var t=(0,r.default)((0,p.default)(e)),i=["absolute","fixed"].indexOf((0,c.default)(e).position)>=0&&(0,d.isHTMLElement)(e)?(0,l.default)(e):e;return(0,d.isElement)(i)?t.filter((function(e){return(0,d.isElement)(e)&&(0,f.default)(e,i)&&"body"!==(0,h.default)(e)})):[]}(e):[].concat(t),s=[].concat(n,[i]),a=s[0],u=s.reduce((function(t,i){var n=g(e,i,o);return t.top=(0,_.max)(n.top,t.top),t.right=(0,_.min)(n.right,t.right),t.bottom=(0,_.min)(n.bottom,t.bottom),t.left=(0,_.max)(n.left,t.left),t}),g(e,a,o));return u.width=u.right-u.left,u.height=u.bottom-u.top,u.x=u.left,u.y=u.top,u}},"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>u});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),d=i("./node_modules/@popperjs/core/lib/utils/math.js");function u(e,t,i){void 0===i&&(i=!1);var u=(0,r.isHTMLElement)(t),p=(0,r.isHTMLElement)(t)&&function(e){var t=e.getBoundingClientRect(),i=(0,d.round)(t.width)/e.offsetWidth||1,o=(0,d.round)(t.height)/e.offsetHeight||1;return 1!==i||1!==o}(t),f=(0,a.default)(t),h=(0,o.default)(e,p,i),m={scrollLeft:0,scrollTop:0},_={x:0,y:0};return(u||!u&&!i)&&(("body"!==(0,s.default)(t)||(0,c.default)(f))&&(m=(0,n.default)(t)),(0,r.isHTMLElement)(t)?((_=(0,o.default)(t,!0)).x+=t.clientLeft,_.y+=t.clientTop):f&&(_.x=(0,l.default)(f))),{x:h.left+m.scrollLeft-_.x,y:h.top+m.scrollTop-_.y,width:h.width,height:h.height}}},"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function n(e){return(0,o.default)(e).getComputedStyle(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function n(e){return(((0,o.isElement)(e)?e.ownerDocument:e.document)||window.document).documentElement}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>a});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),l=i("./node_modules/@popperjs/core/lib/utils/math.js");function a(e){var t,i=(0,o.default)(e),a=(0,r.default)(e),c=null==(t=e.ownerDocument)?void 0:t.body,d=(0,l.max)(i.scrollWidth,i.clientWidth,c?c.scrollWidth:0,c?c.clientWidth:0),u=(0,l.max)(i.scrollHeight,i.clientHeight,c?c.scrollHeight:0,c?c.clientHeight:0),p=-a.scrollLeft+(0,s.default)(e),f=-a.scrollTop;return"rtl"===(0,n.default)(c||i).direction&&(p+=(0,l.max)(i.clientWidth,c?c.clientWidth:0)-d),{width:d,height:u,x:p,y:f}}},"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":(e,t,i)=>{"use strict";function o(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");function n(e){var t=(0,o.default)(e),i=e.offsetWidth,n=e.offsetHeight;return Math.abs(t.width-i)<=1&&(i=t.width),Math.abs(t.height-n)<=1&&(n=t.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:n}}},"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":(e,t,i)=>{"use strict";function o(e){return e?(e.nodeName||"").toLowerCase():null}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");function l(e){return e!==(0,n.default)(e)&&(0,s.isHTMLElement)(e)?(0,r.default)(e):(0,o.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>u});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),c=i("./node_modules/@popperjs/core/lib/utils/userAgent.js");function d(e){return(0,r.isHTMLElement)(e)&&"fixed"!==(0,s.default)(e).position?e.offsetParent:null}function u(e){for(var t=(0,o.default)(e),i=d(e);i&&(0,l.default)(i)&&"static"===(0,s.default)(i).position;)i=d(i);return i&&("html"===(0,n.default)(i)||"body"===(0,n.default)(i)&&"static"===(0,s.default)(i).position)?t:i||function(e){var t=/firefox/i.test((0,c.default)());if(/Trident/i.test((0,c.default)())&&(0,r.isHTMLElement)(e)&&"fixed"===(0,s.default)(e).position)return null;var i=(0,a.default)(e);for((0,r.isShadowRoot)(i)&&(i=i.host);(0,r.isHTMLElement)(i)&&["html","body"].indexOf((0,n.default)(i))<0;){var o=(0,s.default)(i);if("none"!==o.transform||"none"!==o.perspective||"paint"===o.contain||-1!==["transform","perspective"].indexOf(o.willChange)||t&&"filter"===o.willChange||t&&o.filter&&"none"!==o.filter)return i;i=i.parentNode}return null}(e)||t}},"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(e){return"html"===(0,o.default)(e)?e:e.assignedSlot||e.parentNode||((0,s.isShadowRoot)(e)?e.host:null)||(0,n.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function l(e){return["html","body","#document"].indexOf((0,s.default)(e))>=0?e.ownerDocument.body:(0,r.isHTMLElement)(e)&&(0,n.default)(e)?e:l((0,o.default)(e))}},"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js");function l(e,t){var i=(0,o.default)(e),l=(0,n.default)(e),a=i.visualViewport,c=l.clientWidth,d=l.clientHeight,u=0,p=0;if(a){c=a.width,d=a.height;var f=(0,r.default)();(f||!f&&"fixed"===t)&&(u=a.offsetLeft,p=a.offsetTop)}return{width:c,height:d,x:u+(0,s.default)(e),y:p}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":(e,t,i)=>{"use strict";function o(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function n(e){var t=(0,o.default)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>r});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");function r(e){return(0,o.default)((0,n.default)(e)).left+(0,s.default)(e).scrollLeft}},"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{isElement:()=>n,isHTMLElement:()=>s,isShadowRoot:()=>r});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function n(e){return e instanceof(0,o.default)(e).Element||e instanceof Element}function s(e){return e instanceof(0,o.default)(e).HTMLElement||e instanceof HTMLElement}function r(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,o.default)(e).ShadowRoot||e instanceof ShadowRoot)}},"./node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/utils/userAgent.js");function n(){return!/^((?!chrome|android).)*safari/i.test((0,o.default)())}},"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");function n(e){var t=(0,o.default)(e),i=t.overflow,n=t.overflowX,s=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+s+n)}},"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");function n(e){return["table","td","th"].indexOf((0,o.default)(e))>=0}},"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");function l(e,t){var i;void 0===t&&(t=[]);var a=(0,o.default)(e),c=a===(null==(i=e.ownerDocument)?void 0:i.body),d=(0,s.default)(a),u=c?[d].concat(d.visualViewport||[],(0,r.default)(a)?a:[]):a,p=t.concat(u);return c?p:p.concat(l((0,n.default)(u)))}},"./node_modules/@popperjs/core/lib/enums.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{afterMain:()=>w,afterRead:()=>v,afterWrite:()=>T,auto:()=>l,basePlacements:()=>a,beforeMain:()=>y,beforeRead:()=>g,beforeWrite:()=>E,bottom:()=>n,clippingParents:()=>u,end:()=>d,left:()=>r,main:()=>j,modifierPhases:()=>k,placements:()=>_,popper:()=>f,read:()=>b,reference:()=>h,right:()=>s,start:()=>c,top:()=>o,variationPlacements:()=>m,viewport:()=>p,write:()=>C});var o="top",n="bottom",s="right",r="left",l="auto",a=[o,n,s,r],c="start",d="end",u="clippingParents",p="viewport",f="popper",h="reference",m=a.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+d])}),[]),_=[].concat(a,[l]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+d])}),[]),g="beforeRead",b="read",v="afterRead",y="beforeMain",j="main",w="afterMain",E="beforeWrite",C="write",T="afterWrite",k=[g,b,v,y,j,w,E,C,T]},"./node_modules/@popperjs/core/lib/index.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{afterMain:()=>o.afterMain,afterRead:()=>o.afterRead,afterWrite:()=>o.afterWrite,applyStyles:()=>n.applyStyles,arrow:()=>n.arrow,auto:()=>o.auto,basePlacements:()=>o.basePlacements,beforeMain:()=>o.beforeMain,beforeRead:()=>o.beforeRead,beforeWrite:()=>o.beforeWrite,bottom:()=>o.bottom,clippingParents:()=>o.clippingParents,computeStyles:()=>n.computeStyles,createPopper:()=>l.createPopper,createPopperBase:()=>s.createPopper,createPopperLite:()=>a.createPopper,detectOverflow:()=>r.default,end:()=>o.end,eventListeners:()=>n.eventListeners,flip:()=>n.flip,hide:()=>n.hide,left:()=>o.left,main:()=>o.main,modifierPhases:()=>o.modifierPhases,offset:()=>n.offset,placements:()=>o.placements,popper:()=>o.popper,popperGenerator:()=>s.popperGenerator,popperOffsets:()=>n.popperOffsets,preventOverflow:()=>n.preventOverflow,read:()=>o.read,reference:()=>o.reference,right:()=>o.right,start:()=>o.start,top:()=>o.top,variationPlacements:()=>o.variationPlacements,viewport:()=>o.viewport,write:()=>o.write});var o=i("./node_modules/@popperjs/core/lib/enums.js"),n=i("./node_modules/@popperjs/core/lib/modifiers/index.js"),s=i("./node_modules/@popperjs/core/lib/createPopper.js"),r=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),l=i("./node_modules/@popperjs/core/lib/popper.js"),a=i("./node_modules/@popperjs/core/lib/popper-lite.js")},"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":(e,t,i)=>{"use strict";i.r(t);var o=i("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");t.default={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},s=t.attributes[e]||{},r=t.elements[e];(0,n.isHTMLElement)(r)&&(0,o.default)(r)&&(Object.assign(r.style,i),Object.keys(s).forEach((function(e){var t=s[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var s=t.elements[e],r=t.attributes[e]||{},l=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});(0,n.isHTMLElement)(s)&&(0,o.default)(s)&&(Object.assign(s.style,l),Object.keys(r).forEach((function(e){s.removeAttribute(e)})))}))}},requires:["computeStyles"]}},"./node_modules/@popperjs/core/lib/modifiers/arrow.js":(e,t,i)=>{"use strict";i.r(t);var o=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=i("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),a=i("./node_modules/@popperjs/core/lib/utils/within.js"),c=i("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),d=i("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js"),u=i("./node_modules/@popperjs/core/lib/enums.js"),p=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");t.default={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,i=e.state,s=e.name,p=e.options,f=i.elements.arrow,h=i.modifiersData.popperOffsets,m=(0,o.default)(i.placement),_=(0,l.default)(m),g=[u.left,u.right].indexOf(m)>=0?"height":"width";if(f&&h){var b=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,c.default)("number"!=typeof e?e:(0,d.default)(e,u.basePlacements))}(p.padding,i),v=(0,n.default)(f),y="y"===_?u.top:u.left,j="y"===_?u.bottom:u.right,w=i.rects.reference[g]+i.rects.reference[_]-h[_]-i.rects.popper[g],E=h[_]-i.rects.reference[_],C=(0,r.default)(f),T=C?"y"===_?C.clientHeight||0:C.clientWidth||0:0,k=w/2-E/2,A=b[y],O=T-v[g]-b[j],S=T/2-v[g]/2+k,x=(0,a.within)(A,S,O),P=_;i.modifiersData[s]=((t={})[P]=x,t.centerOffset=x-S,t)}},effect:function(e){var t=e.state,i=e.options.element,o=void 0===i?"[data-popper-arrow]":i;null!=o&&("string"!=typeof o||(o=t.elements.popper.querySelector(o)))&&((0,p.isHTMLElement)(o)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),(0,s.default)(t.elements.popper,o)?t.elements.arrow=o:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{mapToStyles:()=>p});var o=i("./node_modules/@popperjs/core/lib/enums.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),l=i("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),a=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),c=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),d=i("./node_modules/@popperjs/core/lib/utils/math.js"),u={top:"auto",right:"auto",bottom:"auto",left:"auto"};function p(e){var t,i=e.popper,a=e.popperRect,c=e.placement,p=e.variation,f=e.offsets,h=e.position,m=e.gpuAcceleration,_=e.adaptive,g=e.roundOffsets,b=e.isFixed,v=f.x,y=void 0===v?0:v,j=f.y,w=void 0===j?0:j,E="function"==typeof g?g({x:y,y:w}):{x:y,y:w};y=E.x,w=E.y;var C=f.hasOwnProperty("x"),T=f.hasOwnProperty("y"),k=o.left,A=o.top,O=window;if(_){var S=(0,n.default)(i),x="clientHeight",P="clientWidth";if(S===(0,s.default)(i)&&(S=(0,r.default)(i),"static"!==(0,l.default)(S).position&&"absolute"===h&&(x="scrollHeight",P="scrollWidth")),c===o.top||(c===o.left||c===o.right)&&p===o.end)A=o.bottom,w-=(b&&S===O&&O.visualViewport?O.visualViewport.height:S[x])-a.height,w*=m?1:-1;if(c===o.left||(c===o.top||c===o.bottom)&&p===o.end)k=o.right,y-=(b&&S===O&&O.visualViewport?O.visualViewport.width:S[P])-a.width,y*=m?1:-1}var N,L=Object.assign({position:h},_&&u),I=!0===g?function(e){var t=e.x,i=e.y,o=window.devicePixelRatio||1;return{x:(0,d.round)(t*o)/o||0,y:(0,d.round)(i*o)/o||0}}({x:y,y:w}):{x:y,y:w};return y=I.x,w=I.y,m?Object.assign({},L,((N={})[A]=T?"0":"",N[k]=C?"0":"",N.transform=(O.devicePixelRatio||1)<=1?"translate("+y+"px, "+w+"px)":"translate3d("+y+"px, "+w+"px, 0)",N)):Object.assign({},L,((t={})[A]=T?w+"px":"",t[k]=C?y+"px":"",t.transform="",t))}t.default={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,i=e.options,o=i.gpuAcceleration,n=void 0===o||o,s=i.adaptive,r=void 0===s||s,d=i.roundOffsets,u=void 0===d||d,f=(0,l.default)(t.elements.popper).transitionProperty||"";r&&["transform","top","right","bottom","left"].some((function(e){return f.indexOf(e)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var h={placement:(0,a.default)(t.placement),variation:(0,c.default)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:n,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,p(Object.assign({},h,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:r,roundOffsets:u})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,p(Object.assign({},h,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":(e,t,i)=>{"use strict";i.r(t);var o=i("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),n={passive:!0};t.default={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,i=e.instance,s=e.options,r=s.scroll,l=void 0===r||r,a=s.resize,c=void 0===a||a,d=(0,o.default)(t.elements.popper),u=[].concat(t.scrollParents.reference,t.scrollParents.popper);return l&&u.forEach((function(e){e.addEventListener("scroll",i.update,n)})),c&&d.addEventListener("resize",i.update,n),function(){l&&u.forEach((function(e){e.removeEventListener("scroll",i.update,n)})),c&&d.removeEventListener("resize",i.update,n)}},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/flip.js":(e,t,i)=>{"use strict";i.r(t);var o=i("./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js"),n=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js"),r=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),l=i("./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"),a=i("./node_modules/@popperjs/core/lib/enums.js"),c=i("./node_modules/@popperjs/core/lib/utils/getVariation.js");t.default={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,d=e.name;if(!t.modifiersData[d]._skip){for(var u=i.mainAxis,p=void 0===u||u,f=i.altAxis,h=void 0===f||f,m=i.fallbackPlacements,_=i.padding,g=i.boundary,b=i.rootBoundary,v=i.altBoundary,y=i.flipVariations,j=void 0===y||y,w=i.allowedAutoPlacements,E=t.options.placement,C=(0,n.default)(E),T=m||(C===E||!j?[(0,o.default)(E)]:function(e){if((0,n.default)(e)===a.auto)return[];var t=(0,o.default)(e);return[(0,s.default)(e),t,(0,s.default)(t)]}(E)),k=[E].concat(T).reduce((function(e,i){return e.concat((0,n.default)(i)===a.auto?(0,l.default)(t,{placement:i,boundary:g,rootBoundary:b,padding:_,flipVariations:j,allowedAutoPlacements:w}):i)}),[]),A=t.rects.reference,O=t.rects.popper,S=new Map,x=!0,P=k[0],N=0;N<k.length;N++){var L=k[N],I=(0,n.default)(L),D=(0,c.default)(L)===a.start,M=[a.top,a.bottom].indexOf(I)>=0,B=M?"width":"height",U=(0,r.default)(t,{placement:L,boundary:g,rootBoundary:b,altBoundary:v,padding:_}),$=M?D?a.right:a.left:D?a.bottom:a.top;A[B]>O[B]&&($=(0,o.default)($));var F=(0,o.default)($),R=[];if(p&&R.push(U[I]<=0),h&&R.push(U[$]<=0,U[F]<=0),R.every((function(e){return e}))){P=L,x=!1;break}S.set(L,R)}if(x)for(var q=function(e){var t=k.find((function(t){var i=S.get(t);if(i)return i.slice(0,e).every((function(e){return e}))}));if(t)return P=t,"break"},K=j?3:1;K>0;K--){if("break"===q(K))break}t.placement!==P&&(t.modifiersData[d]._skip=!0,t.placement=P,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},"./node_modules/@popperjs/core/lib/modifiers/hide.js":(e,t,i)=>{"use strict";i.r(t);var o=i("./node_modules/@popperjs/core/lib/enums.js"),n=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js");function s(e,t,i){return void 0===i&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function r(e){return[o.top,o.right,o.bottom,o.left].some((function(t){return e[t]>=0}))}t.default={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,i=e.name,o=t.rects.reference,l=t.rects.popper,a=t.modifiersData.preventOverflow,c=(0,n.default)(t,{elementContext:"reference"}),d=(0,n.default)(t,{altBoundary:!0}),u=s(c,o),p=s(d,l,a),f=r(u),h=r(p);t.modifiersData[i]={referenceClippingOffsets:u,popperEscapeOffsets:p,isReferenceHidden:f,hasPopperEscaped:h},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":f,"data-popper-escaped":h})}}},"./node_modules/@popperjs/core/lib/modifiers/index.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{applyStyles:()=>o.default,arrow:()=>n.default,computeStyles:()=>s.default,eventListeners:()=>r.default,flip:()=>l.default,hide:()=>a.default,offset:()=>c.default,popperOffsets:()=>d.default,preventOverflow:()=>u.default});var o=i("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),n=i("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),s=i("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),r=i("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),l=i("./node_modules/@popperjs/core/lib/modifiers/flip.js"),a=i("./node_modules/@popperjs/core/lib/modifiers/hide.js"),c=i("./node_modules/@popperjs/core/lib/modifiers/offset.js"),d=i("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),u=i("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js")},"./node_modules/@popperjs/core/lib/modifiers/offset.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{distanceAndSkiddingToXY:()=>s});var o=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),n=i("./node_modules/@popperjs/core/lib/enums.js");function s(e,t,i){var s=(0,o.default)(e),r=[n.left,n.top].indexOf(s)>=0?-1:1,l="function"==typeof i?i(Object.assign({},t,{placement:e})):i,a=l[0],c=l[1];return a=a||0,c=(c||0)*r,[n.left,n.right].indexOf(s)>=0?{x:c,y:a}:{x:a,y:c}}t.default={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,i=e.options,o=e.name,r=i.offset,l=void 0===r?[0,0]:r,a=n.placements.reduce((function(e,i){return e[i]=s(i,t.rects,l),e}),{}),c=a[t.placement],d=c.x,u=c.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=d,t.modifiersData.popperOffsets.y+=u),t.modifiersData[o]=a}}},"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":(e,t,i)=>{"use strict";i.r(t);var o=i("./node_modules/@popperjs/core/lib/utils/computeOffsets.js");t.default={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,i=e.name;t.modifiersData[i]=(0,o.default)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":(e,t,i)=>{"use strict";i.r(t);var o=i("./node_modules/@popperjs/core/lib/enums.js"),n=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),s=i("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=i("./node_modules/@popperjs/core/lib/utils/getAltAxis.js"),l=i("./node_modules/@popperjs/core/lib/utils/within.js"),a=i("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),d=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),u=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),p=i("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js"),f=i("./node_modules/@popperjs/core/lib/utils/math.js");t.default={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,h=e.name,m=i.mainAxis,_=void 0===m||m,g=i.altAxis,b=void 0!==g&&g,v=i.boundary,y=i.rootBoundary,j=i.altBoundary,w=i.padding,E=i.tether,C=void 0===E||E,T=i.tetherOffset,k=void 0===T?0:T,A=(0,d.default)(t,{boundary:v,rootBoundary:y,padding:w,altBoundary:j}),O=(0,n.default)(t.placement),S=(0,u.default)(t.placement),x=!S,P=(0,s.default)(O),N=(0,r.default)(P),L=t.modifiersData.popperOffsets,I=t.rects.reference,D=t.rects.popper,M="function"==typeof k?k(Object.assign({},t.rects,{placement:t.placement})):k,B="number"==typeof M?{mainAxis:M,altAxis:M}:Object.assign({mainAxis:0,altAxis:0},M),U=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,$={x:0,y:0};if(L){if(_){var F,R="y"===P?o.top:o.left,q="y"===P?o.bottom:o.right,K="y"===P?"height":"width",H=L[P],W=H+A[R],z=H-A[q],V=C?-D[K]/2:0,G=S===o.start?I[K]:D[K],X=S===o.start?-D[K]:-I[K],Y=t.elements.arrow,Q=C&&Y?(0,a.default)(Y):{width:0,height:0},J=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,p.default)(),Z=J[R],ee=J[q],te=(0,l.within)(0,I[K],Q[K]),ie=x?I[K]/2-V-te-Z-B.mainAxis:G-te-Z-B.mainAxis,oe=x?-I[K]/2+V+te+ee+B.mainAxis:X+te+ee+B.mainAxis,ne=t.elements.arrow&&(0,c.default)(t.elements.arrow),se=ne?"y"===P?ne.clientTop||0:ne.clientLeft||0:0,re=null!=(F=null==U?void 0:U[P])?F:0,le=H+ie-re-se,ae=H+oe-re,ce=(0,l.within)(C?(0,f.min)(W,le):W,H,C?(0,f.max)(z,ae):z);L[P]=ce,$[P]=ce-H}if(b){var de,ue="x"===P?o.top:o.left,pe="x"===P?o.bottom:o.right,fe=L[N],he="y"===N?"height":"width",me=fe+A[ue],_e=fe-A[pe],ge=-1!==[o.top,o.left].indexOf(O),be=null!=(de=null==U?void 0:U[N])?de:0,ve=ge?me:fe-I[he]-D[he]-be+B.altAxis,ye=ge?fe+I[he]+D[he]-be-B.altAxis:_e,je=C&&ge?(0,l.withinMaxClamp)(ve,fe,ye):(0,l.within)(C?ve:me,fe,C?ye:_e);L[N]=je,$[N]=je-fe}t.modifiersData[h]=$}},requiresIfExists:["offset"]}},"./node_modules/@popperjs/core/lib/popper-lite.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{createPopper:()=>d,defaultModifiers:()=>c,detectOverflow:()=>n.default,popperGenerator:()=>o.popperGenerator});var o=i("./node_modules/@popperjs/core/lib/createPopper.js"),n=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),s=i("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=i("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),l=i("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),a=i("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),c=[s.default,r.default,l.default,a.default],d=(0,o.popperGenerator)({defaultModifiers:c})},"./node_modules/@popperjs/core/lib/popper.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{applyStyles:()=>m.applyStyles,arrow:()=>m.arrow,computeStyles:()=>m.computeStyles,createPopper:()=>g,createPopperLite:()=>h.createPopper,defaultModifiers:()=>_,detectOverflow:()=>n.default,eventListeners:()=>m.eventListeners,flip:()=>m.flip,hide:()=>m.hide,offset:()=>m.offset,popperGenerator:()=>o.popperGenerator,popperOffsets:()=>m.popperOffsets,preventOverflow:()=>m.preventOverflow});var o=i("./node_modules/@popperjs/core/lib/createPopper.js"),n=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),s=i("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),r=i("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),l=i("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),a=i("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),c=i("./node_modules/@popperjs/core/lib/modifiers/offset.js"),d=i("./node_modules/@popperjs/core/lib/modifiers/flip.js"),u=i("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js"),p=i("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),f=i("./node_modules/@popperjs/core/lib/modifiers/hide.js"),h=i("./node_modules/@popperjs/core/lib/popper-lite.js"),m=i("./node_modules/@popperjs/core/lib/modifiers/index.js"),_=[s.default,r.default,l.default,a.default,c.default,d.default,u.default,p.default,f.default],g=(0,o.popperGenerator)({defaultModifiers:_})},"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),n=i("./node_modules/@popperjs/core/lib/enums.js"),s=i("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),r=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");function l(e,t){void 0===t&&(t={});var i=t,l=i.placement,a=i.boundary,c=i.rootBoundary,d=i.padding,u=i.flipVariations,p=i.allowedAutoPlacements,f=void 0===p?n.placements:p,h=(0,o.default)(l),m=h?u?n.variationPlacements:n.variationPlacements.filter((function(e){return(0,o.default)(e)===h})):n.basePlacements,_=m.filter((function(e){return f.indexOf(e)>=0}));0===_.length&&(_=m,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var g=_.reduce((function(t,i){return t[i]=(0,s.default)(e,{placement:i,boundary:a,rootBoundary:c,padding:d})[(0,r.default)(i)],t}),{});return Object.keys(g).sort((function(e,t){return g[e]-g[t]}))}},"./node_modules/@popperjs/core/lib/utils/computeOffsets.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),n=i("./node_modules/@popperjs/core/lib/utils/getVariation.js"),s=i("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),r=i("./node_modules/@popperjs/core/lib/enums.js");function l(e){var t,i=e.reference,l=e.element,a=e.placement,c=a?(0,o.default)(a):null,d=a?(0,n.default)(a):null,u=i.x+i.width/2-l.width/2,p=i.y+i.height/2-l.height/2;switch(c){case r.top:t={x:u,y:i.y-l.height};break;case r.bottom:t={x:u,y:i.y+i.height};break;case r.right:t={x:i.x+i.width,y:p};break;case r.left:t={x:i.x-l.width,y:p};break;default:t={x:i.x,y:i.y}}var f=c?(0,s.default)(c):null;if(null!=f){var h="y"===f?"height":"width";switch(d){case r.start:t[f]=t[f]-(i[h]/2-l[h]/2);break;case r.end:t[f]=t[f]+(i[h]/2-l[h]/2)}}return t}},"./node_modules/@popperjs/core/lib/utils/debounce.js":(e,t,i)=>{"use strict";function o(e){var t;return function(){return t||(t=new Promise((function(i){Promise.resolve().then((function(){t=void 0,i(e())}))}))),t}}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/detectOverflow.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>p});var o=i("./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"),n=i("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),s=i("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=i("./node_modules/@popperjs/core/lib/utils/computeOffsets.js"),l=i("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),a=i("./node_modules/@popperjs/core/lib/enums.js"),c=i("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),d=i("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),u=i("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");function p(e,t){void 0===t&&(t={});var i=t,p=i.placement,f=void 0===p?e.placement:p,h=i.strategy,m=void 0===h?e.strategy:h,_=i.boundary,g=void 0===_?a.clippingParents:_,b=i.rootBoundary,v=void 0===b?a.viewport:b,y=i.elementContext,j=void 0===y?a.popper:y,w=i.altBoundary,E=void 0!==w&&w,C=i.padding,T=void 0===C?0:C,k=(0,d.default)("number"!=typeof T?T:(0,u.default)(T,a.basePlacements)),A=j===a.popper?a.reference:a.popper,O=e.rects.popper,S=e.elements[E?A:j],x=(0,o.default)((0,c.isElement)(S)?S:S.contextElement||(0,n.default)(e.elements.popper),g,v,m),P=(0,s.default)(e.elements.reference),N=(0,r.default)({reference:P,element:O,strategy:"absolute",placement:f}),L=(0,l.default)(Object.assign({},O,N)),I=j===a.popper?L:P,D={top:x.top-I.top+k.top,bottom:I.bottom-x.bottom+k.bottom,left:x.left-I.left+k.left,right:I.right-x.right+k.right},M=e.modifiersData.offset;if(j===a.popper&&M){var B=M[f];Object.keys(D).forEach((function(e){var t=[a.right,a.bottom].indexOf(e)>=0?1:-1,i=[a.top,a.bottom].indexOf(e)>=0?"y":"x";D[e]+=B[i]*t}))}return D}},"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":(e,t,i)=>{"use strict";function o(e,t){return t.reduce((function(t,i){return t[i]=e,t}),{})}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/format.js":(e,t,i)=>{"use strict";function o(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),o=1;o<t;o++)i[o-1]=arguments[o];return[].concat(i).reduce((function(e,t){return e.replace(/%s/,t)}),e)}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/getAltAxis.js":(e,t,i)=>{"use strict";function o(e){return"x"===e?"y":"x"}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":(e,t,i)=>{"use strict";function o(e){return e.split("-")[0]}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":(e,t,i)=>{"use strict";function o(){return{top:0,right:0,bottom:0,left:0}}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":(e,t,i)=>{"use strict";function o(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o={left:"right",right:"left",bottom:"top",top:"bottom"};function n(e){return e.replace(/left|right|bottom|top/g,(function(e){return o[e]}))}},"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o={start:"end",end:"start"};function n(e){return e.replace(/start|end/g,(function(e){return o[e]}))}},"./node_modules/@popperjs/core/lib/utils/getVariation.js":(e,t,i)=>{"use strict";function o(e){return e.split("-")[1]}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/math.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{max:()=>o,min:()=>n,round:()=>s});var o=Math.max,n=Math.min,s=Math.round},"./node_modules/@popperjs/core/lib/utils/mergeByName.js":(e,t,i)=>{"use strict";function o(e){var t=e.reduce((function(e,t){var i=e[t.name];return e[t.name]=i?Object.assign({},i,t,{options:Object.assign({},i.options,t.options),data:Object.assign({},i.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>n});var o=i("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");function n(e){return Object.assign({},(0,o.default)(),e)}},"./node_modules/@popperjs/core/lib/utils/orderModifiers.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>s});var o=i("./node_modules/@popperjs/core/lib/enums.js");function n(e){var t=new Map,i=new Set,o=[];function n(e){i.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!i.has(e)){var o=t.get(e);o&&n(o)}})),o.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){i.has(e.name)||n(e)})),o}function s(e){var t=n(e);return o.modifierPhases.reduce((function(e,i){return e.concat(t.filter((function(e){return e.phase===i})))}),[])}},"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":(e,t,i)=>{"use strict";function o(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/uniqueBy.js":(e,t,i)=>{"use strict";function o(e,t){var i=new Set;return e.filter((function(e){var o=t(e);if(!i.has(o))return i.add(o),!0}))}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/userAgent.js":(e,t,i)=>{"use strict";function o(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}i.r(t),i.d(t,{default:()=>o})},"./node_modules/@popperjs/core/lib/utils/validateModifiers.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{default:()=>l});var o=i("./node_modules/@popperjs/core/lib/utils/format.js"),n=i("./node_modules/@popperjs/core/lib/enums.js"),s='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',r=["name","enabled","phase","fn","effect","requires","options"];function l(e){e.forEach((function(t){[].concat(Object.keys(t),r).filter((function(e,t,i){return i.indexOf(e)===t})).forEach((function(i){switch(i){case"name":"string"!=typeof t.name&&console.error((0,o.default)(s,String(t.name),'"name"','"string"','"'+String(t.name)+'"'));break;case"enabled":"boolean"!=typeof t.enabled&&console.error((0,o.default)(s,t.name,'"enabled"','"boolean"','"'+String(t.enabled)+'"'));break;case"phase":n.modifierPhases.indexOf(t.phase)<0&&console.error((0,o.default)(s,t.name,'"phase"',"either "+n.modifierPhases.join(", "),'"'+String(t.phase)+'"'));break;case"fn":"function"!=typeof t.fn&&console.error((0,o.default)(s,t.name,'"fn"','"function"','"'+String(t.fn)+'"'));break;case"effect":null!=t.effect&&"function"!=typeof t.effect&&console.error((0,o.default)(s,t.name,'"effect"','"function"','"'+String(t.fn)+'"'));break;case"requires":null==t.requires||Array.isArray(t.requires)||console.error((0,o.default)(s,t.name,'"requires"','"array"','"'+String(t.requires)+'"'));break;case"requiresIfExists":Array.isArray(t.requiresIfExists)||console.error((0,o.default)(s,t.name,'"requiresIfExists"','"array"','"'+String(t.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+t.name+'" modifier, valid properties are '+r.map((function(e){return'"'+e+'"'})).join(", ")+'; but "'+i+'" was provided.')}t.requires&&t.requires.forEach((function(i){null==e.find((function(e){return e.name===i}))&&console.error((0,o.default)('Popper: modifier "%s" requires "%s", but "%s" modifier is not available',String(t.name),i,i))}))}))}))}},"./node_modules/@popperjs/core/lib/utils/within.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{within:()=>n,withinMaxClamp:()=>s});var o=i("./node_modules/@popperjs/core/lib/utils/math.js");function n(e,t,i){return(0,o.max)(e,(0,o.min)(t,i))}function s(e,t,i){var o=n(e,t,i);return o>i?i:o}},"./src/ts/config/settings.ts":(e,t,i)=>{"use strict";i.r(t),i.d(t,{Settings:()=>r});var o=i("../lib/KintoneConfigBuilder.ts/dist/index.js"),n=i("./src/ts/constants.ts");function s(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class r{}s(r,"preference",{title:"ChatGPT連携プラグインの設定",description:""}),s(r,"input",[{label:"ChatGPTの設定",desc:"API呼び出しに必要な項目を指定します。",type:o.FieldType.Label},{label:"API Key",desc:"ChatGPT APIのAPI Tokenを指定してください。",code:n.CONSTANTS.API_KEY,type:o.FieldType.Text,required:!0,secret:!0,URL:"https://api.openai.com/v1/completions",method:"POST",header:"Authorization Bearer"},{label:"ChatGPTの利用モデル",desc:'利用モデル名を入力してください。デフォルトは "text-davinci-003" です。',code:n.CONSTANTS.MODEL_ID,type:o.FieldType.Text,default:"text-davinci-003",required:!0},{label:"MAX Tokens",desc:"レスポンスの最大トークン長を指定してください。",code:n.CONSTANTS.NUMBER_MAX_TOKENS,type:o.FieldType.Number,default:"256",required:!0},{label:"実行ボタン配置スペース選択",desc:"API呼び出しを実行するボタンを配置するスペースを選択してください。",code:n.CONSTANTS.BTN_SPACE_FIELD,type:o.FieldType.Dropdown_FieldSelect,accept:["SPACER"],required:!0},{label:"固定プロンプト",desc:"入力として毎回渡す固定のプロンプトを記入してください。",code:n.CONSTANTS.STATIC_PROMPT,type:o.FieldType.MultilineText,required:!1},{label:"レコード別プロンプト",desc:"レコード別に指定するプロンプトフィールドを選択してください。",code:n.CONSTANTS.UNIQUE_PROMPT,type:o.FieldType.Dropdown_FieldSelect,accept:["SINGLE_LINE_TEXT","MULTI_LINE_TEXT"],default:n.CONSTANTS.EMPTY_LABEL,required:!1},{label:"レコード編集モード",desc:"有効にするとレコード全体を編集対象として書き換えるモードで動作します。その際、↓以降の設定は無効になります。よくわからない場合はdisableにしておいてください。",code:n.CONSTANTS.FLAG_RECORD_MODIFIER,type:o.FieldType.Radio,accept:n.CONSTANTS.LABELS_RECORD_MODIFIER,default:n.CONSTANTS.LABELS_RECORD_MODIFIER[1],required:!0},{label:"",desc:"",type:o.FieldType.Separator,required:!1},{label:"kintoneのフィールド設定",desc:"入出力フィールドなどを設定します。",type:o.FieldType.Label},{label:"入力フィールド選択",desc:"入力として使用するフィールドを選択してください",code:n.CONSTANTS.INPUT_FIELD,type:o.FieldType.Dropdown_FieldSelect,accept:["SINGLE_LINE_TEXT","MULTI_LINE_TEXT"],required:!0},{label:"出力フィールド選択",desc:"ChatGPTの返答を入力するフィールドを選択してください。",code:n.CONSTANTS.OUTPUT_FIELD,type:o.FieldType.Dropdown_FieldSelect,accept:["MULTI_LINE_TEXT"],required:!0}])},"./src/ts/constants.ts":(e,t,i)=>{"use strict";i.r(t),i.d(t,{CONSTANTS:()=>o});const o={PLUGIN_NAME:"ChatGPT連携プラグイン",EMPTY_LABEL:"----",API_KEY:"api_key",MODEL_ID:"model_id",STATIC_PROMPT:"static_prompt",UNIQUE_PROMPT:"unique_prompt",INPUT_FIELD:"input_field",OUTPUT_FIELD:"output_field",BTN_SPACE_FIELD:"btn_space_field",FLAG_RECORD_MODIFIER:"flag_record_modifier",LABELS_RECORD_MODIFIER:["enable","disable"],NUMBER_MAX_TOKENS:"NUMBER_MAX_TOKENS"}},"./src/ts/desktop/chatgpt_connector.ts":(e,t,i)=>{"use strict";i.r(t),i.d(t,{ChatGPTConnector:()=>r});var o=i("../lib/KintoneCommonUtils.ts/dist/index.js"),n=i("./src/ts/constants.ts");function s(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}class r{constructor(e){s(this,"conf",void 0),s(this,"plugin_id",void 0),s(this,"static_prompt",void 0),s(this,"fc_unique_prompt",void 0),s(this,"fc_input_field",void 0),s(this,"fc_output_field",void 0),s(this,"space_btn_field",void 0),s(this,"model_id",void 0),s(this,"api_endpoint",void 0),s(this,"flag_record_modifier",void 0),s(this,"max_tokens",256),s(this,"run",(()=>{if(console.log("call chatGPT!"),null==this.fc_input_field||null==this.fc_unique_prompt)return void console.error("どこかundefinedが残っています。".concat(this.fc_input_field," / ").concat(this.fc_unique_prompt));const e=(e=>{if(this.flag_record_modifier){const e=kintone.app.record.get();return console.log("---- mode: record modifier"),JSON.stringify(e)}return this.getFieldContent(this.fc_input_field)})(),t=this.getFieldContent(this.fc_unique_prompt),i=[this.static_prompt,t,e].filter((e=>null!=e)).join("\n");this.request(i).then((e=>{if(console.log({response:e}),null!=this.fc_output_field)if(this.flag_record_modifier){if(console.log({response:e}),null==e)throw new Error("ChatGPTConnector.run(): response is empty!");const t=JSON.parse(e[0]);kintone.app.record.set(t)}else{const t=JSON.parse(e[0]).choices[0].text;this.setFieldContent(this.fc_output_field,t.replace(/^\n+/,""))}}))})),this.flag_record_modifier=!1,this.conf=void 0,this.loadConfig(e),this.api_endpoint="https://api.openai.com/v1"}setup(e){this.setButton(this.space_btn_field),this.plugin_id=e}loadConfig(e){console.log(e),this.conf=e,this.static_prompt=e[n.CONSTANTS.STATIC_PROMPT],this.fc_unique_prompt=e[n.CONSTANTS.UNIQUE_PROMPT],this.fc_input_field=e[n.CONSTANTS.INPUT_FIELD],this.fc_output_field=e[n.CONSTANTS.OUTPUT_FIELD],this.space_btn_field=e[n.CONSTANTS.BTN_SPACE_FIELD],this.max_tokens=null==e[n.CONSTANTS.NUMBER_MAX_TOKENS]?256:e[n.CONSTANTS.NUMBER_MAX_TOKENS],this.flag_record_modifier=e[n.CONSTANTS.FLAG_RECORD_MODIFIER]==n.CONSTANTS.LABELS_RECORD_MODIFIER[0],this.model_id=e[n.CONSTANTS.MODEL_ID]}setButton(e){if(null==e)return;const t=kintone.app.record.getSpaceElement(e),i=o.Utils.buildElement({tagName:"input",className:"kintoneplugin-button-normal",attrs:{type:"button",value:"ChatGPTに聞く"}});i.addEventListener("click",this.run),null==t||t.appendChild(i)}getFieldContent(e){const t=kintone.app.record.get();if(null==t)throw new Error("レコード情報が取得できません。");const i=t.record[e].value;return console.log({text:i}),i}setFieldContent(e,t){const i=kintone.app.record.get();i.record[e].value=t,kintone.app.record.set(i)}request(e){if(console.log({prompt:e}),null==this.plugin_id)throw new Error("プラグインIDが未定です");const t=this.plugin_id,i=this.api_endpoint+"/completions";if(null==this.model_id||""==this.model_id)throw new Error("指定されたChatGPTのモデル名[".concat(this.model_id,"]が不適切です。"));const o={model:this.model_id,prompt:e,max_tokens:1024,temperature:.7};return kintone.plugin.app.proxy(t,i,"POST",{"Content-Type":"application/json"},o)}}},"../lib/KintoneCommonUtils.ts/dist/button_installer.js":(e,t,i)=>{"use strict";function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonInstaller=void 0;const n=i("../lib/KintoneCommonUtils.ts/dist/utils.js");i("../lib/KintoneCommonUtils.ts/node_modules/@shin-chan/kypes/src/index.js");t.ButtonInstaller=class{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";o(this,"class_hms_button","button-hms-items"),o(this,"buttons",[]),o(this,"canvas",void 0),""!=e&&(this.class_hms_button=e)}create_button(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const i=n.Utils.ce("span","",[],e);i.style.color="dodgerblue";let o=n.Utils.ce("button",this.class_hms_button,[i],"",{title:t});return o=n.Utils.decorate_menu_icon(o),console.log(e.length),e.length>2&&(o.style.fontSize="16px"),o}add_button(e){this.buttons.push(e)}install(){this.already_installed()?console.info("ボタンはすでに設置済みです。"):0!=this.buttons.length?this.put_buttons(this.buttons):console.info("ボタンが設定されていません。何もせずに終了します。")}set_canvas(e){this.canvas=e}get_hms(){const e=kintone.app.getHeaderMenuSpaceElement();if(null==e){const e="ボタン配置スペースが取得できませんでした。";throw console.error(e),new Error(e)}return e}already_installed(){return document.getElementsByClassName(this.class_hms_button).length>0}put_buttons(e){const t=void 0===this.canvas?this.get_hms():this.canvas;e.forEach((e=>{console.log(t),t.append(e)}))}get_header_element(e){const t=document.querySelectorAll(".recordlist-header-label-gaia");return Array.from(t).filter((t=>t.textContent==e))}}},"../lib/KintoneCommonUtils.ts/dist/index.js":function(e,t,i){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||o(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),n(i("../lib/KintoneCommonUtils.ts/dist/utils.js"),t),n(i("../lib/KintoneCommonUtils.ts/dist/button_installer.js"),t),n(i("../lib/KintoneCommonUtils.ts/dist/plugin_canvas.js"),t)},"../lib/KintoneCommonUtils.ts/dist/plugin_canvas.js":(e,t,i)=>{"use strict";function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.PluginCanvas=void 0;const n=i("../lib/KintoneCommonUtils.ts/dist/utils.js");i("../lib/KintoneCommonUtils.ts/node_modules/@shin-chan/kypes/src/index.js");class s{constructor(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;if(o(this,"id_island",void 0),o(this,"id_offcanvas",void 0),o(this,"title_offcanvas",void 0),o(this,"island",void 0),o(this,"enable_offcanvas",void 0),this.title_offcanvas=e,this.id_island="plugin_island_id_".concat(t),this.id_offcanvas="offcanvas_".concat(this.id_island),""==t){if(console.log("[".concat(this.constructor.name,"] オフキャンバスを使いません。")),null==i&&(i=kintone.app.getHeaderMenuSpaceElement()),null==i)throw new Error("kintone.app.HeaderMenuSpaceElement() を取得できませんでした。");return this.island=i,void(this.enable_offcanvas=!1)}this.enable_offcanvas=!0;const r=document.getElementById(this.id_island);if(r)console.log("[".concat(this.constructor.name,"] 既存のオフキャンバスを使用します。")),this.island=r;else{console.log("[".concat(this.constructor.name,"] オフキャンバスをID[").concat(this.id_island,"]で作成します。"));const e=(e=>{if(e)return e;{const e=n.Utils.ce("span","",[],"🎈");return e.style.cursor="pointer",e}})(s);e.style.color="dodgerblue";let t=n.Utils.ce("div","bbk-tool-icon-box",[e],"",{id:this.id_island,"data-bs-toggle":"offcanvas","aria-controls":this.id_offcanvas,"data-bs-target":"#".concat(this.id_offcanvas)});t=n.Utils.decorate_menu_icon(t),this.island=t,this.init_offcanvas()}}init_offcanvas(){const e=kintone.app.getHeaderMenuSpaceElement();e&&(e.appendChild(this.get_node()),e.appendChild(this.build_node_offcanvas()))}get_node(){return this.island}build_node_offcanvas(){return n.Utils.ce("div","offcanvas offcanvas-start",[n.Utils.ce("div","offcanvas-header",[n.Utils.ce("h5","offcanvas-title",[],this.title_offcanvas,{id:"".concat(this.id_offcanvas,"Label")}),n.Utils.ce("button","btn-close text-reset",[],"",{"data-bs-dismiss":"offcanvas","aria-label":"Close"})]),n.Utils.ce("div","offcanvas-body",[n.Utils.ce("div","mb-4",[],"ここから各種プラグインを呼び出せます。")],"",{id:"".concat(this.id_offcanvas,"-body")})],"",{tabindex:"-1",id:"".concat(this.id_offcanvas),"aria-labelledby":"".concat(this.id_offcanvas,"Label"),"data-bs-backdrop":"false"})}append(e){if(this.enable_offcanvas){const t=document.getElementById("".concat(this.id_offcanvas,"-body"));this.deal_dismiss_attribute(e),null==t||t.appendChild(e)}else this.island.append(e)}deal_dismiss_attribute(e){const t=Array.from(e.querySelectorAll(".".concat(s.CLASS_DISMISS)));console.log(t),t.length>0?t.map((e=>{e.setAttribute("data-bs-dismiss","offcanvas")})):e.setAttribute("data-bs-dismiss","offcanvas")}}o(s,"CLASS_DISMISS","offcanvas-dismiss"),t.PluginCanvas=s},"../lib/KintoneCommonUtils.ts/dist/utils.js":(e,t)=>{"use strict";function i(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;class o{static unique_properties(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const i=[];for(const o of Object.keys(e)){const n=e[o];(1==n.unique||t&&"RECORD_NUMBER"==n.type)&&i.push(n)}return i}static is_not_empty_string(e){return!o.is_empty_string(e)}static is_empty_string(e){return null==e||null==e||!(e.length>0)}static decorate_menu_icon(e){return e.style.height="48px",e.style.backgroundColor="#f7f9fa",e.style.fontSize="28px",e.style.border="1px solid #e3e7e8",e.style.display="inline",e.style.marginLeft="2px",e.style.marginRight="2px",e.style.verticalAlign="middle",e}static get_application_url(e){return"".concat(location.protocol,"//").concat(location.host,"/k/").concat(e)}static retrieve_errors(e){var t;let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const o=null==e||null===(t=e.error)||void 0===t?void 0:t.errors;if(null==o)return;let n=[];if(Object.keys(o).forEach((e=>{const t=o[e].messages.map((t=>"[".concat(e,"] ").concat(t)));n=n.concat(t)})),n.sort(),i>=0&&i<n.length){const e=n.length-i;n=n.splice(0,i),n.push("以下".concat(e,"件のエラーメッセージを省略しました。"))}return n}}i(o,"get_from",((e,t,i)=>e.hasOwnProperty(t)?e[t]:i)),i(o,"buildElement",(e=>{const t=e.tagName,i=e.className?e.className:"",n=e.childElements?e.childElements:[],s=e.textContent?e.textContent:"",r=e.attrs?e.attrs:{};return o.createElement(t,i,n,s,r)})),i(o,"createElement",(function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",n=arguments.length>4&&void 0!==arguments[4]?arguments[4]:void 0;const s=document.createElement(e);return s.className=t,s.textContent=o,i.length>0&&i.forEach((e=>{s.appendChild(e)})),n&&Object.entries(n).forEach((e=>{let[t,i]=e;s.setAttribute(t,i)})),s})),i(o,"ce",(function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:void 0;return o.createElement(e,t,i,n,s)})),i(o,"simpleDiv",(e=>o.createElement("div","",[],e))),i(o,"is_overlapped",(e=>o.overlapped(e).length>0)),i(o,"overlapped",(e=>{const t=e.filter(((e,t,i)=>i.indexOf(e)!==i.lastIndexOf(e)));return Array.from(new Set(t))})),t.Utils=o},"../lib/KintoneConfigBuilder.ts/dist/common.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSecretItem=t.FieldType=void 0,function(e){e[e.Dropdown=0]="Dropdown",e[e.Dropdown_FieldSelect=1]="Dropdown_FieldSelect",e[e.Radio=2]="Radio",e[e.Text=3]="Text",e[e.Number=4]="Number",e[e.MultilineText=5]="MultilineText",e[e.Checkbox=6]="Checkbox",e[e.IncrementalTable=7]="IncrementalTable",e[e.Label=8]="Label",e[e.Separator=9]="Separator"}(t.FieldType||(t.FieldType={})),t.isSecretItem=function(e){return"secret"in e}},"../lib/KintoneConfigBuilder.ts/dist/config-builder.js":(e,t,i)=>{"use strict";function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigBuilder=void 0,i("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");const n=i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=i("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),r=i("../lib/KintoneConfigBuilder.ts/dist/common.js"),l=i("../lib/KintoneConfigBuilder.ts/dist/field-builder.js"),a=i("../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js");class c{constructor(e,t){o(this,"props",void 0),o(this,"layout",void 0),o(this,"config",void 0),o(this,"field_builder",void 0),this.props=e,this.config=t,this.field_builder=new l.FieldBuilder(e)}static is_layout_info(e){return!!c.LAYOUT_PARTS.includes(e)}static is_includes_layout_info(e){return e.reduce(((e,t)=>(c.is_layout_info(t)&&(e=!0),e)),!1)}build_incremental_table(e,t){console.log({input_field:e}),console.log({saved_rows:t});const i=new a.IncrementalTableBuilder(e,t,this.field_builder).build(),o=e.table_cols.map((e=>{const t=n.Utils.createElement("span","title");t.textContent=e.header;return n.Utils.createElement("th","kintoneplugin-table-th",[t])}));o.push(n.Utils.createElement("th","kintoneplugin-table-th-blankspace"));const s=n.Utils.createElement("tr","",o),r=n.Utils.createElement("thead","",[s]),l=n.Utils.createElement("tbody","",i);return n.Utils.createElement("table","kintoneplugin-table ms-0",[r,l],"",{id:"table-".concat(e.code)})}static get_grand_tr(e){if(null==e)throw"ERROR: nullが渡されたため祖父要素を取得できません";const t=e,i=null==t?void 0:t.parentNode;return null==i?void 0:i.parentNode}static get_formparts(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const i={};for(const o in e){if(!e.hasOwnProperty(o))continue;const n=e[o],s=n.label,r=n.code,l=n.type;t.includes(l)&&(i[r]={code:r,label:s,option:l})}const o=Object.keys(i).map((e=>({key:e,value:i[e]}))).sort(((e,t)=>e.value.label.toString().toLowerCase()<t.value.label.toString().toLowerCase()?-1:e>t?1:0));return Object.assign({},...o.map((e=>({[e.key]:e.value}))))}static addOnChangeEvent(e){for(const t of e)t.addEventListener("change",(e=>{const t=e.target;if(null==t)return;const i=t[t.selectedIndex];let o=i.getAttribute("option");null==o&&(o="");let n=i.getAttribute("code");null==n&&(n="");const s=t.closest("tr");if(console.log(s),null==s)return;const r=s.getElementsByTagName("input");r[0].value=o,r[1].value=n}))}static build_fields_dropdown(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;const r=c.get_formparts(e,t),l=n.Utils.createElement("select","select-kintone-field");if(l.id=o,null!=s){const e=n.Utils.createElement("option");e.label=s,l.appendChild(e)}for(const e in r){const t=r[e],o=n.Utils.createElement("option");o.setAttribute("fieldcode",e),o.label=t.label,e==i&&o.setAttribute("selected",""),l.appendChild(o)}return n.Utils.createElement("div","",[n.Utils.createElement("div","kintoneplugin-select-outer",[n.Utils.createElement("div","kintoneplugin-select",[l])])])}static async build_fields_dropdown_other_app(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if(null==e||e==s.ConfigUtilities.DEFAULT_OPTION){const e=n.Utils.createElement("select","select-kintone-field");if(e.id=o,null!=r){const t=n.Utils.createElement("option");t.label=r,e.appendChild(t)}return n.Utils.createElement("div","",[n.Utils.createElement("div","kintoneplugin-select-outer",[n.Utils.createElement("div","kintoneplugin-select",[e])])])}const l=await kintone.api("/k/v1/app/form/fields","GET",{app:parseInt(e)});return this.build_fields_dropdown(l.properties,t,i,o,r)}static make_parts_block(e,t,i){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",s=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];console.log("make_parts_block()");const l=n.Utils.buildElement({tagName:"div",className:"mb-3",textContent:i}),a=n.Utils.buildElement({tagName:"div",className:"h4 mb-2",textContent:t});if(s){const e=n.Utils.buildElement({tagName:"span",className:"text-danger",textContent:"*"});a.appendChild(e)}if(r){const e=n.Utils.buildElement({tagName:"span",className:"badge bg-secondary rounded-pill ms-2",textContent:"secret"});a.appendChild(e)}return n.Utils.buildElement({tagName:"div",className:o+" ms-4 mt-4",childElements:[a,l,e]})}static addFieldSelectEvent(e,t,i){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:void 0;kintone.api("/k/v1/app/form/fields","GET",{app:i}).then((i=>{var s,r;const l=Object.keys(i.properties).map((e=>i.properties[e])).filter((e=>"SINGLE_LINE_TEXT"==e.type)).map((e=>({code:e.code,label:e.label,option:e.type}))).map((e=>{const t=n.Utils.createElement("option","");return t.label=e.label,t.setAttribute("code",e.code),t.setAttribute("option",e.option),e.code==o&&t.setAttribute("selected",""),t})),a=n.Utils.createElement("select","select-kintone-field",l);a.addEventListener("change",(e=>{var i;console.log({event:e});const o=e.target;if(null==o)return;const n=o[o.selectedIndex],s=c(n);null===(i=t.firstChild)||void 0===i||i.remove(),t.appendChild(s)}));const c=e=>{let t;e?(t=e.getAttribute("code"),null==t&&(t="")):t="";const i=n.Utils.createElement("input","kintoneplugin-input-text",[]);i.setAttribute("value",t),i.setAttribute("disabled","");return n.Utils.createElement("td","kintoneplugin-table-td-control",[n.Utils.createElement("div","kintoneplugin-table-td-control-value",[n.Utils.createElement("div","kintoneplugin-input-outer",[i])])])},d=n.Utils.createElement("div","kintoneplugin-table-td-control-value",[n.Utils.createElement("div","kintoneplugin-select-outer",[n.Utils.createElement("div","kintoneplugin-select",[a])])]);null===(s=e.firstChild)||void 0===s||s.remove(),e.appendChild(d),null===(r=t.firstChild)||void 0===r||r.remove();const u=a.item(a.selectedIndex),p=c(u);t.appendChild(p)}))}static set_switch_event(e,t,i){e.querySelectorAll('input[type="radio"]').forEach((e=>{e.addEventListener(t,i)}))}make_string_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"text";if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const i=e.code,o=this.get_saved_value(this.config,e);console.log({saved_value:o});const s="".concat(t,"-").concat(i),l=n.Utils.createElement("div","kintoneplugin-input-outer",[n.Utils.ce("input","kintoneplugin-input-text",[],"",{type:t,id:s,value:o})]),a="required"in(d=e)&&1==d.required;var d;const u=(e=>!!(0,r.isSecretItem)(e)&&("secret"in e&&1==e.secret))(e);return c.make_parts_block(l,e.label,e.desc,"",a,u)}get_saved_value(e,t){if((0,r.isSecretItem)(t)){const e=kintone.plugin.app.getProxyConfig(t.URL,t.method);console.log({proxy_config:e});let i=t.header;"Authorization Bearer"==i&&(i="Authorization");const o=t.data;if(null!=i){const t=e.headers[i];if(t.startsWith("Bearer")){return t.split(/ /)[1]}return t}if(null!=o)return e.data[o];throw new Error("get_saved_value(): 秘匿情報フィールドとして格納されている情報が不正です。(".concat(e,")"))}let i=e[t.code];return null==i&&(i=null!=t.default?t.default:""),i}make_multiline_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const t=e.code;let i=this.config[t];null==i&&(i=null!=e.default?e.default:""),console.log({saved_value:i});const o="multiline-".concat(t),s=n.Utils.createElement("div","kintoneplugin-input-outer",[n.Utils.ce("textarea","",[],i,{id:o,rows:"10",cols:"60"})]),r="required"in(l=e)&&1==l.required;var l;return c.make_parts_block(s,e.label,e.desc,"",r)}make_checkbox_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");if(null==e||null==e.accept)throw new Error("ConfigBuidler.make_checkbox_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");const t=e.code;let i=this.config[t];null==i&&(i=[]),console.log({saved_value:i});const o="".concat(t),s=e.accept.map((e=>{const t="".concat(o,"-").concat(e);console.log({saved_value:i}),console.log({box_value:e});const s={type:"checkbox",name:"checkbox",value:e,id:t};return i.includes(e)&&(s.checked="checked"),n.Utils.createElement("div","kintoneplugin-input-checkbox",[n.Utils.ce("span","kintoneplugin-input-checkbox-item",[n.Utils.ce("input","kintoneplugin-input-checkbox-item",[],"",s),n.Utils.ce("label","",[],e,{for:t})])])})),r="required"in(l=e)&&1==l.required;var l;return c.make_parts_block(n.Utils.ce("div","",s,"",{id:o}),e.label,e.desc,"",r)}make_radio_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const i=e.code;let o=this.config[i];if(console.log({saved_string:o}),null==o&&null!=e.default&&(o=e.default),null==e||null==e.accept)throw new Error("ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");const s=e.accept.map((e=>{const t="radio-".concat(i,"-").concat(e),s="radio-".concat(i),r=n.Utils.createElement("input");r.setAttribute("type","radio"),r.setAttribute("name",s),r.setAttribute("value",e),r.setAttribute("id",t),e==o&&r.setAttribute("checked","checked");const l=n.Utils.createElement("label","",[],e);return l.setAttribute("for",t),n.Utils.createElement("span","kintoneplugin-input-radio-item",[r,l])})),r=n.Utils.createElement("div","kintoneplugin-input-radio",s);r.id=i;const l="required"in(a=e)&&1==a.required;var a;return c.make_parts_block(r,e.label,e.desc,t,l)}make_dropdown_fieldselect_block(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";const i=[],o=[];if(null==e.accept)throw new Error("ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。");if(e.accept.forEach((e=>{c.is_layout_info(e)?o.push(e):i.push(e)})),null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");if(o.length>0&&null==this.layout)throw new Error("レイアウト情報をロードしていません。load_layout_info() を事前に呼び出してください。");if(o.length>0&&i.length>0)throw new Error("フォーム情報のフィールドとレイアウト情報のフィールドとが混在したドロップダウンは構築できません。");const n=e.code,s=this.config[n];let r;if(i.length>0)r=c.build_fields_dropdown(this.props,i,s,n,e.default);else{if(!(o.length>0))throw new Error("フォーム情報またはレイアウト情報が空欄で呼び出されました");r=c.build_fields_dropdown(this.layout,o,s,n,e.default)}const l="required"in(a=e)&&1==a.required;var a;return c.make_parts_block(r,e.label,e.desc,t,l)}make_incremental_table_block(e){if(null==this.config||null==this.props)throw new Error("インスタンスが初期化されていません");const t=e.code,i=this.config[t];console.log(i);const o=this.build_incremental_table(e,i);return c.make_parts_block(o,e.label,e.desc)}make_subtitle_block(e){const t=n.Utils.ce("div","display-6 mb-3",[],e.label),i=n.Utils.ce("div","ms-4 mt-2 mb-5",[],e.desc);return n.Utils.createElement("div","",[t,i])}async load_layout_info(){const e=await kintone.api("/k/v1/preview/app/form/layout","GET",{app:kintone.app.getId()});console.log(e);const t=e.layout.reduce(((e,t)=>{if("GROUP"==t.type){console.log("curr: ".concat(t.type));const i=t.layout.reduce(((e,t)=>{const i=t.fields.filter((e=>(console.log(e.type),"SPACER"==e.type)));return e=e.concat(i),console.log("row_prev: ".concat(e)),e}),[]);e.concat(i)}else e=e.concat(t.fields.filter((e=>"SPACER"==e.type)));return e}),[]);this.layout=t.reduce(((e,t)=>(t.code=t.elementId,t.label=t.elementId,e[t.code]=t,e)),{}),console.log(this.layout)}}o(c,"LAYOUT_PARTS",["SPACER"]),t.ConfigBuilder=c},"../lib/KintoneConfigBuilder.ts/dist/config-manager.js":(e,t,i)=>{"use strict";function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigManager=void 0,i("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");const n=i("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),s=i("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),r=i("../lib/KintoneConfigBuilder.ts/dist/common.js"),l=i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js");t.ConfigManager=class{constructor(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;o(this,"KEY_CONFIG","config"),o(this,"setting_input",void 0),o(this,"config",{}),o(this,"hooks",{});const n=kintone.plugin.app.getConfig(e);this.set_config(n),console.log(this.config),this.setting_input=t,i&&this.set_preference(i)}set_preference(e){const t=document.getElementById("plugin_title");t&&(t.textContent=e.title);const i=document.getElementById("plugin_description");i&&(i.textContent=e.description)}build(){kintone.api("/k/v1/preview/app/form/fields","GET",{app:kintone.app.getId()}).then((async e=>{const t=this.make_setting_fields(e.properties),i=this.make_button_submit(),o=this.make_button_cancel(),n=(async()=>{const e=l.Utils.createElement("form","",await t);return e.id="form_settings",e})(),s=document.getElementById("config_body");null==s||s.appendChild(await n);const r=l.Utils.createElement("div","mt-5",[o,i]);null==s||s.appendChild(r)})).then((e=>{this.call_target_event("load")})).catch((e=>{throw e}))}async call_target_event(e){const t=this.hooks[e];if(null!=t)for(const e of t)null!=e&&(console.log({func:e}),await e());else console.info("イベント[".concat(e,"]は未登録です。"))}layout_inputs(e,t){return t.map((t=>this.make_paragraph(e,t)))}make_paragraph(e,t){switch(t.type){case r.FieldType.Text:return e.make_string_block(t);case r.FieldType.MultilineText:return e.make_multiline_block(t);case r.FieldType.Radio:return e.make_radio_block(t);case r.FieldType.Number:return e.make_string_block(t,"number");case r.FieldType.Checkbox:return e.make_checkbox_block(t);case r.FieldType.IncrementalTable:return e.make_incremental_table_block(t);case r.FieldType.Label:return e.make_subtitle_block(t);case r.FieldType.Separator:return l.Utils.createElement("div","mt-5 bg-info");case r.FieldType.Dropdown_FieldSelect:if(!("accept"in t))throw new Error("プロパティ accept が必要です。config/settings.ts の設定を見直してください。");return e.make_dropdown_fieldselect_block(t);default:throw new Error("未実装のFieldTypeを要求しています。".concat(t.type," を実装してください。"))}}set_config(e){const t=l.Utils.get_from(e,this.KEY_CONFIG,"");""==t?console.info("設定値がありません。初期値で開始します。"):this.config=JSON.parse(t)}get_config(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;if(null==e)return this.config;if(e in this.config)return this.config[e];throw new Error("未定義または未設定の設定キーが指定されました: [".concat(e,"]"))}async make_setting_fields(e){const t=new s.ConfigBuilder(e,this.config);return await t.load_layout_info(),this.layout_inputs(t,this.setting_input)}isSecretItem(e){return"secret"in e}secret_parameters(e){const t=this.setting_input.filter((e=>(0,r.isSecretItem)(e)));return this.make_proxy_params(t,e)}make_proxy_params(e,t){const i=e.reduce(((e,t)=>{const i=t.method+":"+t.URL;return null==e[i]&&(e[i]=[]),e[i].push(t),e}),{}),o=Object.keys(i).reduce(((e,o)=>{const n=i[o];console.log({secrets:n});const s=e=>{const i=t.get_text_value(e.code);if("required"in e||(e.required=!1),1==e.required&&(null==i||null==i||""==i))throw new Error("必須の項目[".concat(e.label,"]が未記入です。"));return null==i||null==i?"":i},r=n.filter((e=>"header"in e)).reduce(((e,t)=>{const i=s(t);if(null==t.header)throw new Error("秘匿設定のheader要素が未定義です。");return"Authorization Bearer"==t.header?e.Authorization="Bearer "+i:e[t.header]=i,e}),{}),l=n.filter((e=>"data"in e)).reduce(((e,t)=>{const i=s(t);if(null==t.data)throw new Error("秘匿設定のdata要素が未定義です");return e[t.data]=i,e}),{}),a={URL:n[0].URL,method:n[0].method,headers:r,data:l};return e.push(a),e}),[]);return o}store_parameters(e){const t={};return this.setting_input.forEach((i=>{if(i.type==r.FieldType.Label||i.type==r.FieldType.Separator)return;if("secret"in i&&1==i.secret)return;const o=i.code,n=i.required;console.log({code:o});const s=e.get_selected(o,i.type);if(s)t[o]=s;else{if(n){const e="必須の設定項目 [".concat(i.label,"] が未設定です(").concat(o,")");throw console.error(e),new Error(e)}t[o]=""}})),console.log(t),t}make_button_submit(){const e=l.Utils.createElement("button","kintoneplugin-button-dialog-ok");return e.setAttribute("type","button"),e.textContent="適用",e.addEventListener("keydown",(e=>{if(e.isComposing||"Enter"==e.code)return console.info("適用ボタンのenterを無効化しました。"),!1})),e.addEventListener("click",(async e=>{e.preventDefault();const t=document.getElementById("form_settings");if(null==t)throw"ERROR: フォーム要素を取得できませんでした。";await this.call_target_event("submit").catch((e=>{const t="⛔ 設定の保存でエラーが発生しました。（".concat(e,"）");throw console.log(t),alert(t),new Error(t)}));const i=new n.ConfigUtilities(t);let o,s;try{o=this.secret_parameters(i),console.log({proxy_params:o})}catch(t){console.log("call 6");const i="⛔ 設定値の保存でエラーが発生しました。設定値を見直してください。（".concat(t,"）");return alert(i),console.log("call 7"),e}o.forEach((async e=>{console.log({param:e});const t=kintone.plugin.app.setProxyConfig(e.URL,e.method,e.headers,e.data,(()=>{console.log({result:t})}))}));try{console.log("call 1"),s=this.store_parameters(i),console.log("call 2"),setTimeout((()=>{console.log("call 3");const e=JSON.stringify(s);console.log(e);const t={};t[this.KEY_CONFIG]=e,console.log("call 4"),kintone.plugin.app.setConfig(t)}),200)}catch(t){return console.log("call 6"),alert("⛔ 設定値の保存でエラーが発生しました。設定値を見直してください。（".concat(t,"）")),console.log("call 7"),e}})),console.log("call 8"),e}make_button_cancel(){const e=l.Utils.createElement("button","js-cancel-button kintoneplugin-button-dialog-cancel");return e.textContent="キャンセル",e.addEventListener("click",(function(e){console.log(e),window.location.href="../../"+kintone.app.getId()+"/plugin/"})),e}add_hook(e,t){var i;null==this.hooks[e]&&(this.hooks[e]=[]),null===(i=this.hooks[e])||void 0===i||i.push(t)}}},"../lib/KintoneConfigBuilder.ts/dist/config-utilities.js":(e,t,i)=>{"use strict";function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.ConfigUtilities=void 0;const n=i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=i("../lib/KintoneConfigBuilder.ts/dist/common.js");class r{constructor(e){o(this,"config_form",void 0),o(this,"whole_selected_field_codes",void 0),o(this,"add_selected_field_codes",(e=>{this.whole_selected_field_codes.push(e)})),o(this,"get_selected_fieldcode",(e=>{console.log("[ConfigTinker] get_selected_fieldcode(): ".concat(e));const t=document.getElementById(e);if(-1==t.selectedIndex)return"";if(t.options[t.selectedIndex].label==r.DEFAULT_OPTION)return"";const i=t.selectedOptions[0].getAttribute("fieldcode");if(null==i)throw new Error("ノード[ ".concat(e," ]はフィールド選択ではありません。"));return i})),o(this,"get_selected_label",(e=>{console.log("[ConfigTinker] get_selected_label(): ".concat(e));const t=document.getElementById(e);if(null==t)throw new Error("ConfigUtilities.get_selected_label(): 指定のID'".concat(e,"'が null でした。"));return-1==t.selectedIndex?"":t.selectedOptions[0].label})),o(this,"get_checked_boxes",(e=>{console.log("[ConfigTinker] get_checked_boxes(): ".concat(e));const t=document.querySelectorAll('[id^="'.concat(e,'-"]'));if(0==t.length)throw new Error("ConfigUtilities.get_checked_boxes(): 指定のID'".concat(e,"-'から始まるチェックボックスが見つかりませんでした。"));const i=Array.from(t).reduce(((e,t)=>(t.checked&&e.push(t.value),e)),[]);return console.log({checked_labels:i}),i})),this.config_form=e,this.whole_selected_field_codes=[]}is_overlapped(e){return n.Utils.is_overlapped(this.overlapped(e))}overlapped(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0;return null!=e&&this.whole_selected_field_codes.concat(e),n.Utils.overlapped(this.whole_selected_field_codes)}clear_selected_field_labels(){this.whole_selected_field_codes=[]}get_selected_radio(e){const t="radio-".concat(e);console.log("[ConfigTinker] get_selected_radio(): ".concat(t));const i=document.getElementsByName(t),o=i.length;for(let e=0;e<o;e++){const t=i[e];if(1==t.checked)return t.value}return""}get_text_value(e){const t="text-".concat(e);console.log("[ConfigTinker] get_text_value(): ".concat(t));return document.getElementById(t).value}get_multilinetext_value(e){const t="multiline-".concat(e);console.log("[ConfigTinker] get_multiline_value(): ".concat(t));return document.getElementById(t).value}get_number_value(e){const t="number-".concat(e);console.log("[ConfigTinker] get_number_value(): ".concat(t));return document.getElementById(t).value}get_incremental_table_values(e){const t="table-".concat(e),i=document.getElementById(t);if(console.log(t),console.log(i),null==i)throw new Error("指定したテーブルが見つかりません。(id: ".concat(t,")"));return this.abstruct_from_incremental_table(i)}abstruct_from_incremental_table(e){const t=Array.from(e.rows).filter((e=>{var t;return"TH"==(null===(t=e.firstChild)||void 0===t?void 0:t.nodeName)})).map((e=>{const t=Array.from(e.cells).filter((e=>""!=e.innerText)).map((e=>e.innerText));return console.log(t),t}))[0];console.log({headers:t});const i=Array.from(e.rows).filter((e=>{var t;return"TH"!=(null===(t=e.firstChild)||void 0===t?void 0:t.nodeName)})).map((e=>Array.from(e.cells).filter((e=>{const t=e.getElementsByClassName("kintoneplugin-input-text")[0],i=e.getElementsByClassName("select-kintone-field")[0],o=e.getElementsByClassName("kintoneplugin-input-checkbox-item");return void 0!==t||void 0!==i||void 0!==o})).map((t=>{const i=t.getElementsByClassName("kintoneplugin-input-text")[0];if(console.log({input_element:i}),null!=i)return i.value;const o=t.getElementsByClassName("select-kintone-field")[0];if(console.log({selected_element:o}),null!=o){const e=o.selectedIndex;console.log({index:e});const t=o[e];if("fieldcode"in o[e].attributes){console.log("selected_element fieldcode: ".concat(t.getAttribute("fieldcode")));const e=t.getAttribute("fieldcode");if(null!=e)return e}return o[e].label}console.log({cell:t});const n=t.getElementsByClassName("kintoneplugin-input-checkbox");if(console.log({checkbox_items:n}),null!=n)return Array.from(n).filter((e=>e.childNodes[0].childNodes[0].checked)).map((e=>{if(console.log({item:e}),null==e.textContent)throw new Error("ラベルのないチェックボックスが定義されています。");return e.textContent}));throw new Error("未対応のテーブルセル ".concat(e," が渡されました。"))}))));console.log({values:i});const o=i.filter((e=>e.length>0)).filter((e=>e.filter((e=>e.length>0)).length>0));if(console.log(o),0==o.length)return null;const n=i.map((e=>e.reduce(((e,i,o)=>(e[t[o]]=i,e)),{})));return console.log({table_values:n}),n}get_selected(e,t){switch(t){case s.FieldType.Dropdown:return this.get_selected_label(e);case s.FieldType.Checkbox:return this.get_checked_boxes(e);case s.FieldType.Radio:return this.get_selected_radio(e);case s.FieldType.Dropdown_FieldSelect:return this.get_selected_fieldcode(e);case s.FieldType.Text:return this.get_text_value(e);case s.FieldType.Number:return this.get_number_value(e);case s.FieldType.MultilineText:return this.get_multilinetext_value(e);case s.FieldType.IncrementalTable:return this.get_incremental_table_values(e)}throw new Error("get_selected(): 不明なフィールドタイプが渡されました (field_type: ".concat(t,")"))}}o(r,"DEFAULT_OPTION","----"),t.ConfigUtilities=r},"../lib/KintoneConfigBuilder.ts/dist/field-builder.js":(e,t,i)=>{"use strict";function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.FieldBuilder=void 0;const n=i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=i("../lib/KintoneConfigBuilder.ts/dist/common.js"),r=i("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),l=i("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js");t.FieldBuilder=class{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:l.ConfigUtilities.DEFAULT_OPTION;o(this,"props",void 0),o(this,"empty_label",void 0),o(this,"build_textcell",(e=>(e=void 0===e?"":e,n.Utils.createElement("div","kintoneplugin-input-outer",[n.Utils.createElement("input","kintoneplugin-input-text",[],void 0,{type:"text",value:e})])))),o(this,"build_checkbox_cell",((e,t,i,o)=>{const s=t.accept.map((t=>{const s="".concat(i,"-").concat(o,"-").concat(t);e=void 0===e?[]:e,console.log({box_value:t}),console.log({preset:e});const r=e.includes(t)?"checked":"",l=n.Utils.ce("input","",[],"",{type:"checkbox",name:"checkbox",value:t,id:s});return""!=r&&l.setAttribute("checked",r),n.Utils.ce("div","kintoneplugin-input-checkbox",[n.Utils.createElement("span","kintoneplugin-input-checkbox-item",[l,n.Utils.ce("label","",[],t,{for:s})])])}));return n.Utils.createElement("div","",s)})),o(this,"build_dropdown_cell",((e,t)=>{if(null==t||!("accept"in t))throw new Error("選択肢情報としてundefinedが渡されました。");e=void 0===e?"":e;const i=n.Utils.createElement("select","select-kintone-field");if(null!=t.empty_label){const e=n.Utils.createElement("option");e.label=t.empty_label,i.appendChild(e)}return t.accept.forEach((t=>{const o=n.Utils.createElement("option");o.label=t,t==e&&o.setAttribute("selected",""),i.appendChild(o)})),n.Utils.createElement("div","",[n.Utils.createElement("div","kintoneplugin-select-outer",[n.Utils.createElement("div","kintoneplugin-select",[i])])])})),o(this,"build_dropdown_fieldselect_cell",((e,t)=>{if(null==t||!("accept"in t))throw new Error("選択肢情報としてundefinedが渡されました。");const i=r.ConfigBuilder.get_formparts(this.props,t.accept),o=n.Utils.createElement("select","select-kintone-field");o.id=void 0===e?"":e;const s=n.Utils.createElement("option");s.label=this.empty_label,o.appendChild(s);const l=!!t.footnote&&t.footnote;for(const t in i){const s=i[t],r=n.Utils.createElement("option");r.setAttribute("fieldcode",t),r.label=l?s.label+" [".concat(t,"]"):s.label,t==e&&r.setAttribute("selected",""),o.appendChild(r)}return n.Utils.createElement("div","",[n.Utils.createElement("div","kintoneplugin-select-outer",[n.Utils.createElement("div","kintoneplugin-select",[o])])])})),this.props=e,this.empty_label=t}build_table_cell(e,t,i,o){if("accept"in t)switch(t.type){case s.FieldType.Checkbox:return this.build_checkbox_cell(i,t,e,o);case s.FieldType.Dropdown:return this.build_dropdown_cell(i,t);case s.FieldType.Dropdown_FieldSelect:return this.build_dropdown_fieldselect_cell(i,t)}else if(t.type===s.FieldType.Text)return this.build_textcell(i);throw new Error("未定義のFieldTypeが渡されました。FieldTypeに".concat(t.type," を実装してください。"))}}},"../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js":(e,t,i)=>{"use strict";function o(e,t,i){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!=typeof o)return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}Object.defineProperty(t,"__esModule",{value:!0}),t.IncrementalTableBuilder=void 0;const n=i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js"),s=i("../lib/KintoneConfigBuilder.ts/dist/config-builder.js");t.IncrementalTableBuilder=class{constructor(e,t,i){o(this,"table_conf",void 0),o(this,"saved_rows",void 0),o(this,"table_rows",void 0),o(this,"field_builder",void 0),o(this,"rows_count",void 0),this.table_conf=e,this.saved_rows=t,this.field_builder=i,this.table_rows=[],this.rows_count=0}build(){const e=this.table_conf.table_cols,t=e.length-3;return null==this.saved_rows||0==Object.keys(this.saved_rows).length?this.table_rows.push(this.build_table_row(0,e,void 0,t)):this.saved_rows.forEach(((i,o)=>{const n=this.build_table_row(o,e,i,t);this.table_rows.push(n)})),this.table_rows}build_table_row(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;console.log({table_cols:t}),console.log({saved_data:i});const s=[];for(let o=0;o<t.length;o++){const r=t[o],l=null==i?void 0:i[r.header];console.log({value:l});const a=this.field_builder.build_table_cell(this.table_conf.code,r,l,e);s.push(n.Utils.ce("td","",[n.Utils.ce("div","kintoneplugin-table-td-control",[n.Utils.ce("div","kintoneplugin-table-td-control-value",[a])])]))}const r=this.create_button_row_add(t),l=this.create_button_row_remove();console.log({spacer_cols:o}),o=o<0?0:o;const a=[...Array(o)].map((()=>n.Utils.createElement("td","td_spacer"))),c=[...s,...a,n.Utils.createElement("td","kintoneplugin-table-td-operation",[r,l])];this.rows_count=s.length;return n.Utils.createElement("tr","",c)}get_table_rows_count(){const e="table-".concat(this.table_conf.code),t=document.getElementById(e);if(t)return t.getElementsByTagName("tr").length;throw new Error("指定したテーブルID ".concat(e," が存在しません。"))}create_button_row_add(e){const t=document.createElement("button");return t.className="kintoneplugin-button-add-row-image",t.setAttribute("type","button"),t.setAttribute("title","Add row"),t.addEventListener("click",(t=>{console.log("テーブルを一行追加する".concat(t));const i=s.ConfigBuilder.get_grand_tr(t.target),o=null==i?void 0:i.parentNode;if(null==i||null==o)throw"ERROR: 祖先のtbodyを取得できませんでした。";if(null==(null==t?void 0:t.target))return;const n=i.children.length-1-e.length,r=this.get_table_rows_count()+1,l=this.build_table_row(r,e,void 0,n);o.insertBefore(l,i.nextElementSibling)})),t}create_button_row_remove(){const e=document.createElement("button");return e.className="kintoneplugin-button-remove-row-image",e.setAttribute("type","button"),e.setAttribute("title","Delete this row"),e.addEventListener("click",(e=>{var t,i;const o=s.ConfigBuilder.get_grand_tr(e.target);1!=(null===(t=o.parentNode)||void 0===t?void 0:t.childNodes.length)&&(null===(i=o.parentNode)||void 0===i||i.removeChild(o),console.log("テーブルを一行削除する".concat(e)))})),e}}},"../lib/KintoneConfigBuilder.ts/dist/index.js":function(e,t,i){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||o(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),n(i("../lib/KintoneConfigBuilder.ts/dist/config-builder.js"),t),n(i("../lib/KintoneConfigBuilder.ts/dist/config-manager.js"),t),n(i("../lib/KintoneConfigBuilder.ts/dist/config-utilities.js"),t),n(i("../lib/KintoneConfigBuilder.ts/dist/field-builder.js"),t),n(i("../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js"),t),n(i("../lib/KintoneConfigBuilder.ts/dist/common.js"),t)},"./node_modules/bootstrap/dist/js/bootstrap.esm.js":(e,t,i)=>{"use strict";i.r(t),i.d(t,{Alert:()=>J,Button:()=>ee,Carousel:()=>Le,Collapse:()=>Ve,Dropdown:()=>bt,Modal:()=>Zt,Offcanvas:()=>gi,Popover:()=>Fi,ScrollSpy:()=>Qi,Tab:()=>bo,Toast:()=>Lo,Tooltip:()=>Bi});var o=i("./node_modules/@popperjs/core/lib/index.js"),n=i("./node_modules/@popperjs/core/lib/popper.js");const s="transitionend",r=e=>{let t=e.getAttribute("data-bs-target");if(!t||"#"===t){let i=e.getAttribute("href");if(!i||!i.includes("#")&&!i.startsWith("."))return null;i.includes("#")&&!i.startsWith("#")&&(i=`#${i.split("#")[1]}`),t=i&&"#"!==i?i.trim():null}return t},l=e=>{const t=r(e);return t&&document.querySelector(t)?t:null},a=e=>{const t=r(e);return t?document.querySelector(t):null},c=e=>{e.dispatchEvent(new Event(s))},d=e=>!(!e||"object"!=typeof e)&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType),u=e=>d(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?document.querySelector(e):null,p=e=>{if(!d(e)||0===e.getClientRects().length)return!1;const t="visible"===getComputedStyle(e).getPropertyValue("visibility"),i=e.closest("details:not([open])");if(!i)return t;if(i!==e){const t=e.closest("summary");if(t&&t.parentNode!==i)return!1;if(null===t)return!1}return t},f=e=>!e||e.nodeType!==Node.ELEMENT_NODE||(!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))),h=e=>{if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){const t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?h(e.parentNode):null},m=()=>{},_=e=>{e.offsetHeight},g=()=>window.jQuery&&!document.body.hasAttribute("data-bs-no-jquery")?window.jQuery:null,b=[],v=()=>"rtl"===document.documentElement.dir,y=e=>{var t;t=()=>{const t=g();if(t){const i=e.NAME,o=t.fn[i];t.fn[i]=e.jQueryInterface,t.fn[i].Constructor=e,t.fn[i].noConflict=()=>(t.fn[i]=o,e.jQueryInterface)}},"loading"===document.readyState?(b.length||document.addEventListener("DOMContentLoaded",(()=>{for(const e of b)e()})),b.push(t)):t()},j=e=>{"function"==typeof e&&e()},w=(e,t,i=!0)=>{if(!i)return void j(e);const o=(e=>{if(!e)return 0;let{transitionDuration:t,transitionDelay:i}=window.getComputedStyle(e);const o=Number.parseFloat(t),n=Number.parseFloat(i);return o||n?(t=t.split(",")[0],i=i.split(",")[0],1e3*(Number.parseFloat(t)+Number.parseFloat(i))):0})(t)+5;let n=!1;const r=({target:i})=>{i===t&&(n=!0,t.removeEventListener(s,r),j(e))};t.addEventListener(s,r),setTimeout((()=>{n||c(t)}),o)},E=(e,t,i,o)=>{const n=e.length;let s=e.indexOf(t);return-1===s?!i&&o?e[n-1]:e[0]:(s+=i?1:-1,o&&(s=(s+n)%n),e[Math.max(0,Math.min(s,n-1))])},C=/[^.]*(?=\..*)\.|.*/,T=/\..*/,k=/::\d+$/,A={};let O=1;const S={mouseenter:"mouseover",mouseleave:"mouseout"},x=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function P(e,t){return t&&`${t}::${O++}`||e.uidEvent||O++}function N(e){const t=P(e);return e.uidEvent=t,A[t]=A[t]||{},A[t]}function L(e,t,i=null){return Object.values(e).find((e=>e.callable===t&&e.delegationSelector===i))}function I(e,t,i){const o="string"==typeof t,n=o?i:t||i;let s=U(e);return x.has(s)||(s=e),[o,n,s]}function D(e,t,i,o,n){if("string"!=typeof t||!e)return;let[s,r,l]=I(t,i,o);if(t in S){const e=e=>function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)};r=e(r)}const a=N(e),c=a[l]||(a[l]={}),d=L(c,r,s?i:null);if(d)return void(d.oneOff=d.oneOff&&n);const u=P(r,t.replace(C,"")),p=s?function(e,t,i){return function o(n){const s=e.querySelectorAll(t);for(let{target:r}=n;r&&r!==this;r=r.parentNode)for(const l of s)if(l===r)return F(n,{delegateTarget:r}),o.oneOff&&$.off(e,n.type,t,i),i.apply(r,[n])}}(e,i,r):function(e,t){return function i(o){return F(o,{delegateTarget:e}),i.oneOff&&$.off(e,o.type,t),t.apply(e,[o])}}(e,r);p.delegationSelector=s?i:null,p.callable=r,p.oneOff=n,p.uidEvent=u,c[u]=p,e.addEventListener(l,p,s)}function M(e,t,i,o,n){const s=L(t[i],o,n);s&&(e.removeEventListener(i,s,Boolean(n)),delete t[i][s.uidEvent])}function B(e,t,i,o){const n=t[i]||{};for(const s of Object.keys(n))if(s.includes(o)){const o=n[s];M(e,t,i,o.callable,o.delegationSelector)}}function U(e){return e=e.replace(T,""),S[e]||e}const $={on(e,t,i,o){D(e,t,i,o,!1)},one(e,t,i,o){D(e,t,i,o,!0)},off(e,t,i,o){if("string"!=typeof t||!e)return;const[n,s,r]=I(t,i,o),l=r!==t,a=N(e),c=a[r]||{},d=t.startsWith(".");if(void 0===s){if(d)for(const i of Object.keys(a))B(e,a,i,t.slice(1));for(const i of Object.keys(c)){const o=i.replace(k,"");if(!l||t.includes(o)){const t=c[i];M(e,a,r,t.callable,t.delegationSelector)}}}else{if(!Object.keys(c).length)return;M(e,a,r,s,n?i:null)}},trigger(e,t,i){if("string"!=typeof t||!e)return null;const o=g();let n=null,s=!0,r=!0,l=!1;t!==U(t)&&o&&(n=o.Event(t,i),o(e).trigger(n),s=!n.isPropagationStopped(),r=!n.isImmediatePropagationStopped(),l=n.isDefaultPrevented());let a=new Event(t,{bubbles:s,cancelable:!0});return a=F(a,i),l&&a.preventDefault(),r&&e.dispatchEvent(a),a.defaultPrevented&&n&&n.preventDefault(),a}};function F(e,t){for(const[i,o]of Object.entries(t||{}))try{e[i]=o}catch(t){Object.defineProperty(e,i,{configurable:!0,get:()=>o})}return e}const R=new Map,q={set(e,t,i){R.has(e)||R.set(e,new Map);const o=R.get(e);o.has(t)||0===o.size?o.set(t,i):console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(o.keys())[0]}.`)},get:(e,t)=>R.has(e)&&R.get(e).get(t)||null,remove(e,t){if(!R.has(e))return;const i=R.get(e);i.delete(t),0===i.size&&R.delete(e)}};function K(e){if("true"===e)return!0;if("false"===e)return!1;if(e===Number(e).toString())return Number(e);if(""===e||"null"===e)return null;if("string"!=typeof e)return e;try{return JSON.parse(decodeURIComponent(e))}catch(t){return e}}function H(e){return e.replace(/[A-Z]/g,(e=>`-${e.toLowerCase()}`))}const W={setDataAttribute(e,t,i){e.setAttribute(`data-bs-${H(t)}`,i)},removeDataAttribute(e,t){e.removeAttribute(`data-bs-${H(t)}`)},getDataAttributes(e){if(!e)return{};const t={},i=Object.keys(e.dataset).filter((e=>e.startsWith("bs")&&!e.startsWith("bsConfig")));for(const o of i){let i=o.replace(/^bs/,"");i=i.charAt(0).toLowerCase()+i.slice(1,i.length),t[i]=K(e.dataset[o])}return t},getDataAttribute:(e,t)=>K(e.getAttribute(`data-bs-${H(t)}`))};class z{static get Default(){return{}}static get DefaultType(){return{}}static get NAME(){throw new Error('You have to implement the static method "NAME", for each component!')}_getConfig(e){return e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e}_mergeConfigObj(e,t){const i=d(t)?W.getDataAttribute(t,"config"):{};return{...this.constructor.Default,..."object"==typeof i?i:{},...d(t)?W.getDataAttributes(t):{},..."object"==typeof e?e:{}}}_typeCheckConfig(e,t=this.constructor.DefaultType){for(const o of Object.keys(t)){const n=t[o],s=e[o],r=d(s)?"element":null==(i=s)?`${i}`:Object.prototype.toString.call(i).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(n).test(r))throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${o}" provided type "${r}" but expected type "${n}".`)}var i}}class V extends z{constructor(e,t){super(),(e=u(e))&&(this._element=e,this._config=this._getConfig(t),q.set(this._element,this.constructor.DATA_KEY,this))}dispose(){q.remove(this._element,this.constructor.DATA_KEY),$.off(this._element,this.constructor.EVENT_KEY);for(const e of Object.getOwnPropertyNames(this))this[e]=null}_queueCallback(e,t,i=!0){w(e,t,i)}_getConfig(e){return e=this._mergeConfigObj(e,this._element),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}static getInstance(e){return q.get(u(e),this.DATA_KEY)}static getOrCreateInstance(e,t={}){return this.getInstance(e)||new this(e,"object"==typeof t?t:null)}static get VERSION(){return"5.2.3"}static get DATA_KEY(){return`bs.${this.NAME}`}static get EVENT_KEY(){return`.${this.DATA_KEY}`}static eventName(e){return`${e}${this.EVENT_KEY}`}}const G=(e,t="hide")=>{const i=`click.dismiss${e.EVENT_KEY}`,o=e.NAME;$.on(document,i,`[data-bs-dismiss="${o}"]`,(function(i){if(["A","AREA"].includes(this.tagName)&&i.preventDefault(),f(this))return;const n=a(this)||this.closest(`.${o}`);e.getOrCreateInstance(n)[t]()}))},X=".bs.alert",Y=`close${X}`,Q=`closed${X}`;class J extends V{static get NAME(){return"alert"}close(){if($.trigger(this._element,Y).defaultPrevented)return;this._element.classList.remove("show");const e=this._element.classList.contains("fade");this._queueCallback((()=>this._destroyElement()),this._element,e)}_destroyElement(){this._element.remove(),$.trigger(this._element,Q),this.dispose()}static jQueryInterface(e){return this.each((function(){const t=J.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}G(J,"close"),y(J);const Z='[data-bs-toggle="button"]';class ee extends V{static get NAME(){return"button"}toggle(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}static jQueryInterface(e){return this.each((function(){const t=ee.getOrCreateInstance(this);"toggle"===e&&t[e]()}))}}$.on(document,"click.bs.button.data-api",Z,(e=>{e.preventDefault();const t=e.target.closest(Z);ee.getOrCreateInstance(t).toggle()})),y(ee);const te={find:(e,t=document.documentElement)=>[].concat(...Element.prototype.querySelectorAll.call(t,e)),findOne:(e,t=document.documentElement)=>Element.prototype.querySelector.call(t,e),children:(e,t)=>[].concat(...e.children).filter((e=>e.matches(t))),parents(e,t){const i=[];let o=e.parentNode.closest(t);for(;o;)i.push(o),o=o.parentNode.closest(t);return i},prev(e,t){let i=e.previousElementSibling;for(;i;){if(i.matches(t))return[i];i=i.previousElementSibling}return[]},next(e,t){let i=e.nextElementSibling;for(;i;){if(i.matches(t))return[i];i=i.nextElementSibling}return[]},focusableChildren(e){const t=["a","button","input","textarea","select","details","[tabindex]",'[contenteditable="true"]'].map((e=>`${e}:not([tabindex^="-"])`)).join(",");return this.find(t,e).filter((e=>!f(e)&&p(e)))}},ie=".bs.swipe",oe=`touchstart${ie}`,ne=`touchmove${ie}`,se=`touchend${ie}`,re=`pointerdown${ie}`,le=`pointerup${ie}`,ae={endCallback:null,leftCallback:null,rightCallback:null},ce={endCallback:"(function|null)",leftCallback:"(function|null)",rightCallback:"(function|null)"};class de extends z{constructor(e,t){super(),this._element=e,e&&de.isSupported()&&(this._config=this._getConfig(t),this._deltaX=0,this._supportPointerEvents=Boolean(window.PointerEvent),this._initEvents())}static get Default(){return ae}static get DefaultType(){return ce}static get NAME(){return"swipe"}dispose(){$.off(this._element,ie)}_start(e){this._supportPointerEvents?this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX):this._deltaX=e.touches[0].clientX}_end(e){this._eventIsPointerPenTouch(e)&&(this._deltaX=e.clientX-this._deltaX),this._handleSwipe(),j(this._config.endCallback)}_move(e){this._deltaX=e.touches&&e.touches.length>1?0:e.touches[0].clientX-this._deltaX}_handleSwipe(){const e=Math.abs(this._deltaX);if(e<=40)return;const t=e/this._deltaX;this._deltaX=0,t&&j(t>0?this._config.rightCallback:this._config.leftCallback)}_initEvents(){this._supportPointerEvents?($.on(this._element,re,(e=>this._start(e))),$.on(this._element,le,(e=>this._end(e))),this._element.classList.add("pointer-event")):($.on(this._element,oe,(e=>this._start(e))),$.on(this._element,ne,(e=>this._move(e))),$.on(this._element,se,(e=>this._end(e))))}_eventIsPointerPenTouch(e){return this._supportPointerEvents&&("pen"===e.pointerType||"touch"===e.pointerType)}static isSupported(){return"ontouchstart"in document.documentElement||navigator.maxTouchPoints>0}}const ue=".bs.carousel",pe=".data-api",fe="next",he="prev",me="left",_e="right",ge=`slide${ue}`,be=`slid${ue}`,ve=`keydown${ue}`,ye=`mouseenter${ue}`,je=`mouseleave${ue}`,we=`dragstart${ue}`,Ee=`load${ue}${pe}`,Ce=`click${ue}${pe}`,Te="carousel",ke="active",Ae=".active",Oe=".carousel-item",Se=Ae+Oe,xe={ArrowLeft:_e,ArrowRight:me},Pe={interval:5e3,keyboard:!0,pause:"hover",ride:!1,touch:!0,wrap:!0},Ne={interval:"(number|boolean)",keyboard:"boolean",pause:"(string|boolean)",ride:"(boolean|string)",touch:"boolean",wrap:"boolean"};class Le extends V{constructor(e,t){super(e,t),this._interval=null,this._activeElement=null,this._isSliding=!1,this.touchTimeout=null,this._swipeHelper=null,this._indicatorsElement=te.findOne(".carousel-indicators",this._element),this._addEventListeners(),this._config.ride===Te&&this.cycle()}static get Default(){return Pe}static get DefaultType(){return Ne}static get NAME(){return"carousel"}next(){this._slide(fe)}nextWhenVisible(){!document.hidden&&p(this._element)&&this.next()}prev(){this._slide(he)}pause(){this._isSliding&&c(this._element),this._clearInterval()}cycle(){this._clearInterval(),this._updateInterval(),this._interval=setInterval((()=>this.nextWhenVisible()),this._config.interval)}_maybeEnableCycle(){this._config.ride&&(this._isSliding?$.one(this._element,be,(()=>this.cycle())):this.cycle())}to(e){const t=this._getItems();if(e>t.length-1||e<0)return;if(this._isSliding)return void $.one(this._element,be,(()=>this.to(e)));const i=this._getItemIndex(this._getActive());if(i===e)return;const o=e>i?fe:he;this._slide(o,t[e])}dispose(){this._swipeHelper&&this._swipeHelper.dispose(),super.dispose()}_configAfterMerge(e){return e.defaultInterval=e.interval,e}_addEventListeners(){this._config.keyboard&&$.on(this._element,ve,(e=>this._keydown(e))),"hover"===this._config.pause&&($.on(this._element,ye,(()=>this.pause())),$.on(this._element,je,(()=>this._maybeEnableCycle()))),this._config.touch&&de.isSupported()&&this._addTouchEventListeners()}_addTouchEventListeners(){for(const e of te.find(".carousel-item img",this._element))$.on(e,we,(e=>e.preventDefault()));const e={leftCallback:()=>this._slide(this._directionToOrder(me)),rightCallback:()=>this._slide(this._directionToOrder(_e)),endCallback:()=>{"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((()=>this._maybeEnableCycle()),500+this._config.interval))}};this._swipeHelper=new de(this._element,e)}_keydown(e){if(/input|textarea/i.test(e.target.tagName))return;const t=xe[e.key];t&&(e.preventDefault(),this._slide(this._directionToOrder(t)))}_getItemIndex(e){return this._getItems().indexOf(e)}_setActiveIndicatorElement(e){if(!this._indicatorsElement)return;const t=te.findOne(Ae,this._indicatorsElement);t.classList.remove(ke),t.removeAttribute("aria-current");const i=te.findOne(`[data-bs-slide-to="${e}"]`,this._indicatorsElement);i&&(i.classList.add(ke),i.setAttribute("aria-current","true"))}_updateInterval(){const e=this._activeElement||this._getActive();if(!e)return;const t=Number.parseInt(e.getAttribute("data-bs-interval"),10);this._config.interval=t||this._config.defaultInterval}_slide(e,t=null){if(this._isSliding)return;const i=this._getActive(),o=e===fe,n=t||E(this._getItems(),i,o,this._config.wrap);if(n===i)return;const s=this._getItemIndex(n),r=t=>$.trigger(this._element,t,{relatedTarget:n,direction:this._orderToDirection(e),from:this._getItemIndex(i),to:s});if(r(ge).defaultPrevented)return;if(!i||!n)return;const l=Boolean(this._interval);this.pause(),this._isSliding=!0,this._setActiveIndicatorElement(s),this._activeElement=n;const a=o?"carousel-item-start":"carousel-item-end",c=o?"carousel-item-next":"carousel-item-prev";n.classList.add(c),_(n),i.classList.add(a),n.classList.add(a);this._queueCallback((()=>{n.classList.remove(a,c),n.classList.add(ke),i.classList.remove(ke,c,a),this._isSliding=!1,r(be)}),i,this._isAnimated()),l&&this.cycle()}_isAnimated(){return this._element.classList.contains("slide")}_getActive(){return te.findOne(Se,this._element)}_getItems(){return te.find(Oe,this._element)}_clearInterval(){this._interval&&(clearInterval(this._interval),this._interval=null)}_directionToOrder(e){return v()?e===me?he:fe:e===me?fe:he}_orderToDirection(e){return v()?e===he?me:_e:e===he?_e:me}static jQueryInterface(e){return this.each((function(){const t=Le.getOrCreateInstance(this,e);if("number"!=typeof e){if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}else t.to(e)}))}}$.on(document,Ce,"[data-bs-slide], [data-bs-slide-to]",(function(e){const t=a(this);if(!t||!t.classList.contains(Te))return;e.preventDefault();const i=Le.getOrCreateInstance(t),o=this.getAttribute("data-bs-slide-to");return o?(i.to(o),void i._maybeEnableCycle()):"next"===W.getDataAttribute(this,"slide")?(i.next(),void i._maybeEnableCycle()):(i.prev(),void i._maybeEnableCycle())})),$.on(window,Ee,(()=>{const e=te.find('[data-bs-ride="carousel"]');for(const t of e)Le.getOrCreateInstance(t)})),y(Le);const Ie=".bs.collapse",De=`show${Ie}`,Me=`shown${Ie}`,Be=`hide${Ie}`,Ue=`hidden${Ie}`,$e=`click${Ie}.data-api`,Fe="show",Re="collapse",qe="collapsing",Ke=`:scope .${Re} .${Re}`,He='[data-bs-toggle="collapse"]',We={parent:null,toggle:!0},ze={parent:"(null|element)",toggle:"boolean"};class Ve extends V{constructor(e,t){super(e,t),this._isTransitioning=!1,this._triggerArray=[];const i=te.find(He);for(const e of i){const t=l(e),i=te.find(t).filter((e=>e===this._element));null!==t&&i.length&&this._triggerArray.push(e)}this._initializeChildren(),this._config.parent||this._addAriaAndCollapsedClass(this._triggerArray,this._isShown()),this._config.toggle&&this.toggle()}static get Default(){return We}static get DefaultType(){return ze}static get NAME(){return"collapse"}toggle(){this._isShown()?this.hide():this.show()}show(){if(this._isTransitioning||this._isShown())return;let e=[];if(this._config.parent&&(e=this._getFirstLevelChildren(".collapse.show, .collapse.collapsing").filter((e=>e!==this._element)).map((e=>Ve.getOrCreateInstance(e,{toggle:!1})))),e.length&&e[0]._isTransitioning)return;if($.trigger(this._element,De).defaultPrevented)return;for(const t of e)t.hide();const t=this._getDimension();this._element.classList.remove(Re),this._element.classList.add(qe),this._element.style[t]=0,this._addAriaAndCollapsedClass(this._triggerArray,!0),this._isTransitioning=!0;const i=`scroll${t[0].toUpperCase()+t.slice(1)}`;this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(qe),this._element.classList.add(Re,Fe),this._element.style[t]="",$.trigger(this._element,Me)}),this._element,!0),this._element.style[t]=`${this._element[i]}px`}hide(){if(this._isTransitioning||!this._isShown())return;if($.trigger(this._element,Be).defaultPrevented)return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,_(this._element),this._element.classList.add(qe),this._element.classList.remove(Re,Fe);for(const e of this._triggerArray){const t=a(e);t&&!this._isShown(t)&&this._addAriaAndCollapsedClass([e],!1)}this._isTransitioning=!0;this._element.style[e]="",this._queueCallback((()=>{this._isTransitioning=!1,this._element.classList.remove(qe),this._element.classList.add(Re),$.trigger(this._element,Ue)}),this._element,!0)}_isShown(e=this._element){return e.classList.contains(Fe)}_configAfterMerge(e){return e.toggle=Boolean(e.toggle),e.parent=u(e.parent),e}_getDimension(){return this._element.classList.contains("collapse-horizontal")?"width":"height"}_initializeChildren(){if(!this._config.parent)return;const e=this._getFirstLevelChildren(He);for(const t of e){const e=a(t);e&&this._addAriaAndCollapsedClass([t],this._isShown(e))}}_getFirstLevelChildren(e){const t=te.find(Ke,this._config.parent);return te.find(e,this._config.parent).filter((e=>!t.includes(e)))}_addAriaAndCollapsedClass(e,t){if(e.length)for(const i of e)i.classList.toggle("collapsed",!t),i.setAttribute("aria-expanded",t)}static jQueryInterface(e){const t={};return"string"==typeof e&&/show|hide/.test(e)&&(t.toggle=!1),this.each((function(){const i=Ve.getOrCreateInstance(this,t);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e]()}}))}}$.on(document,$e,He,(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();const t=l(this),i=te.find(t);for(const e of i)Ve.getOrCreateInstance(e,{toggle:!1}).toggle()})),y(Ve);const Ge="dropdown",Xe=".bs.dropdown",Ye=".data-api",Qe="ArrowUp",Je="ArrowDown",Ze=`hide${Xe}`,et=`hidden${Xe}`,tt=`show${Xe}`,it=`shown${Xe}`,ot=`click${Xe}${Ye}`,nt=`keydown${Xe}${Ye}`,st=`keyup${Xe}${Ye}`,rt="show",lt='[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)',at=`${lt}.${rt}`,ct=".dropdown-menu",dt=v()?"top-end":"top-start",ut=v()?"top-start":"top-end",pt=v()?"bottom-end":"bottom-start",ft=v()?"bottom-start":"bottom-end",ht=v()?"left-start":"right-start",mt=v()?"right-start":"left-start",_t={autoClose:!0,boundary:"clippingParents",display:"dynamic",offset:[0,2],popperConfig:null,reference:"toggle"},gt={autoClose:"(boolean|string)",boundary:"(string|element)",display:"string",offset:"(array|string|function)",popperConfig:"(null|object|function)",reference:"(string|element|object)"};class bt extends V{constructor(e,t){super(e,t),this._popper=null,this._parent=this._element.parentNode,this._menu=te.next(this._element,ct)[0]||te.prev(this._element,ct)[0]||te.findOne(ct,this._parent),this._inNavbar=this._detectNavbar()}static get Default(){return _t}static get DefaultType(){return gt}static get NAME(){return Ge}toggle(){return this._isShown()?this.hide():this.show()}show(){if(f(this._element)||this._isShown())return;const e={relatedTarget:this._element};if(!$.trigger(this._element,tt,e).defaultPrevented){if(this._createPopper(),"ontouchstart"in document.documentElement&&!this._parent.closest(".navbar-nav"))for(const e of[].concat(...document.body.children))$.on(e,"mouseover",m);this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.add(rt),this._element.classList.add(rt),$.trigger(this._element,it,e)}}hide(){if(f(this._element)||!this._isShown())return;const e={relatedTarget:this._element};this._completeHide(e)}dispose(){this._popper&&this._popper.destroy(),super.dispose()}update(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}_completeHide(e){if(!$.trigger(this._element,Ze,e).defaultPrevented){if("ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))$.off(e,"mouseover",m);this._popper&&this._popper.destroy(),this._menu.classList.remove(rt),this._element.classList.remove(rt),this._element.setAttribute("aria-expanded","false"),W.removeDataAttribute(this._menu,"popper"),$.trigger(this._element,et,e)}}_getConfig(e){if("object"==typeof(e=super._getConfig(e)).reference&&!d(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError(`${Ge.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);return e}_createPopper(){if(void 0===o)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");let e=this._element;"parent"===this._config.reference?e=this._parent:d(this._config.reference)?e=u(this._config.reference):"object"==typeof this._config.reference&&(e=this._config.reference);const t=this._getPopperConfig();this._popper=n.createPopper(e,this._menu,t)}_isShown(){return this._menu.classList.contains(rt)}_getPlacement(){const e=this._parent;if(e.classList.contains("dropend"))return ht;if(e.classList.contains("dropstart"))return mt;if(e.classList.contains("dropup-center"))return"top";if(e.classList.contains("dropdown-center"))return"bottom";const t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?ut:dt:t?ft:pt}_detectNavbar(){return null!==this._element.closest(".navbar")}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_getPopperConfig(){const e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return(this._inNavbar||"static"===this._config.display)&&(W.setDataAttribute(this._menu,"popper","static"),e.modifiers=[{name:"applyStyles",enabled:!1}]),{...e,..."function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig}}_selectMenuItem({key:e,target:t}){const i=te.find(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter((e=>p(e)));i.length&&E(i,t,e===Je,!i.includes(t)).focus()}static jQueryInterface(e){return this.each((function(){const t=bt.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}static clearMenus(e){if(2===e.button||"keyup"===e.type&&"Tab"!==e.key)return;const t=te.find(at);for(const i of t){const t=bt.getInstance(i);if(!t||!1===t._config.autoClose)continue;const o=e.composedPath(),n=o.includes(t._menu);if(o.includes(t._element)||"inside"===t._config.autoClose&&!n||"outside"===t._config.autoClose&&n)continue;if(t._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;const s={relatedTarget:t._element};"click"===e.type&&(s.clickEvent=e),t._completeHide(s)}}static dataApiKeydownHandler(e){const t=/input|textarea/i.test(e.target.tagName),i="Escape"===e.key,o=[Qe,Je].includes(e.key);if(!o&&!i)return;if(t&&!i)return;e.preventDefault();const n=this.matches(lt)?this:te.prev(this,lt)[0]||te.next(this,lt)[0]||te.findOne(lt,e.delegateTarget.parentNode),s=bt.getOrCreateInstance(n);if(o)return e.stopPropagation(),s.show(),void s._selectMenuItem(e);s._isShown()&&(e.stopPropagation(),s.hide(),n.focus())}}$.on(document,nt,lt,bt.dataApiKeydownHandler),$.on(document,nt,ct,bt.dataApiKeydownHandler),$.on(document,ot,bt.clearMenus),$.on(document,st,bt.clearMenus),$.on(document,ot,lt,(function(e){e.preventDefault(),bt.getOrCreateInstance(this).toggle()})),y(bt);const vt=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",yt=".sticky-top",jt="padding-right",wt="margin-right";class Et{constructor(){this._element=document.body}getWidth(){const e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)}hide(){const e=this.getWidth();this._disableOverFlow(),this._setElementAttributes(this._element,jt,(t=>t+e)),this._setElementAttributes(vt,jt,(t=>t+e)),this._setElementAttributes(yt,wt,(t=>t-e))}reset(){this._resetElementAttributes(this._element,"overflow"),this._resetElementAttributes(this._element,jt),this._resetElementAttributes(vt,jt),this._resetElementAttributes(yt,wt)}isOverflowing(){return this.getWidth()>0}_disableOverFlow(){this._saveInitialAttribute(this._element,"overflow"),this._element.style.overflow="hidden"}_setElementAttributes(e,t,i){const o=this.getWidth();this._applyManipulationCallback(e,(e=>{if(e!==this._element&&window.innerWidth>e.clientWidth+o)return;this._saveInitialAttribute(e,t);const n=window.getComputedStyle(e).getPropertyValue(t);e.style.setProperty(t,`${i(Number.parseFloat(n))}px`)}))}_saveInitialAttribute(e,t){const i=e.style.getPropertyValue(t);i&&W.setDataAttribute(e,t,i)}_resetElementAttributes(e,t){this._applyManipulationCallback(e,(e=>{const i=W.getDataAttribute(e,t);null!==i?(W.removeDataAttribute(e,t),e.style.setProperty(t,i)):e.style.removeProperty(t)}))}_applyManipulationCallback(e,t){if(d(e))t(e);else for(const i of te.find(e,this._element))t(i)}}const Ct="backdrop",Tt="show",kt=`mousedown.bs.${Ct}`,At={className:"modal-backdrop",clickCallback:null,isAnimated:!1,isVisible:!0,rootElement:"body"},Ot={className:"string",clickCallback:"(function|null)",isAnimated:"boolean",isVisible:"boolean",rootElement:"(element|string)"};class St extends z{constructor(e){super(),this._config=this._getConfig(e),this._isAppended=!1,this._element=null}static get Default(){return At}static get DefaultType(){return Ot}static get NAME(){return Ct}show(e){if(!this._config.isVisible)return void j(e);this._append();const t=this._getElement();this._config.isAnimated&&_(t),t.classList.add(Tt),this._emulateAnimation((()=>{j(e)}))}hide(e){this._config.isVisible?(this._getElement().classList.remove(Tt),this._emulateAnimation((()=>{this.dispose(),j(e)}))):j(e)}dispose(){this._isAppended&&($.off(this._element,kt),this._element.remove(),this._isAppended=!1)}_getElement(){if(!this._element){const e=document.createElement("div");e.className=this._config.className,this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}_configAfterMerge(e){return e.rootElement=u(e.rootElement),e}_append(){if(this._isAppended)return;const e=this._getElement();this._config.rootElement.append(e),$.on(e,kt,(()=>{j(this._config.clickCallback)})),this._isAppended=!0}_emulateAnimation(e){w(e,this._getElement(),this._config.isAnimated)}}const xt=".bs.focustrap",Pt=`focusin${xt}`,Nt=`keydown.tab${xt}`,Lt="backward",It={autofocus:!0,trapElement:null},Dt={autofocus:"boolean",trapElement:"element"};class Mt extends z{constructor(e){super(),this._config=this._getConfig(e),this._isActive=!1,this._lastTabNavDirection=null}static get Default(){return It}static get DefaultType(){return Dt}static get NAME(){return"focustrap"}activate(){this._isActive||(this._config.autofocus&&this._config.trapElement.focus(),$.off(document,xt),$.on(document,Pt,(e=>this._handleFocusin(e))),$.on(document,Nt,(e=>this._handleKeydown(e))),this._isActive=!0)}deactivate(){this._isActive&&(this._isActive=!1,$.off(document,xt))}_handleFocusin(e){const{trapElement:t}=this._config;if(e.target===document||e.target===t||t.contains(e.target))return;const i=te.focusableChildren(t);0===i.length?t.focus():this._lastTabNavDirection===Lt?i[i.length-1].focus():i[0].focus()}_handleKeydown(e){"Tab"===e.key&&(this._lastTabNavDirection=e.shiftKey?Lt:"forward")}}const Bt=".bs.modal",Ut=`hide${Bt}`,$t=`hidePrevented${Bt}`,Ft=`hidden${Bt}`,Rt=`show${Bt}`,qt=`shown${Bt}`,Kt=`resize${Bt}`,Ht=`click.dismiss${Bt}`,Wt=`mousedown.dismiss${Bt}`,zt=`keydown.dismiss${Bt}`,Vt=`click${Bt}.data-api`,Gt="modal-open",Xt="show",Yt="modal-static",Qt={backdrop:!0,focus:!0,keyboard:!0},Jt={backdrop:"(boolean|string)",focus:"boolean",keyboard:"boolean"};class Zt extends V{constructor(e,t){super(e,t),this._dialog=te.findOne(".modal-dialog",this._element),this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._isShown=!1,this._isTransitioning=!1,this._scrollBar=new Et,this._addEventListeners()}static get Default(){return Qt}static get DefaultType(){return Jt}static get NAME(){return"modal"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown||this._isTransitioning)return;$.trigger(this._element,Rt,{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._isTransitioning=!0,this._scrollBar.hide(),document.body.classList.add(Gt),this._adjustDialog(),this._backdrop.show((()=>this._showElement(e))))}hide(){if(!this._isShown||this._isTransitioning)return;$.trigger(this._element,Ut).defaultPrevented||(this._isShown=!1,this._isTransitioning=!0,this._focustrap.deactivate(),this._element.classList.remove(Xt),this._queueCallback((()=>this._hideModal()),this._element,this._isAnimated()))}dispose(){for(const e of[window,this._dialog])$.off(e,Bt);this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}handleUpdate(){this._adjustDialog()}_initializeBackDrop(){return new St({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}_initializeFocusTrap(){return new Mt({trapElement:this._element})}_showElement(e){document.body.contains(this._element)||document.body.append(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0;const t=te.findOne(".modal-body",this._dialog);t&&(t.scrollTop=0),_(this._element),this._element.classList.add(Xt);this._queueCallback((()=>{this._config.focus&&this._focustrap.activate(),this._isTransitioning=!1,$.trigger(this._element,qt,{relatedTarget:e})}),this._dialog,this._isAnimated())}_addEventListeners(){$.on(this._element,zt,(e=>{if("Escape"===e.key)return this._config.keyboard?(e.preventDefault(),void this.hide()):void this._triggerBackdropTransition()})),$.on(window,Kt,(()=>{this._isShown&&!this._isTransitioning&&this._adjustDialog()})),$.on(this._element,Wt,(e=>{$.one(this._element,Ht,(t=>{this._element===e.target&&this._element===t.target&&("static"!==this._config.backdrop?this._config.backdrop&&this.hide():this._triggerBackdropTransition())}))}))}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((()=>{document.body.classList.remove(Gt),this._resetAdjustments(),this._scrollBar.reset(),$.trigger(this._element,Ft)}))}_isAnimated(){return this._element.classList.contains("fade")}_triggerBackdropTransition(){if($.trigger(this._element,$t).defaultPrevented)return;const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._element.style.overflowY;"hidden"===t||this._element.classList.contains(Yt)||(e||(this._element.style.overflowY="hidden"),this._element.classList.add(Yt),this._queueCallback((()=>{this._element.classList.remove(Yt),this._queueCallback((()=>{this._element.style.overflowY=t}),this._dialog)}),this._dialog),this._element.focus())}_adjustDialog(){const e=this._element.scrollHeight>document.documentElement.clientHeight,t=this._scrollBar.getWidth(),i=t>0;if(i&&!e){const e=v()?"paddingLeft":"paddingRight";this._element.style[e]=`${t}px`}if(!i&&e){const e=v()?"paddingRight":"paddingLeft";this._element.style[e]=`${t}px`}}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}static jQueryInterface(e,t){return this.each((function(){const i=Zt.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===i[e])throw new TypeError(`No method named "${e}"`);i[e](t)}}))}}$.on(document,Vt,'[data-bs-toggle="modal"]',(function(e){const t=a(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),$.one(t,Rt,(e=>{e.defaultPrevented||$.one(t,Ft,(()=>{p(this)&&this.focus()}))}));const i=te.findOne(".modal.show");i&&Zt.getInstance(i).hide();Zt.getOrCreateInstance(t).toggle(this)})),G(Zt),y(Zt);const ei=".bs.offcanvas",ti=".data-api",ii=`load${ei}${ti}`,oi="show",ni="showing",si="hiding",ri=".offcanvas.show",li=`show${ei}`,ai=`shown${ei}`,ci=`hide${ei}`,di=`hidePrevented${ei}`,ui=`hidden${ei}`,pi=`resize${ei}`,fi=`click${ei}${ti}`,hi=`keydown.dismiss${ei}`,mi={backdrop:!0,keyboard:!0,scroll:!1},_i={backdrop:"(boolean|string)",keyboard:"boolean",scroll:"boolean"};class gi extends V{constructor(e,t){super(e,t),this._isShown=!1,this._backdrop=this._initializeBackDrop(),this._focustrap=this._initializeFocusTrap(),this._addEventListeners()}static get Default(){return mi}static get DefaultType(){return _i}static get NAME(){return"offcanvas"}toggle(e){return this._isShown?this.hide():this.show(e)}show(e){if(this._isShown)return;if($.trigger(this._element,li,{relatedTarget:e}).defaultPrevented)return;this._isShown=!0,this._backdrop.show(),this._config.scroll||(new Et).hide(),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add(ni);this._queueCallback((()=>{this._config.scroll&&!this._config.backdrop||this._focustrap.activate(),this._element.classList.add(oi),this._element.classList.remove(ni),$.trigger(this._element,ai,{relatedTarget:e})}),this._element,!0)}hide(){if(!this._isShown)return;if($.trigger(this._element,ci).defaultPrevented)return;this._focustrap.deactivate(),this._element.blur(),this._isShown=!1,this._element.classList.add(si),this._backdrop.hide();this._queueCallback((()=>{this._element.classList.remove(oi,si),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._config.scroll||(new Et).reset(),$.trigger(this._element,ui)}),this._element,!0)}dispose(){this._backdrop.dispose(),this._focustrap.deactivate(),super.dispose()}_initializeBackDrop(){const e=Boolean(this._config.backdrop);return new St({className:"offcanvas-backdrop",isVisible:e,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:e?()=>{"static"!==this._config.backdrop?this.hide():$.trigger(this._element,di)}:null})}_initializeFocusTrap(){return new Mt({trapElement:this._element})}_addEventListeners(){$.on(this._element,hi,(e=>{"Escape"===e.key&&(this._config.keyboard?this.hide():$.trigger(this._element,di))}))}static jQueryInterface(e){return this.each((function(){const t=gi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}$.on(document,fi,'[data-bs-toggle="offcanvas"]',(function(e){const t=a(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),f(this))return;$.one(t,ui,(()=>{p(this)&&this.focus()}));const i=te.findOne(ri);i&&i!==t&&gi.getInstance(i).hide();gi.getOrCreateInstance(t).toggle(this)})),$.on(window,ii,(()=>{for(const e of te.find(ri))gi.getOrCreateInstance(e).show()})),$.on(window,pi,(()=>{for(const e of te.find("[aria-modal][class*=show][class*=offcanvas-]"))"fixed"!==getComputedStyle(e).position&&gi.getOrCreateInstance(e).hide()})),G(gi),y(gi);const bi=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),vi=/^(?:(?:https?|mailto|ftp|tel|file|sms):|[^#&/:?]*(?:[#/?]|$))/i,yi=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i,ji=(e,t)=>{const i=e.nodeName.toLowerCase();return t.includes(i)?!bi.has(i)||Boolean(vi.test(e.nodeValue)||yi.test(e.nodeValue)):t.filter((e=>e instanceof RegExp)).some((e=>e.test(i)))},wi={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]};const Ei={allowList:wi,content:{},extraClass:"",html:!1,sanitize:!0,sanitizeFn:null,template:"<div></div>"},Ci={allowList:"object",content:"object",extraClass:"(string|function)",html:"boolean",sanitize:"boolean",sanitizeFn:"(null|function)",template:"string"},Ti={entry:"(string|element|function|null)",selector:"(string|element)"};class ki extends z{constructor(e){super(),this._config=this._getConfig(e)}static get Default(){return Ei}static get DefaultType(){return Ci}static get NAME(){return"TemplateFactory"}getContent(){return Object.values(this._config.content).map((e=>this._resolvePossibleFunction(e))).filter(Boolean)}hasContent(){return this.getContent().length>0}changeContent(e){return this._checkContent(e),this._config.content={...this._config.content,...e},this}toHtml(){const e=document.createElement("div");e.innerHTML=this._maybeSanitize(this._config.template);for(const[t,i]of Object.entries(this._config.content))this._setContent(e,i,t);const t=e.children[0],i=this._resolvePossibleFunction(this._config.extraClass);return i&&t.classList.add(...i.split(" ")),t}_typeCheckConfig(e){super._typeCheckConfig(e),this._checkContent(e.content)}_checkContent(e){for(const[t,i]of Object.entries(e))super._typeCheckConfig({selector:t,entry:i},Ti)}_setContent(e,t,i){const o=te.findOne(i,e);o&&((t=this._resolvePossibleFunction(t))?d(t)?this._putElementInTemplate(u(t),o):this._config.html?o.innerHTML=this._maybeSanitize(t):o.textContent=t:o.remove())}_maybeSanitize(e){return this._config.sanitize?function(e,t,i){if(!e.length)return e;if(i&&"function"==typeof i)return i(e);const o=(new window.DOMParser).parseFromString(e,"text/html"),n=[].concat(...o.body.querySelectorAll("*"));for(const e of n){const i=e.nodeName.toLowerCase();if(!Object.keys(t).includes(i)){e.remove();continue}const o=[].concat(...e.attributes),n=[].concat(t["*"]||[],t[i]||[]);for(const t of o)ji(t,n)||e.removeAttribute(t.nodeName)}return o.body.innerHTML}(e,this._config.allowList,this._config.sanitizeFn):e}_resolvePossibleFunction(e){return"function"==typeof e?e(this):e}_putElementInTemplate(e,t){if(this._config.html)return t.innerHTML="",void t.append(e);t.textContent=e.textContent}}const Ai=new Set(["sanitize","allowList","sanitizeFn"]),Oi="fade",Si="show",xi=".modal",Pi="hide.bs.modal",Ni="hover",Li="focus",Ii={AUTO:"auto",TOP:"top",RIGHT:v()?"left":"right",BOTTOM:"bottom",LEFT:v()?"right":"left"},Di={allowList:wi,animation:!0,boundary:"clippingParents",container:!1,customClass:"",delay:0,fallbackPlacements:["top","right","bottom","left"],html:!1,offset:[0,0],placement:"top",popperConfig:null,sanitize:!0,sanitizeFn:null,selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',title:"",trigger:"hover focus"},Mi={allowList:"object",animation:"boolean",boundary:"(string|element)",container:"(string|element|boolean)",customClass:"(string|function)",delay:"(number|object)",fallbackPlacements:"array",html:"boolean",offset:"(array|string|function)",placement:"(string|function)",popperConfig:"(null|object|function)",sanitize:"boolean",sanitizeFn:"(null|function)",selector:"(string|boolean)",template:"string",title:"(string|element|function)",trigger:"string"};class Bi extends V{constructor(e,t){if(void 0===o)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");super(e,t),this._isEnabled=!0,this._timeout=0,this._isHovered=null,this._activeTrigger={},this._popper=null,this._templateFactory=null,this._newContent=null,this.tip=null,this._setListeners(),this._config.selector||this._fixTitle()}static get Default(){return Di}static get DefaultType(){return Mi}static get NAME(){return"tooltip"}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(){this._isEnabled&&(this._activeTrigger.click=!this._activeTrigger.click,this._isShown()?this._leave():this._enter())}dispose(){clearTimeout(this._timeout),$.off(this._element.closest(xi),Pi,this._hideModalHandler),this._element.getAttribute("data-bs-original-title")&&this._element.setAttribute("title",this._element.getAttribute("data-bs-original-title")),this._disposePopper(),super.dispose()}show(){if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(!this._isWithContent()||!this._isEnabled)return;const e=$.trigger(this._element,this.constructor.eventName("show")),t=(h(this._element)||this._element.ownerDocument.documentElement).contains(this._element);if(e.defaultPrevented||!t)return;this._disposePopper();const i=this._getTipElement();this._element.setAttribute("aria-describedby",i.getAttribute("id"));const{container:o}=this._config;if(this._element.ownerDocument.documentElement.contains(this.tip)||(o.append(i),$.trigger(this._element,this.constructor.eventName("inserted"))),this._popper=this._createPopper(i),i.classList.add(Si),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))$.on(e,"mouseover",m);this._queueCallback((()=>{$.trigger(this._element,this.constructor.eventName("shown")),!1===this._isHovered&&this._leave(),this._isHovered=!1}),this.tip,this._isAnimated())}hide(){if(!this._isShown())return;if($.trigger(this._element,this.constructor.eventName("hide")).defaultPrevented)return;if(this._getTipElement().classList.remove(Si),"ontouchstart"in document.documentElement)for(const e of[].concat(...document.body.children))$.off(e,"mouseover",m);this._activeTrigger.click=!1,this._activeTrigger[Li]=!1,this._activeTrigger[Ni]=!1,this._isHovered=null;this._queueCallback((()=>{this._isWithActiveTrigger()||(this._isHovered||this._disposePopper(),this._element.removeAttribute("aria-describedby"),$.trigger(this._element,this.constructor.eventName("hidden")))}),this.tip,this._isAnimated())}update(){this._popper&&this._popper.update()}_isWithContent(){return Boolean(this._getTitle())}_getTipElement(){return this.tip||(this.tip=this._createTipElement(this._newContent||this._getContentForTemplate())),this.tip}_createTipElement(e){const t=this._getTemplateFactory(e).toHtml();if(!t)return null;t.classList.remove(Oi,Si),t.classList.add(`bs-${this.constructor.NAME}-auto`);const i=(e=>{do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e})(this.constructor.NAME).toString();return t.setAttribute("id",i),this._isAnimated()&&t.classList.add(Oi),t}setContent(e){this._newContent=e,this._isShown()&&(this._disposePopper(),this.show())}_getTemplateFactory(e){return this._templateFactory?this._templateFactory.changeContent(e):this._templateFactory=new ki({...this._config,content:e,extraClass:this._resolvePossibleFunction(this._config.customClass)}),this._templateFactory}_getContentForTemplate(){return{".tooltip-inner":this._getTitle()}}_getTitle(){return this._resolvePossibleFunction(this._config.title)||this._element.getAttribute("data-bs-original-title")}_initializeOnDelegatedTarget(e){return this.constructor.getOrCreateInstance(e.delegateTarget,this._getDelegateConfig())}_isAnimated(){return this._config.animation||this.tip&&this.tip.classList.contains(Oi)}_isShown(){return this.tip&&this.tip.classList.contains(Si)}_createPopper(e){const t="function"==typeof this._config.placement?this._config.placement.call(this,e,this._element):this._config.placement,i=Ii[t.toUpperCase()];return n.createPopper(this._element,e,this._getPopperConfig(i))}_getOffset(){const{offset:e}=this._config;return"string"==typeof e?e.split(",").map((e=>Number.parseInt(e,10))):"function"==typeof e?t=>e(t,this._element):e}_resolvePossibleFunction(e){return"function"==typeof e?e.call(this._element):e}_getPopperConfig(e){const t={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:`.${this.constructor.NAME}-arrow`}},{name:"preSetPlacement",enabled:!0,phase:"beforeMain",fn:e=>{this._getTipElement().setAttribute("data-popper-placement",e.state.placement)}}]};return{...t,..."function"==typeof this._config.popperConfig?this._config.popperConfig(t):this._config.popperConfig}}_setListeners(){const e=this._config.trigger.split(" ");for(const t of e)if("click"===t)$.on(this._element,this.constructor.eventName("click"),this._config.selector,(e=>{this._initializeOnDelegatedTarget(e).toggle()}));else if("manual"!==t){const e=t===Ni?this.constructor.eventName("mouseenter"):this.constructor.eventName("focusin"),i=t===Ni?this.constructor.eventName("mouseleave"):this.constructor.eventName("focusout");$.on(this._element,e,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusin"===e.type?Li:Ni]=!0,t._enter()})),$.on(this._element,i,this._config.selector,(e=>{const t=this._initializeOnDelegatedTarget(e);t._activeTrigger["focusout"===e.type?Li:Ni]=t._element.contains(e.relatedTarget),t._leave()}))}this._hideModalHandler=()=>{this._element&&this.hide()},$.on(this._element.closest(xi),Pi,this._hideModalHandler)}_fixTitle(){const e=this._element.getAttribute("title");e&&(this._element.getAttribute("aria-label")||this._element.textContent.trim()||this._element.setAttribute("aria-label",e),this._element.setAttribute("data-bs-original-title",e),this._element.removeAttribute("title"))}_enter(){this._isShown()||this._isHovered?this._isHovered=!0:(this._isHovered=!0,this._setTimeout((()=>{this._isHovered&&this.show()}),this._config.delay.show))}_leave(){this._isWithActiveTrigger()||(this._isHovered=!1,this._setTimeout((()=>{this._isHovered||this.hide()}),this._config.delay.hide))}_setTimeout(e,t){clearTimeout(this._timeout),this._timeout=setTimeout(e,t)}_isWithActiveTrigger(){return Object.values(this._activeTrigger).includes(!0)}_getConfig(e){const t=W.getDataAttributes(this._element);for(const e of Object.keys(t))Ai.has(e)&&delete t[e];return e={...t,..."object"==typeof e&&e?e:{}},e=this._mergeConfigObj(e),e=this._configAfterMerge(e),this._typeCheckConfig(e),e}_configAfterMerge(e){return e.container=!1===e.container?document.body:u(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),e}_getDelegateConfig(){const e={};for(const t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e.selector=!1,e.trigger="manual",e}_disposePopper(){this._popper&&(this._popper.destroy(),this._popper=null),this.tip&&(this.tip.remove(),this.tip=null)}static jQueryInterface(e){return this.each((function(){const t=Bi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}y(Bi);const Ui={...Bi.Default,content:"",offset:[0,8],placement:"right",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',trigger:"click"},$i={...Bi.DefaultType,content:"(null|string|element|function)"};class Fi extends Bi{static get Default(){return Ui}static get DefaultType(){return $i}static get NAME(){return"popover"}_isWithContent(){return this._getTitle()||this._getContent()}_getContentForTemplate(){return{".popover-header":this._getTitle(),".popover-body":this._getContent()}}_getContent(){return this._resolvePossibleFunction(this._config.content)}static jQueryInterface(e){return this.each((function(){const t=Fi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e]()}}))}}y(Fi);const Ri=".bs.scrollspy",qi=`activate${Ri}`,Ki=`click${Ri}`,Hi=`load${Ri}.data-api`,Wi="active",zi="[href]",Vi=".nav-link",Gi=`${Vi}, .nav-item > ${Vi}, .list-group-item`,Xi={offset:null,rootMargin:"0px 0px -25%",smoothScroll:!1,target:null,threshold:[.1,.5,1]},Yi={offset:"(number|null)",rootMargin:"string",smoothScroll:"boolean",target:"element",threshold:"array"};class Qi extends V{constructor(e,t){super(e,t),this._targetLinks=new Map,this._observableSections=new Map,this._rootElement="visible"===getComputedStyle(this._element).overflowY?null:this._element,this._activeTarget=null,this._observer=null,this._previousScrollData={visibleEntryTop:0,parentScrollTop:0},this.refresh()}static get Default(){return Xi}static get DefaultType(){return Yi}static get NAME(){return"scrollspy"}refresh(){this._initializeTargetsAndObservables(),this._maybeEnableSmoothScroll(),this._observer?this._observer.disconnect():this._observer=this._getNewObserver();for(const e of this._observableSections.values())this._observer.observe(e)}dispose(){this._observer.disconnect(),super.dispose()}_configAfterMerge(e){return e.target=u(e.target)||document.body,e.rootMargin=e.offset?`${e.offset}px 0px -30%`:e.rootMargin,"string"==typeof e.threshold&&(e.threshold=e.threshold.split(",").map((e=>Number.parseFloat(e)))),e}_maybeEnableSmoothScroll(){this._config.smoothScroll&&($.off(this._config.target,Ki),$.on(this._config.target,Ki,zi,(e=>{const t=this._observableSections.get(e.target.hash);if(t){e.preventDefault();const i=this._rootElement||window,o=t.offsetTop-this._element.offsetTop;if(i.scrollTo)return void i.scrollTo({top:o,behavior:"smooth"});i.scrollTop=o}})))}_getNewObserver(){const e={root:this._rootElement,threshold:this._config.threshold,rootMargin:this._config.rootMargin};return new IntersectionObserver((e=>this._observerCallback(e)),e)}_observerCallback(e){const t=e=>this._targetLinks.get(`#${e.target.id}`),i=e=>{this._previousScrollData.visibleEntryTop=e.target.offsetTop,this._process(t(e))},o=(this._rootElement||document.documentElement).scrollTop,n=o>=this._previousScrollData.parentScrollTop;this._previousScrollData.parentScrollTop=o;for(const s of e){if(!s.isIntersecting){this._activeTarget=null,this._clearActiveClass(t(s));continue}const e=s.target.offsetTop>=this._previousScrollData.visibleEntryTop;if(n&&e){if(i(s),!o)return}else n||e||i(s)}}_initializeTargetsAndObservables(){this._targetLinks=new Map,this._observableSections=new Map;const e=te.find(zi,this._config.target);for(const t of e){if(!t.hash||f(t))continue;const e=te.findOne(t.hash,this._element);p(e)&&(this._targetLinks.set(t.hash,t),this._observableSections.set(t.hash,e))}}_process(e){this._activeTarget!==e&&(this._clearActiveClass(this._config.target),this._activeTarget=e,e.classList.add(Wi),this._activateParents(e),$.trigger(this._element,qi,{relatedTarget:e}))}_activateParents(e){if(e.classList.contains("dropdown-item"))te.findOne(".dropdown-toggle",e.closest(".dropdown")).classList.add(Wi);else for(const t of te.parents(e,".nav, .list-group"))for(const e of te.prev(t,Gi))e.classList.add(Wi)}_clearActiveClass(e){e.classList.remove(Wi);const t=te.find(`${zi}.${Wi}`,e);for(const e of t)e.classList.remove(Wi)}static jQueryInterface(e){return this.each((function(){const t=Qi.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}$.on(window,Hi,(()=>{for(const e of te.find('[data-bs-spy="scroll"]'))Qi.getOrCreateInstance(e)})),y(Qi);const Ji=".bs.tab",Zi=`hide${Ji}`,eo=`hidden${Ji}`,to=`show${Ji}`,io=`shown${Ji}`,oo=`click${Ji}`,no=`keydown${Ji}`,so=`load${Ji}`,ro="ArrowLeft",lo="ArrowRight",ao="ArrowUp",co="ArrowDown",uo="active",po="fade",fo="show",ho=":not(.dropdown-toggle)",mo='[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',_o=`${`.nav-link${ho}, .list-group-item${ho}, [role="tab"]${ho}`}, ${mo}`,go=`.${uo}[data-bs-toggle="tab"], .${uo}[data-bs-toggle="pill"], .${uo}[data-bs-toggle="list"]`;class bo extends V{constructor(e){super(e),this._parent=this._element.closest('.list-group, .nav, [role="tablist"]'),this._parent&&(this._setInitialAttributes(this._parent,this._getChildren()),$.on(this._element,no,(e=>this._keydown(e))))}static get NAME(){return"tab"}show(){const e=this._element;if(this._elemIsActive(e))return;const t=this._getActiveElem(),i=t?$.trigger(t,Zi,{relatedTarget:e}):null;$.trigger(e,to,{relatedTarget:t}).defaultPrevented||i&&i.defaultPrevented||(this._deactivate(t,e),this._activate(e,t))}_activate(e,t){if(!e)return;e.classList.add(uo),this._activate(a(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.removeAttribute("tabindex"),e.setAttribute("aria-selected",!0),this._toggleDropDown(e,!0),$.trigger(e,io,{relatedTarget:t})):e.classList.add(fo)}),e,e.classList.contains(po))}_deactivate(e,t){if(!e)return;e.classList.remove(uo),e.blur(),this._deactivate(a(e));this._queueCallback((()=>{"tab"===e.getAttribute("role")?(e.setAttribute("aria-selected",!1),e.setAttribute("tabindex","-1"),this._toggleDropDown(e,!1),$.trigger(e,eo,{relatedTarget:t})):e.classList.remove(fo)}),e,e.classList.contains(po))}_keydown(e){if(![ro,lo,ao,co].includes(e.key))return;e.stopPropagation(),e.preventDefault();const t=[lo,co].includes(e.key),i=E(this._getChildren().filter((e=>!f(e))),e.target,t,!0);i&&(i.focus({preventScroll:!0}),bo.getOrCreateInstance(i).show())}_getChildren(){return te.find(_o,this._parent)}_getActiveElem(){return this._getChildren().find((e=>this._elemIsActive(e)))||null}_setInitialAttributes(e,t){this._setAttributeIfNotExists(e,"role","tablist");for(const e of t)this._setInitialAttributesOnChild(e)}_setInitialAttributesOnChild(e){e=this._getInnerElement(e);const t=this._elemIsActive(e),i=this._getOuterElement(e);e.setAttribute("aria-selected",t),i!==e&&this._setAttributeIfNotExists(i,"role","presentation"),t||e.setAttribute("tabindex","-1"),this._setAttributeIfNotExists(e,"role","tab"),this._setInitialAttributesOnTargetPanel(e)}_setInitialAttributesOnTargetPanel(e){const t=a(e);t&&(this._setAttributeIfNotExists(t,"role","tabpanel"),e.id&&this._setAttributeIfNotExists(t,"aria-labelledby",`#${e.id}`))}_toggleDropDown(e,t){const i=this._getOuterElement(e);if(!i.classList.contains("dropdown"))return;const o=(e,o)=>{const n=te.findOne(e,i);n&&n.classList.toggle(o,t)};o(".dropdown-toggle",uo),o(".dropdown-menu",fo),i.setAttribute("aria-expanded",t)}_setAttributeIfNotExists(e,t,i){e.hasAttribute(t)||e.setAttribute(t,i)}_elemIsActive(e){return e.classList.contains(uo)}_getInnerElement(e){return e.matches(_o)?e:te.findOne(_o,e)}_getOuterElement(e){return e.closest(".nav-item, .list-group-item")||e}static jQueryInterface(e){return this.each((function(){const t=bo.getOrCreateInstance(this);if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError(`No method named "${e}"`);t[e]()}}))}}$.on(document,oo,mo,(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),f(this)||bo.getOrCreateInstance(this).show()})),$.on(window,so,(()=>{for(const e of te.find(go))bo.getOrCreateInstance(e)})),y(bo);const vo=".bs.toast",yo=`mouseover${vo}`,jo=`mouseout${vo}`,wo=`focusin${vo}`,Eo=`focusout${vo}`,Co=`hide${vo}`,To=`hidden${vo}`,ko=`show${vo}`,Ao=`shown${vo}`,Oo="hide",So="show",xo="showing",Po={animation:"boolean",autohide:"boolean",delay:"number"},No={animation:!0,autohide:!0,delay:5e3};class Lo extends V{constructor(e,t){super(e,t),this._timeout=null,this._hasMouseInteraction=!1,this._hasKeyboardInteraction=!1,this._setListeners()}static get Default(){return No}static get DefaultType(){return Po}static get NAME(){return"toast"}show(){if($.trigger(this._element,ko).defaultPrevented)return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");this._element.classList.remove(Oo),_(this._element),this._element.classList.add(So,xo),this._queueCallback((()=>{this._element.classList.remove(xo),$.trigger(this._element,Ao),this._maybeScheduleHide()}),this._element,this._config.animation)}hide(){if(!this.isShown())return;if($.trigger(this._element,Co).defaultPrevented)return;this._element.classList.add(xo),this._queueCallback((()=>{this._element.classList.add(Oo),this._element.classList.remove(xo,So),$.trigger(this._element,To)}),this._element,this._config.animation)}dispose(){this._clearTimeout(),this.isShown()&&this._element.classList.remove(So),super.dispose()}isShown(){return this._element.classList.contains(So)}_maybeScheduleHide(){this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay)))}_onInteraction(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)return void this._clearTimeout();const i=e.relatedTarget;this._element===i||this._element.contains(i)||this._maybeScheduleHide()}_setListeners(){$.on(this._element,yo,(e=>this._onInteraction(e,!0))),$.on(this._element,jo,(e=>this._onInteraction(e,!1))),$.on(this._element,wo,(e=>this._onInteraction(e,!0))),$.on(this._element,Eo,(e=>this._onInteraction(e,!1)))}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static jQueryInterface(e){return this.each((function(){const t=Lo.getOrCreateInstance(this,e);if("string"==typeof e){if(void 0===t[e])throw new TypeError(`No method named "${e}"`);t[e](this)}}))}}G(Lo),y(Lo)},"../lib/KintoneCommonUtils.ts/node_modules/@shin-chan/kypes/src/index.js":e=>{e.exports={}},"../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js":e=>{e.exports={}},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/button_installer.js":(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ButtonInstaller=void 0;const o=i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js");i("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");t.ButtonInstaller=class{class_hms_button="button-hms-items";buttons=[];canvas;constructor(e=""){""!=e&&(this.class_hms_button=e)}create_button(e,t=""){const i=o.Utils.ce("span","",[],e);i.style.color="dodgerblue";let n=o.Utils.ce("button",this.class_hms_button,[i],"",{title:t});return n=o.Utils.decorate_menu_icon(n),console.log(e.length),e.length>2&&(n.style.fontSize="16px"),n}add_button(e){this.buttons.push(e)}install(){this.already_installed()?console.info("ボタンはすでに設置済みです。"):0!=this.buttons.length?this.put_buttons(this.buttons):console.info("ボタンが設定されていません。何もせずに終了します。")}set_canvas(e){this.canvas=e}get_hms(){const e=kintone.app.getHeaderMenuSpaceElement();if(null==e){const e="ボタン配置スペースが取得できませんでした。";throw console.error(e),new Error(e)}return e}already_installed(){return document.getElementsByClassName(this.class_hms_button).length>0}put_buttons(e){const t=void 0===this.canvas?this.get_hms():this.canvas;e.forEach((e=>{console.log(t),t.append(e)}))}get_header_element(e){const t=document.querySelectorAll(".recordlist-header-label-gaia");return Array.from(t).filter((t=>t.textContent==e))}}},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js":function(e,t,i){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,i,o){void 0===o&&(o=i),Object.defineProperty(e,o,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,o){void 0===o&&(o=i),e[o]=t[i]}),n=this&&this.__exportStar||function(e,t){for(var i in e)"default"===i||Object.prototype.hasOwnProperty.call(t,i)||o(t,e,i)};Object.defineProperty(t,"__esModule",{value:!0}),n(i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js"),t),n(i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/button_installer.js"),t),n(i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/plugin_canvas.js"),t)},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/plugin_canvas.js":(e,t,i)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PluginCanvas=void 0;const o=i("../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js");i("../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js");class n{static CLASS_DISMISS="offcanvas-dismiss";id_island;id_offcanvas;title_offcanvas;island;enable_offcanvas;constructor(e,t,i=null,n){if(this.title_offcanvas=e,this.id_island=`plugin_island_id_${t}`,this.id_offcanvas=`offcanvas_${this.id_island}`,""==t){if(console.log(`[${this.constructor.name}] オフキャンバスを使いません。`),null==i&&(i=kintone.app.getHeaderMenuSpaceElement()),null==i)throw new Error("kintone.app.HeaderMenuSpaceElement() を取得できませんでした。");return this.island=i,void(this.enable_offcanvas=!1)}this.enable_offcanvas=!0;const s=document.getElementById(this.id_island);if(s)console.log(`[${this.constructor.name}] 既存のオフキャンバスを使用します。`),this.island=s;else{console.log(`[${this.constructor.name}] オフキャンバスをID[${this.id_island}]で作成します。`);const e=(e=>{if(e)return e;{const e=o.Utils.ce("span","",[],"🎈");return e.style.cursor="pointer",e}})(n);e.style.color="dodgerblue";let t=o.Utils.ce("div","bbk-tool-icon-box",[e],"",{id:this.id_island,"data-bs-toggle":"offcanvas","aria-controls":this.id_offcanvas,"data-bs-target":`#${this.id_offcanvas}`});t=o.Utils.decorate_menu_icon(t),this.island=t,this.init_offcanvas()}}init_offcanvas(){const e=kintone.app.getHeaderMenuSpaceElement();e&&(e.appendChild(this.get_node()),e.appendChild(this.build_node_offcanvas()))}get_node(){return this.island}build_node_offcanvas(){return o.Utils.ce("div","offcanvas offcanvas-start",[o.Utils.ce("div","offcanvas-header",[o.Utils.ce("h5","offcanvas-title",[],this.title_offcanvas,{id:`${this.id_offcanvas}Label`}),o.Utils.ce("button","btn-close text-reset",[],"",{"data-bs-dismiss":"offcanvas","aria-label":"Close"})]),o.Utils.ce("div","offcanvas-body",[o.Utils.ce("div","mb-4",[],"ここから各種プラグインを呼び出せます。")],"",{id:`${this.id_offcanvas}-body`})],"",{tabindex:"-1",id:`${this.id_offcanvas}`,"aria-labelledby":`${this.id_offcanvas}Label`,"data-bs-backdrop":"false"})}append(e){if(this.enable_offcanvas){const t=document.getElementById(`${this.id_offcanvas}-body`);this.deal_dismiss_attribute(e),t?.appendChild(e)}else this.island.append(e)}deal_dismiss_attribute(e){const t=Array.from(e.querySelectorAll(`.${n.CLASS_DISMISS}`));console.log(t),t.length>0?t.map((e=>{e.setAttribute("data-bs-dismiss","offcanvas")})):e.setAttribute("data-bs-dismiss","offcanvas")}}t.PluginCanvas=n},"../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Utils=void 0;class i{static unique_properties(e,t=!1){const i=[];for(const o of Object.keys(e)){const n=e[o];(1==n.unique||t&&"RECORD_NUMBER"==n.type)&&i.push(n)}return i}static is_not_empty_string(e){return!i.is_empty_string(e)}static is_empty_string(e){return null==e||null==e||!(e.length>0)}static get_from=(e,t,i)=>e.hasOwnProperty(t)?e[t]:i;static buildElement=e=>{const t=e.tagName,o=e.className?e.className:"",n=e.childElements?e.childElements:[],s=e.textContent?e.textContent:"",r=e.attrs?e.attrs:{};return i.createElement(t,o,n,s,r)};static createElement=(e,t="",i=[],o="",n)=>{const s=document.createElement(e);return s.className=t,s.textContent=o,i.length>0&&i.forEach((e=>{s.appendChild(e)})),n&&Object.entries(n).forEach((([e,t])=>{s.setAttribute(e,t)})),s};static ce=(e,t="",i=[],o="",n)=>this.createElement(e,t,i,o,n);static decorate_menu_icon(e){return e.style.height="48px",e.style.backgroundColor="#f7f9fa",e.style.fontSize="28px",e.style.border="1px solid #e3e7e8",e.style.display="inline",e.style.marginLeft="2px",e.style.marginRight="2px",e.style.verticalAlign="middle",e}static simpleDiv=e=>i.createElement("div","",[],e);static is_overlapped=e=>i.overlapped(e).length>0;static overlapped=e=>{const t=e.filter(((e,t,i)=>i.indexOf(e)!==i.lastIndexOf(e)));return Array.from(new Set(t))};static get_application_url(e){return`${location.protocol}//${location.host}/k/${e}`}static retrieve_errors(e,t=-1){const i=e?.error?.errors;if(null==i)return;let o=[];if(Object.keys(i).forEach((e=>{const t=i[e].messages.map((t=>`[${e}] ${t}`));o=o.concat(t)})),o.sort(),t>=0&&t<o.length){const e=o.length-t;o=o.splice(0,t),o.push(`以下${e}件のエラーメッセージを省略しました。`)}return o}}t.Utils=i}},t={};function i(o){var n=t[o];if(void 0!==n)return n.exports;var s=t[o]={exports:{}};return e[o].call(s.exports,s,s.exports,i),s.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{"use strict";i.r(o);i("./node_modules/bootstrap/dist/js/bootstrap.esm.js");var e=i("../lib/KintoneConfigBuilder.ts/dist/index.js"),t=i("./src/ts/config/settings.ts"),n=i("./src/ts/desktop/chatgpt_connector.ts");!function(i){if(null==i)throw new Error("PLUGIN_ID == undefined で呼び出されました。");console.info("run desktop main");const o=t.Settings.input,s=new e.ConfigManager(i,o).get_config();console.log(s),kintone.events.on(["app.record.edit.show","app.record.create.show"],(e=>{console.log(e);return new n.ChatGPTConnector(s).setup(i),e}))}(kintone.$PLUGIN_ID)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,