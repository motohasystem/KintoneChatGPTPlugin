{"version":3,"file":"config.js","mappings":"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","sources":["webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/dist/common.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/dist/config-builder.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/dist/config-manager.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/dist/config-utilities.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/dist/field-builder.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/dist/incremental-table-builder.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/dist/index.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/node_modules/@shin-chan/kypes/src/index.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/button_installer.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/index.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/plugin_canvas.js","webpack://kintan_lab_chatgpt_sample_plugin/../lib/KintoneConfigBuilder.ts/node_modules/commonutils/dist/utils.js","webpack://kintan_lab_chatgpt_sample_plugin/webpack/bootstrap","webpack://kintan_lab_chatgpt_sample_plugin/./src/ts/constants.ts","webpack://kintan_lab_chatgpt_sample_plugin/./src/ts/config/settings.ts","webpack://kintan_lab_chatgpt_sample_plugin/./src/ts/config/main.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldType = void 0;\n// 設定フォーム部品について定義する。必要に応じて追加する。\nvar FieldType;\n(function (FieldType) {\n    FieldType[FieldType[\"Dropdown\"] = 0] = \"Dropdown\";\n    FieldType[FieldType[\"Dropdown_FieldSelect\"] = 1] = \"Dropdown_FieldSelect\";\n    FieldType[FieldType[\"Radio\"] = 2] = \"Radio\";\n    FieldType[FieldType[\"Text\"] = 3] = \"Text\";\n    FieldType[FieldType[\"Number\"] = 4] = \"Number\";\n    FieldType[FieldType[\"MultilineText\"] = 5] = \"MultilineText\";\n    FieldType[FieldType[\"Checkbox\"] = 6] = \"Checkbox\";\n    FieldType[FieldType[\"IncrementalTable\"] = 7] = \"IncrementalTable\";\n    FieldType[FieldType[\"Label\"] = 8] = \"Label\";\n    FieldType[FieldType[\"Separator\"] = 9] = \"Separator\";\n})(FieldType = exports.FieldType || (exports.FieldType = {}));\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigBuilder = void 0;\nrequire(\"@shin-chan/kypes\"); // kintone types\nconst commonutils_1 = require(\"commonutils\");\nconst config_utilities_1 = require(\"./config-utilities\");\nconst field_builder_1 = require(\"./field-builder\");\nconst incremental_table_builder_1 = require(\"./incremental-table-builder\");\n/**\n * 設定画面の各要素を構築する\n */\nclass ConfigBuilder {\n    static LAYOUT_PARTS = [\"SPACER\"]; // kintoneアプリのレイアウト情報から取得するフィールドタイプ\n    props = undefined;\n    layout = undefined;\n    config = undefined;\n    field_builder;\n    constructor(props, config) {\n        this.props = props;\n        this.config = config;\n        this.field_builder = new field_builder_1.FieldBuilder(props);\n    }\n    /**\n     * レイアウト情報から取得する必要のある情報かどうかを判定する\n     */\n    static is_layout_info(type) {\n        if (ConfigBuilder.LAYOUT_PARTS.includes(type)) {\n            return true;\n        }\n        return false;\n    }\n    static is_includes_layout_info(types) {\n        const is_includes = types.reduce((prev, curr) => {\n            if (ConfigBuilder.is_layout_info(curr)) {\n                prev = true;\n            }\n            return prev;\n        }, false);\n        return is_includes;\n    }\n    /**\n     * 増減テーブルを構築\n     * @param input_field 増減テーブルの定義\n     * @param saved_rows  CONFに保存したテーブルの行情報辞書の配列\n     * @returns 増減テーブルを格納したtable要素\n     */\n    build_incremental_table(input_field, saved_rows) {\n        console.log({ input_field });\n        console.log({ saved_rows });\n        const table_builder = new incremental_table_builder_1.IncrementalTableBuilder(input_field, saved_rows, this.field_builder);\n        const table_rows = table_builder.build();\n        const table_cols = input_field.table_cols; // カラム見出しの辞書\n        const elements_th = table_cols.map((column) => {\n            const el_span = commonutils_1.Utils.createElement('span', 'title');\n            el_span.textContent = column.header;\n            const th = commonutils_1.Utils.createElement('th', 'kintoneplugin-table-th', [el_span]);\n            return th;\n        });\n        elements_th.push(commonutils_1.Utils.createElement('th', 'kintoneplugin-table-th-blankspace'));\n        const tr = commonutils_1.Utils.createElement('tr', '', elements_th);\n        const thead = commonutils_1.Utils.createElement('thead', '', [tr]);\n        const tbody = commonutils_1.Utils.createElement('tbody', '', table_rows);\n        const incremental_table = commonutils_1.Utils.createElement('table', 'kintoneplugin-table ms-0', [thead, tbody], '', {\n            'id': `table-${input_field.code}`\n        });\n        return incremental_table;\n    }\n    // 祖父要素を取得する\n    static get_grand_tr(target) {\n        if (target == null) {\n            throw 'ERROR: nullが渡されたため祖父要素を取得できません';\n        }\n        const self = target;\n        const parent_td = self?.parentNode;\n        const grand_tr = parent_td?.parentNode;\n        return grand_tr;\n    }\n    /**\n     * fields APIの返り値を使ってフィールド部品の一覧を構築する\n     * @param props props resp.properties を渡す\n     * @param accept_types リストにしたいフィールドタイプの配列を渡す。ex. ['SINGLE_LINE_TEXT', 'LINK']\n     * @returns\n     */\n    static get_formparts(props, accept_types = []) {\n        const lists = {};\n        for (const key in props) {\n            if (!props.hasOwnProperty(key)) {\n                continue;\n            }\n            const prop = props[key];\n            const label = prop.label;\n            const code = prop.code;\n            const type = prop.type;\n            if (accept_types.includes(type)) {\n                lists[code] = {\n                    'code': code,\n                    'label': label,\n                    'option': type\n                };\n            }\n        }\n        const array = Object.keys(lists).map((k) => ({\n            key: k, value: lists[k]\n        }));\n        // フィールドラベルでソート\n        const sorted = array.sort((a, b) => {\n            const str_a = a.value.label.toString().toLowerCase();\n            const str_b = b.value.label.toString().toLowerCase();\n            if (str_a < str_b)\n                return -1;\n            else if (a > b)\n                return 1;\n            return 0;\n        });\n        const sorted_dic = Object.assign({}, ...sorted.map((item) => ({\n            [item.key]: item.value,\n        })));\n        return sorted_dic;\n    }\n    // 設定テーブルの行に対して、プルダウン変更で発火するChangeイベントを追加する\n    static addOnChangeEvent(select_set) {\n        for (const select of select_set) {\n            select.addEventListener('change', (event) => {\n                const target = event.target;\n                if (target == null) {\n                    return;\n                }\n                const selected = target[target.selectedIndex];\n                // const label = selected.label\n                let option = selected.getAttribute('option');\n                if (option == null) {\n                    option = \"\";\n                }\n                let code = selected.getAttribute('code');\n                if (code == null) {\n                    code = \"\";\n                }\n                const ancestor = target.closest('tr'); // 祖先TR要素\n                console.log(ancestor);\n                if (ancestor == null) {\n                    return;\n                }\n                const inputs = ancestor.getElementsByTagName('input');\n                inputs[0].value = option;\n                inputs[1].value = code;\n            });\n        }\n    }\n    /**\n     * フィールド選択ドロップダウンを構築する\n     * @param props fields.jsonのレスポンスのproperties\n     * @param accepts 列挙対象とするフィールドタイプ\n     * @param selected_fieldcode 選択済みとしたいフィールドコード（省略可）\n     * @param selected_node_id ドロップダウンのノードID（省略可）\n     * @param empty_label 空の選択肢を追加する場合はラベル文字列を指定する nullのときは追加しない\n     * @returns\n     */\n    static build_fields_dropdown(props, accepts, selected_fieldcode = \"\", selected_node_id = \"\", empty_label = null) {\n        const parts = ConfigBuilder.get_formparts(props, accepts);\n        const field_dropdown = commonutils_1.Utils.createElement('select', 'select-kintone-field');\n        field_dropdown.id = selected_node_id;\n        if (empty_label != null) {\n            const empty_item = commonutils_1.Utils.createElement('option');\n            empty_item.label = empty_label;\n            field_dropdown.appendChild(empty_item);\n        }\n        for (const code in parts) {\n            const prop = parts[code];\n            const item = commonutils_1.Utils.createElement('option');\n            item.setAttribute('fieldcode', code);\n            item.label = prop.label;\n            if (code == selected_fieldcode) {\n                item.setAttribute('selected', '');\n            }\n            field_dropdown.appendChild(item);\n        }\n        return commonutils_1.Utils.createElement('div', '', [\n            commonutils_1.Utils.createElement('div', \"kintoneplugin-select-outer\", [\n                commonutils_1.Utils.createElement('div', 'kintoneplugin-select', [field_dropdown])\n            ])\n        ]);\n    }\n    /**\n     * fields.json APIを呼び出して、別アプリのフィールド選択ドロップダウンを構築する\n     * @param app_id 別アプリのアプリID\n     * @param accepts 列挙対象とするフィールドタイプ\n     * @param selected_label 選択済みとしたいフィールドラベル（省略可）\n     * @param selected_node_id ドロップダウンのノードID（省略可）\n     * @param empty_label 空の選択肢を追加する場合はラベル文字列を指定する nullのときは追加しない\n     * @returns\n     */\n    static async build_fields_dropdown_other_app(app_id, accepts, selected_label = \"\", selected_node_id = \"\", empty_label = null) {\n        // app_idが未指定の場合は空のドロップダウンを配置する\n        if (app_id == undefined || app_id == config_utilities_1.ConfigUtilities.DEFAULT_OPTION) {\n            const empty_dropdown = commonutils_1.Utils.createElement('select', 'select-kintone-field');\n            empty_dropdown.id = selected_node_id;\n            if (empty_label != null) {\n                const empty_item = commonutils_1.Utils.createElement('option');\n                empty_item.label = empty_label;\n                empty_dropdown.appendChild(empty_item);\n            }\n            return commonutils_1.Utils.createElement('div', '', [\n                commonutils_1.Utils.createElement('div', \"kintoneplugin-select-outer\", [\n                    commonutils_1.Utils.createElement('div', 'kintoneplugin-select', [empty_dropdown])\n                ])\n            ]);\n        }\n        const resp_fields = await kintone.api('/k/v1/app/form/fields', 'GET', {\n            app: parseInt(app_id)\n        });\n        return this.build_fields_dropdown(resp_fields.properties, accepts, selected_label, selected_node_id, empty_label);\n    }\n    /**\n     * 指定したノードを子ノードとして、タイトルとコメントを付与したブロックを構築する\n     * @param main_node 修飾したいパーツを含むノード\n     * @param title ブロックにつけるタイトル文字列\n     * @param comment ブロックにつけるコメント文字列\n     * @param block_class ブロックのクラスを指定する（省略可）\n     * @returns\n     */\n    static make_parts_block(main_node, title, comment, block_class = \"\") {\n        console.log('make_parts_block()');\n        const comment_node = commonutils_1.Utils.buildElement({\n            tagName: 'div',\n            className: 'mb-3',\n            textContent: comment\n        });\n        const caption_node = commonutils_1.Utils.buildElement({\n            tagName: 'div',\n            className: 'h4 mb-2',\n            textContent: title\n        });\n        const block = commonutils_1.Utils.buildElement({\n            tagName: 'div',\n            className: block_class + ' ms-4 mt-4',\n            childElements: [\n                caption_node,\n                comment_node,\n                main_node\n            ]\n        });\n        return block;\n    }\n    // テーブルセル内にドロップダウンを追加し、ドロップダウンの選択結果をテーブル行内の別セルに書き込む\n    static addFieldSelectEvent(parent_dropdown, parent_fieldcode, appid, selected_fieldcode = undefined) {\n        kintone.api('/k/v1/app/form/fields', 'GET', {\n            app: appid\n        }).then((resp_fields) => {\n            const fields = Object.keys(resp_fields.properties).map((prop) => {\n                return resp_fields.properties[prop];\n            });\n            // テーブル業内ドロップダウン（子）の選択肢\n            const single_line_items = fields.filter((prop) => {\n                return prop.type == 'SINGLE_LINE_TEXT';\n            }).map((field) => {\n                return {\n                    'code': field.code,\n                    'label': field.label,\n                    'option': field.type\n                };\n            }).map((dd_item) => {\n                const item = commonutils_1.Utils.createElement('option', '');\n                item.label = dd_item.label;\n                item.setAttribute('code', dd_item.code);\n                item.setAttribute('option', dd_item.option);\n                if (dd_item.code == selected_fieldcode) {\n                    item.setAttribute('selected', '');\n                }\n                return item;\n            });\n            // テーブル行内ドロップダウン（子）とその選択イベント\n            const select = commonutils_1.Utils.createElement('select', `select-kintone-field`, single_line_items);\n            select.addEventListener('change', (event) => {\n                console.log({ event });\n                const target = event.target;\n                if (target == null) {\n                    return;\n                }\n                const selected = target[target.selectedIndex];\n                const td_fieldcode = make_fieldcode_cell(selected);\n                parent_fieldcode.firstChild?.remove();\n                parent_fieldcode.appendChild(td_fieldcode);\n            });\n            // SELECTEDなOption要素を受け取って、対応するattributeのinput要素を構築する\n            const make_fieldcode_cell = (selected) => {\n                let fieldcode;\n                if (selected) {\n                    fieldcode = selected.getAttribute('code');\n                    if (fieldcode == null) {\n                        fieldcode = \"\";\n                    }\n                }\n                else {\n                    fieldcode = \"\";\n                }\n                const node_input = commonutils_1.Utils.createElement('input', 'kintoneplugin-input-text', []);\n                node_input.setAttribute('value', fieldcode);\n                node_input.setAttribute('disabled', '');\n                const el_td = commonutils_1.Utils.createElement('td', 'kintoneplugin-table-td-control', [\n                    commonutils_1.Utils.createElement('div', 'kintoneplugin-table-td-control-value', [\n                        commonutils_1.Utils.createElement('div', 'kintoneplugin-input-outer', [\n                            node_input\n                        ])\n                    ])\n                ]);\n                return el_td;\n            };\n            // ドロップダウンの追加\n            const node_dropdown = commonutils_1.Utils.createElement('div', 'kintoneplugin-table-td-control-value', [\n                commonutils_1.Utils.createElement('div', \"kintoneplugin-select-outer\", [\n                    commonutils_1.Utils.createElement('div', 'kintoneplugin-select', [select])\n                ])\n            ]);\n            parent_dropdown.firstChild?.remove();\n            parent_dropdown.appendChild(node_dropdown);\n            // 追加したドロップダウンに対応するフィールドコードを4列目に書き込む\n            parent_fieldcode.firstChild?.remove();\n            const selected = select.item(select.selectedIndex);\n            const td_fieldcode = make_fieldcode_cell(selected);\n            parent_fieldcode.appendChild(td_fieldcode);\n        });\n    }\n    // ラジオボタンを選択したときに発火するイベントを登録する\n    static set_switch_event(node_radio, event_type, callback_object) {\n        const input_radios = node_radio.querySelectorAll('input[type=\"radio\"]');\n        input_radios.forEach((input) => {\n            input.addEventListener(event_type, callback_object);\n        });\n    }\n    /**\n     * 一行テキスト入力ブロックを構築する\n     * @param input_field 設定項目の定義\n     * @returns\n     */\n    make_string_block(input_field, type = 'text') {\n        if (this.config == undefined || this.props == undefined) {\n            throw new Error('インスタンスが初期化されていません');\n        }\n        const fieldcode = input_field.code;\n        let saved_value = this.config[fieldcode];\n        if (saved_value == undefined) {\n            if (input_field.default != undefined) {\n                saved_value = input_field.default;\n            }\n            else {\n                saved_value = \"\";\n            }\n        }\n        console.log({ saved_value });\n        const id = `string-${fieldcode}`;\n        const el_str = commonutils_1.Utils.createElement('div', 'kintoneplugin-input-outer', [\n            commonutils_1.Utils.ce('input', 'kintoneplugin-input-text', [], '', {\n                'type': type,\n                'id': id,\n                'value': saved_value\n            })\n        ]);\n        const node_block = ConfigBuilder.make_parts_block(el_str, input_field.label, input_field.desc);\n        return node_block;\n    }\n    /**\n     * 複数行テキスト入力ブロックを構築する\n     * @param input_field 設定項目の定義\n     * @returns\n     */\n    make_multiline_block(input_field) {\n        if (this.config == undefined || this.props == undefined) {\n            throw new Error('インスタンスが初期化されていません');\n        }\n        const fieldcode = input_field.code;\n        let saved_value = this.config[fieldcode];\n        if (saved_value == undefined) {\n            if (input_field.default != undefined) {\n                saved_value = input_field.default;\n            }\n            else {\n                saved_value = \"\";\n            }\n        }\n        console.log({ saved_value });\n        const id = `multiline-${fieldcode}`;\n        const el_str = commonutils_1.Utils.createElement('div', 'kintoneplugin-input-outer', [\n            commonutils_1.Utils.ce('textarea', '', [], '', {\n                'id': id,\n                'value': saved_value,\n                'rows': '10',\n                'cols': '60'\n            })\n        ]);\n        // const el_str = Utils.createElement('div', 'kintoneplugin-input-outer', [\n        //     Utils.ce('textarea', 'kintoneplugin-input-text', [], '', {\n        //         'id': id\n        //         , 'value': saved_value\n        //         , 'rows': '10'\n        //         , 'cols': '30'\n        //     })\n        // ])\n        const node_block = ConfigBuilder.make_parts_block(el_str, input_field.label, input_field.desc);\n        return node_block;\n    }\n    /**\n     * チェックボックス入力ブロックを構築する\n     * @param input_field 設定項目の定義\n     * @returns\n     */\n    make_checkbox_block(input_field) {\n        if (this.config == undefined || this.props == undefined) {\n            throw new Error('インスタンスが初期化されていません');\n        }\n        if (input_field == undefined || input_field.accept == undefined) {\n            throw new Error('ConfigBuidler.make_checkbox_block(): 必要なプロパティ accept が未定義です。設定を見直してください。');\n        }\n        const fieldcode = input_field.code;\n        let saved_value = this.config[fieldcode];\n        if (saved_value == undefined) {\n            saved_value = [];\n        }\n        console.log({ saved_value });\n        const id = `checkbox-${fieldcode}`;\n        const list_checkbox = input_field.accept.map(box_value => {\n            const checkbox_id = `${id}-${box_value}`;\n            console.log({ saved_value });\n            console.log({ box_value });\n            const attr_checkbox = {\n                'type': 'checkbox',\n                'name': 'checkbox',\n                'value': box_value,\n                'id': checkbox_id\n            };\n            if (saved_value.includes(box_value)) {\n                attr_checkbox['checked'] = \"checked\";\n            }\n            return commonutils_1.Utils.createElement('div', 'kintoneplugin-input-checkbox', [\n                commonutils_1.Utils.ce('span', 'kintoneplugin-input-checkbox-item', [\n                    commonutils_1.Utils.ce('input', 'kintoneplugin-input-checkbox-item', [], '', attr_checkbox),\n                    commonutils_1.Utils.ce('label', '', [], box_value, {\n                        'for': checkbox_id\n                    })\n                ])\n            ]);\n        });\n        const node_block = ConfigBuilder.make_parts_block(commonutils_1.Utils.ce('div', '', list_checkbox, '', {\n            'id': id\n        }), input_field.label, input_field.desc);\n        return node_block;\n    }\n    // ラジオボタンを構築する\n    make_radio_block(input_field, block_class = \"\") {\n        if (this.config == undefined || this.props == undefined) {\n            throw new Error('インスタンスが初期化されていません');\n        }\n        const fieldcode = input_field.code;\n        const saved_string = this.config[fieldcode];\n        if (input_field == undefined || input_field.accept == undefined) {\n            throw new Error('ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。');\n        }\n        const el_options = input_field.accept.map((label) => {\n            const id = `radio-${fieldcode}-${label}`;\n            const name = `radio-${fieldcode}`;\n            const el_radio = commonutils_1.Utils.createElement('input');\n            el_radio.setAttribute('type', 'radio');\n            el_radio.setAttribute('name', name);\n            el_radio.setAttribute('value', label);\n            el_radio.setAttribute('id', id);\n            if (label == saved_string) {\n                el_radio.setAttribute('checked', 'checked');\n            }\n            const el_label = commonutils_1.Utils.createElement('label', '', [], label);\n            el_label.setAttribute('for', id);\n            return commonutils_1.Utils.createElement('span', 'kintoneplugin-input-radio-item', [el_radio, el_label]);\n        });\n        const el_radio = commonutils_1.Utils.createElement('div', 'kintoneplugin-input-radio', el_options);\n        el_radio.id = fieldcode;\n        const node_block = ConfigBuilder.make_parts_block(el_radio, input_field.label, input_field.desc, block_class);\n        return node_block;\n    }\n    /**\n     * ドロップダウン形式でフィールドを選択できる設定項目用HTMLノードを構築して返す\n     * @param fieldcode フォームに指定するフィールドコード、保存値もこのコードで読み込む\n     * @param empty_label 選択肢のデフォルト値を指定する、 nullの場合は選択必須のドロップダウンとなる\n     * @param block_class ブロック全体に与えるクラス、省略可\n     * @returns\n     */\n    make_dropdown_fieldselect_block(input_field, empty_label = null, block_class = \"\") {\n        const form_types = [];\n        const layout_types = [];\n        if (input_field.accept == undefined) {\n            throw new Error('ConfigBuidler.make_dropdown_fieldselect_block(): 必要なプロパティ accept が未定義です。設定を見直してください。');\n        }\n        input_field.accept.forEach((type) => {\n            if (ConfigBuilder.is_layout_info(type)) {\n                layout_types.push(type);\n            }\n            else {\n                form_types.push(type);\n            }\n        });\n        if (this.config == undefined || this.props == undefined) {\n            throw new Error('インスタンスが初期化されていません');\n        }\n        if (layout_types.length > 0 && this.layout == undefined) {\n            throw new Error('レイアウト情報をロードしていません。load_layout_info() を事前に呼び出してください。');\n        }\n        if (layout_types.length > 0 && form_types.length > 0) {\n            throw new Error('フォーム情報のフィールドとレイアウト情報のフィールドとが混在したドロップダウンは構築できません。');\n        }\n        const fieldcode = input_field.code;\n        const saved_string = this.config[fieldcode];\n        let node_dropdown;\n        if (form_types.length > 0) { // フォーム情報の取得（通常のフィールド）\n            node_dropdown = ConfigBuilder.build_fields_dropdown(this.props, form_types, saved_string, fieldcode, empty_label);\n        }\n        else if (layout_types.length > 0) { // レイアウト情報の取得（主にスペーサー）\n            node_dropdown = ConfigBuilder.build_fields_dropdown(this.layout, layout_types, saved_string, fieldcode, empty_label);\n        }\n        else {\n            throw new Error('フォーム情報またはレイアウト情報が空欄で呼び出されました');\n        }\n        const node_block = ConfigBuilder.make_parts_block(node_dropdown, input_field.label, input_field.desc, block_class);\n        return node_block;\n    }\n    make_incremental_table_block(input_field) {\n        if (this.config == undefined || this.props == undefined) {\n            throw new Error('インスタンスが初期化されていません');\n        }\n        const fieldcode = input_field.code;\n        const saved_rows = this.config[fieldcode];\n        console.log(saved_rows);\n        const el_table = this.build_incremental_table(input_field, saved_rows);\n        const node_block = ConfigBuilder.make_parts_block(el_table, input_field.label, input_field.desc);\n        return node_block;\n    }\n    /**\n     * 見出しノードを含むブロックを構築して返す\n     * @param input_field 見出しノード用の設定アイテム\n     * @returns\n     */\n    make_subtitle_block(input_field) {\n        const class_heading = 'display-6 mb-3';\n        const heading = commonutils_1.Utils.ce('div', class_heading, [], input_field.label);\n        const desc = commonutils_1.Utils.ce('div', 'ms-4 mt-2 mb-5', [], input_field.desc);\n        return commonutils_1.Utils.createElement('div', '', [\n            heading, desc\n        ]);\n    }\n    // レイアウト情報を取得する。スペース情報を取るにはここが必要\n    async load_layout_info() {\n        const layout = await kintone.api('/k/v1/preview/app/form/layout', 'GET', {\n            app: kintone.app.getId()\n        });\n        console.log(layout);\n        // type = 'SPACER' のフィールドだけをピックアップする。他のタイプが必要な場合は適宜追加する。\n        const layout_infos = layout.layout.reduce((prev, curr) => {\n            if (curr.type == \"GROUP\") {\n                console.log(`curr: ${curr.type}`);\n                const spacers = curr.layout.reduce((row_prev, row_curr) => {\n                    const row_spacers = row_curr.fields.filter((row_field) => {\n                        console.log(row_field.type);\n                        return row_field.type == \"SPACER\";\n                    });\n                    row_prev = row_prev.concat(row_spacers);\n                    console.log(`row_prev: ${row_prev}`);\n                    return row_prev;\n                }, []);\n                prev.concat(spacers);\n            }\n            else {\n                prev = prev.concat(curr.fields.filter((field) => {\n                    return field.type == 'SPACER';\n                }));\n            }\n            return prev;\n        }, []);\n        // 整形\n        this.layout = layout_infos.reduce((prev, curr) => {\n            curr.code = curr.elementId;\n            curr.label = curr.elementId;\n            prev[curr.code] = curr;\n            return prev;\n        }, {});\n        console.log(this.layout);\n    }\n}\nexports.ConfigBuilder = ConfigBuilder;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigManager = void 0;\nrequire(\"@shin-chan/kypes\"); // kintone types\n// import { Utils } from \"commonutils\";\nconst config_utilities_1 = require(\"./config-utilities\");\nconst config_builder_1 = require(\"./config-builder\");\nconst common_1 = require(\"./common\");\nconst commonutils_1 = require(\"commonutils\");\n/**\n * 設定画面のメイン処理\n * 設定値を読み込んで初期化、設定画面の構築、入力の受付を担当\n */\nclass ConfigManager {\n    KEY_CONFIG = 'config';\n    setting_input;\n    config = {};\n    hooks = {};\n    constructor(PLUGIN_ID, setting_input, settings_preference = undefined) {\n        const CONF = kintone.plugin.app.getConfig(PLUGIN_ID);\n        this.set_config(CONF);\n        console.log(this.config);\n        this.setting_input = setting_input;\n        if (settings_preference) {\n            this.set_preference(settings_preference);\n        }\n    }\n    // プラグインのタイトルや説明を表示する\n    set_preference(prefs) {\n        const node_title = document.getElementById('plugin_title');\n        if (node_title) {\n            node_title.textContent = prefs.title;\n        }\n        const node_description = document.getElementById('plugin_description');\n        if (node_description) {\n            node_description.textContent = prefs.description;\n        }\n    }\n    /**\n     * 設定画面を構築する。その際にfields APIを呼び出して、アプリのフィールド情報を利用する。\n     */\n    build() {\n        kintone.api('/k/v1/preview/app/form/fields', // 設定中のフィールドも取得できるようにする\n        'GET', {\n            app: kintone.app.getId()\n        }).then(async (resp) => {\n            const node_settings = this.make_setting_fields(resp.properties); // 設定フィールド配列\n            const btn_submit = this.make_button_submit(); // 適用ボタン\n            const btn_cancel = this.make_button_cancel(); // キャンセルボタン\n            // トップのフォームノードを構築して配置\n            const form_node = (async () => {\n                const node = commonutils_1.Utils.createElement('form', '', await node_settings);\n                node.id = 'form_settings';\n                return node;\n            })();\n            // 設定フォームのトップに設置\n            const top = document.getElementById('config_body');\n            top?.appendChild(await form_node);\n            const buttons = commonutils_1.Utils.createElement('div', 'mt-5', [\n                btn_cancel,\n                btn_submit\n            ]);\n            top?.appendChild(buttons);\n        }).then((_resp) => {\n            // loadイベントの処理\n            // console.log('execute load events')\n            this.call_target_event('load');\n        }).catch((err) => {\n            throw err;\n        });\n    }\n    // 指定したキーのイベントに登録があれば逐次実行する\n    async call_target_event(event_name) {\n        const funcs = this.hooks[event_name];\n        if (funcs == undefined) {\n            console.info(`イベント[${event_name}]は未登録です。`);\n            return;\n        }\n        for (const func of funcs) {\n            if (func != undefined) {\n                console.log({ func });\n                await func();\n            }\n        }\n    }\n    /**\n     * Settings.input の設定を参照して設定画面のレイアウトを構築する\n     * @param builder 設定済みのConfigBuilderインスタンス\n     * @returns\n     */\n    layout_inputs(builder, input) {\n        const setting_items = input.map((config) => {\n            const paragraph = this.make_paragraph(builder, config);\n            return paragraph;\n        });\n        return setting_items;\n    }\n    /**\n     * Settings.inputの定義をひとつ受け取り、渡された設定項目のDOMを構築して返す\n     * @param builder 初期設定済みのConfigBuilder\n     * @param config 設定項目の定義\n     * @returns\n     */\n    make_paragraph(builder, config) {\n        // TODO: ラジオボタンやドロップダウンもここから構築する\n        switch (config.type) {\n            case common_1.FieldType.Text:\n                return builder.make_string_block(config);\n            case common_1.FieldType.MultilineText:\n                return builder.make_multiline_block(config);\n            case common_1.FieldType.Radio:\n                return builder.make_radio_block(config);\n            case common_1.FieldType.Number:\n                return builder.make_string_block(config, 'number');\n            case common_1.FieldType.Checkbox:\n                return builder.make_checkbox_block(config);\n            case common_1.FieldType.IncrementalTable:\n                return builder.make_incremental_table_block(config);\n            case common_1.FieldType.Label: // 見出しノード\n                return builder.make_subtitle_block(config);\n            case common_1.FieldType.Separator: // セパレーターノード\n                return commonutils_1.Utils.createElement('div', 'mt-5 bg-info');\n            case common_1.FieldType.Dropdown_FieldSelect:\n                if (!('accept' in config)) {\n                    throw new Error('プロパティ accept が必要です。config/settings.ts の設定を見直してください。');\n                }\n                return builder.make_dropdown_fieldselect_block(config);\n            default:\n                throw new Error(`未実装のFieldTypeを要求しています。${config.type} を実装してください。`);\n        }\n    }\n    set_config(CONF) {\n        const serialized = commonutils_1.Utils.get_from(CONF, this.KEY_CONFIG, '');\n        if (serialized == '') {\n            console.info('設定値がありません。初期値で開始します。');\n        }\n        else {\n            this.config = JSON.parse(serialized);\n        }\n    }\n    // プラグイン設定値を取得する(deserializedした辞書を取得できる)\n    get_config(key = undefined) {\n        if (key == undefined) {\n            return this.config; // {[fieldcode:string]: string} の辞書、フィールドコードで引いてラベルを得られる\n        }\n        if (key in this.config) {\n            return this.config[key];\n        }\n        throw new Error(`未定義または未設定の設定キーが指定されました: [${key}]`);\n    }\n    /**\n     * 設定項目のノード構築と動作設定と表示順序\n     * @param props fields.json APIから取得したフィールド情報\n     * @returns\n     */\n    async make_setting_fields(props) {\n        const builder = new config_builder_1.ConfigBuilder(props, this.config);\n        await builder.load_layout_info(); // スペース情報を取得するために必要\n        // レイアウトの構築\n        return this.layout_inputs(builder, this.setting_input);\n    }\n    // CONFに格納する辞書を構築する\n    store_parameters() {\n        const store = {};\n        const this_form = document.getElementById('form_settings');\n        if (this_form == null) {\n            throw new Error('ERROR: フォーム要素を取得できませんでした。');\n        }\n        const config_tinker = new config_utilities_1.ConfigUtilities(this_form);\n        this.setting_input.forEach((config) => {\n            if (config.type == common_1.FieldType.Label || config.type == common_1.FieldType.Separator) {\n                // 保存不要なアイテム\n                return;\n            }\n            config = config;\n            const code = config.code;\n            const required = config.required;\n            const selected = config_tinker.get_selected(code, config.type);\n            if (selected) {\n                store[code] = selected;\n            }\n            else {\n                if (required) {\n                    const msg = `必須の設定項目 [${config.label}] が未設定です(${code})`;\n                    console.error(msg);\n                    throw new Error(msg);\n                }\n                else {\n                    store[code] = '';\n                }\n            }\n        });\n        console.log(store);\n        return store;\n    }\n    // 適用ボタン\n    make_button_submit() {\n        const btn_submit = commonutils_1.Utils.createElement('button', 'kintoneplugin-button-dialog-ok');\n        btn_submit.setAttribute('type', 'button');\n        btn_submit.textContent = '適用';\n        btn_submit.addEventListener('keydown', (event) => {\n            if (event.isComposing || event.code == 'Enter') {\n                console.info('適用ボタンのenterを無効化しました。');\n                return false;\n            }\n        });\n        btn_submit.addEventListener('click', async (event) => {\n            event.preventDefault();\n            const this_form = document.getElementById('form_settings');\n            if (this_form == null) {\n                throw 'ERROR: フォーム要素を取得できませんでした。';\n            }\n            // submitイベントを実行する\n            await this.call_target_event('submit');\n            // 設定値を格納する\n            try {\n                const serialized = JSON.stringify(this.store_parameters());\n                const config = {};\n                config[this.KEY_CONFIG] = serialized;\n                kintone.plugin.app.setConfig(config, function () {\n                    alert('🆙 プラグイン設定を保存しました。アプリの更新をお忘れなく！');\n                    window.location.href = '../../flow?app=' + kintone.app.getId();\n                });\n            }\n            catch (error) {\n                alert(`⚠️ ${error}`);\n            }\n        });\n        return btn_submit;\n    }\n    // キャンセルボタン\n    make_button_cancel() {\n        const btn_cancel = commonutils_1.Utils.createElement('button', 'js-cancel-button kintoneplugin-button-dialog-cancel');\n        btn_cancel.textContent = 'キャンセル';\n        btn_cancel.addEventListener('click', function (event) {\n            console.log(event);\n            window.location.href = '../../' + kintone.app.getId() + '/plugin/';\n        });\n        return btn_cancel;\n    }\n    // イベントフックを登録する\n    add_hook(event_name, func) {\n        if (this.hooks[event_name] == undefined) {\n            this.hooks[event_name] = [];\n        }\n        this.hooks[event_name]?.push(func);\n    }\n}\nexports.ConfigManager = ConfigManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConfigUtilities = void 0;\nconst commonutils_1 = require(\"commonutils\");\n// import { Constants } from \"../constants\";\nconst common_1 = require(\"./common\");\n/**\n * 設定画面の共通処理\n */\nclass ConfigUtilities {\n    static DEFAULT_OPTION = '----'; // 未選択状態を表す文字列\n    config_form;\n    whole_selected_field_codes;\n    constructor(config_form) {\n        this.config_form = config_form;\n        // フィールドの重複チェック\n        this.whole_selected_field_codes = [];\n    }\n    add_selected_field_codes = (code) => {\n        this.whole_selected_field_codes.push(code);\n    };\n    // プルダウンで選択済みのフィールドに重複がないかチェックする\n    is_overlapped(additional_labels) {\n        return commonutils_1.Utils.is_overlapped(this.overlapped(additional_labels));\n    }\n    overlapped(additional_labels = undefined) {\n        if (additional_labels != undefined) {\n            this.whole_selected_field_codes.concat(additional_labels);\n        }\n        return commonutils_1.Utils.overlapped(this.whole_selected_field_codes);\n    }\n    clear_selected_field_labels() {\n        this.whole_selected_field_codes = [];\n    }\n    /**\n     * ドロップダウン要素から選択しているフィールドのフィールドコードを取得する\n     * @param select_node_id 選択したフィールドのフィールドコード\n     * @returns\n     */\n    get_selected_fieldcode = (select_node_id) => {\n        console.log(`[ConfigTinker] get_selected_fieldcode(): ${select_node_id}`);\n        const node = document.getElementById(select_node_id);\n        if (node.selectedIndex == -1) { // 選択されていない\n            return '';\n        }\n        else if (node.options[node.selectedIndex].label == ConfigUtilities.DEFAULT_OPTION) { // デフォルト値（空欄）が選択されている\n            return '';\n        }\n        const code = node.selectedOptions[0].getAttribute('fieldcode');\n        if (code == null) {\n            throw new Error(`ノード[ ${select_node_id} ]はフィールド選択ではありません。`);\n        }\n        return code;\n    };\n    /**\n     * ドロップダウン要素から選択文字列を取得する\n     * @param select_node_id ドロップダウンのID\n     * @returns\n     */\n    get_selected_label = (select_node_id) => {\n        console.log(`[ConfigTinker] get_selected_label(): ${select_node_id}`);\n        const node = document.getElementById(select_node_id);\n        if (node.selectedIndex == -1) {\n            return '';\n        }\n        return node.selectedOptions[0].label;\n    };\n    /**\n     * ラジオボタン要素から選択文字列を取得する\n     * @param select_node_id ラジオボタンのName\n     * @returns\n     */\n    get_selected_radio(radio_id) {\n        const radio_name = `radio-${radio_id}`;\n        console.log(`[ConfigTinker] get_selected_radio(): ${radio_name}`);\n        const nodes = document.getElementsByName(radio_name);\n        const length = nodes.length;\n        for (let idx = 0; idx < length; idx++) {\n            const node_input = nodes[idx];\n            if (node_input.checked == true) {\n                return node_input.value;\n            }\n        }\n        return \"\";\n    }\n    /**\n     * テキスト入力要素から入力文字列を取得する\n     * @param select_node_id テキスト入力のName\n     * @returns\n     */\n    get_string_value(fieldcode) {\n        const field_id = `string-${fieldcode}`;\n        console.log(`[ConfigTinker] get_text_value(): ${field_id}`);\n        const node_input = document.getElementById(field_id);\n        return node_input.value;\n    }\n    /**\n     * 複数行テキスト入力要素から入力文字列を取得する\n     * @param select_node_id テキスト入力のName\n     * @returns\n     */\n    get_multilinetext_value(fieldcode) {\n        const field_id = `multiline-${fieldcode}`;\n        console.log(`[ConfigTinker] get_multiline_value(): ${field_id}`);\n        const node_input = document.getElementById(field_id);\n        return node_input.value;\n    }\n    /**\n     * インクリメンタルテーブルのfieldcodeを指定してinput要素の値だけを抜き出した配列を構築する\n     * @param fieldcode テーブル要素のフィールドコード\n     * @returns\n     */\n    get_incremental_table_values(fieldcode) {\n        const field_id = `table-${fieldcode}`;\n        const node_table = document.getElementById(field_id);\n        console.log(field_id);\n        console.log(node_table);\n        if (node_table == null) {\n            throw new Error(`指定したテーブルが見つかりません。(id: ${field_id})`);\n        }\n        return this.abstruct_from_incremental_table(node_table);\n    }\n    /**\n     * インクリメンタルテーブルからinput要素の値だけを抜き出した配列を構築する\n     * @param node_table インクリメンタルテーブルのDOM\n     * @returns\n     */\n    abstruct_from_incremental_table(node_table) {\n        const whole_headers = Array.from(node_table.rows).filter((row) => {\n            return row.firstChild?.nodeName == \"TH\"; // ヘッダ行を取り出す\n        }).map((row) => {\n            const texts = Array.from(row.cells).filter((cell) => {\n                return cell.innerText != \"\";\n            }).map((cell) => {\n                return cell.innerText;\n            });\n            console.log(texts);\n            return texts;\n        });\n        const headers = whole_headers[0];\n        console.log({ headers });\n        const values = Array.from(node_table.rows).filter((row) => {\n            return row.firstChild?.nodeName != \"TH\"; // ヘッダ行を除く\n        }).map((row) => {\n            const cells = Array.from(row.cells).filter((cell) => {\n                const input_element = cell.getElementsByClassName('kintoneplugin-input-text')[0];\n                const selected_element = cell.getElementsByClassName('select-kintone-field')[0];\n                const checkbox_element = cell.getElementsByClassName('kintoneplugin-input-checkbox-item');\n                return input_element !== undefined || selected_element !== undefined || checkbox_element !== undefined;\n            }).map((cell) => {\n                // 一行テキスト\n                const input_element = cell.getElementsByClassName('kintoneplugin-input-text')[0];\n                console.log({ input_element });\n                if (input_element != null) {\n                    return input_element.value;\n                }\n                // 択一選択\n                const selected_element = cell.getElementsByClassName('select-kintone-field')[0];\n                console.log({ selected_element });\n                if (selected_element != null) {\n                    const index = selected_element.selectedIndex;\n                    console.log({ index });\n                    const option = selected_element[index];\n                    if ('fieldcode' in selected_element[index].attributes) {\n                        console.log(`selected_element fieldcode: ${option.getAttribute('fieldcode')}`);\n                        const fieldcode = option.getAttribute('fieldcode');\n                        if (fieldcode != null) {\n                            return fieldcode;\n                        }\n                    }\n                    return selected_element[index].label;\n                }\n                // チェックボックス\n                console.log({ cell });\n                const checkbox_items = cell.getElementsByClassName('kintoneplugin-input-checkbox');\n                console.log({ checkbox_items });\n                if (checkbox_items != null) {\n                    return Array.from(checkbox_items).filter(item => {\n                        const node_checkbox = item.childNodes[0].childNodes[0];\n                        return node_checkbox.checked;\n                    }).map(item => {\n                        console.log({ item });\n                        if (item.textContent == null) {\n                            throw new Error('ラベルのないチェックボックスが定義されています。');\n                        }\n                        return item.textContent;\n                    });\n                }\n                throw new Error(`未対応のテーブルセル ${row} が渡されました。`);\n            });\n            return cells;\n        });\n        console.log({ values }); // string[][]\n        const filtered = values.filter((row) => {\n            return row.length > 0;\n        }).filter((row) => {\n            return row.filter((cell) => {\n                return cell.length > 0;\n            }).length > 0;\n        });\n        console.log(filtered);\n        if (filtered.length == 0) {\n            return null;\n        }\n        // headeresとvaluesで辞書を構築して返す。\n        // const keys = ['a', 'b', 'c'];\n        // const values = [1, 2, 3];\n        const table_values = values.map((value) => {\n            return value.reduce((prev, cell, index) => {\n                prev[headers[index]] = cell;\n                return prev;\n            }, {});\n        });\n        console.log({ table_values });\n        return table_values;\n    }\n    // FieldTypeを受け取って適切な値を返す\n    get_selected(node_id, field_type) {\n        switch (field_type) {\n            case common_1.FieldType.Dropdown:\n            case common_1.FieldType.Checkbox:\n                return this.get_selected_label(node_id);\n            case common_1.FieldType.Radio:\n                return this.get_selected_radio(node_id);\n            case common_1.FieldType.Dropdown_FieldSelect:\n                return this.get_selected_fieldcode(node_id);\n            case common_1.FieldType.Text:\n                return this.get_string_value(node_id);\n            case common_1.FieldType.MultilineText:\n                return this.get_multilinetext_value(node_id);\n            case common_1.FieldType.IncrementalTable:\n                return this.get_incremental_table_values(node_id);\n        }\n        throw new Error(`get_selected(): 不明なフィールドタイプが渡されました (field_type: ${field_type})`);\n    }\n}\nexports.ConfigUtilities = ConfigUtilities;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FieldBuilder = void 0;\nconst commonutils_1 = require(\"commonutils\");\nconst common_1 = require(\"./common\");\nconst config_builder_1 = require(\"./config-builder\");\nclass FieldBuilder {\n    props;\n    empty_label;\n    constructor(props, empty_label = '----') {\n        this.props = props;\n        this.empty_label = empty_label;\n    }\n    // \n    // TODO: テキストフィールド以外を追加実装する\n    // 追加実装した場合は、あわせて ConfigUtilities.get_selected()にも保存処理の実装が必要です。\n    //  ConfigManager.make_paragraph() からも定義してください。\n    /**\n     * FieldTypeに合わせたセルを構築して返す\n     * @param table_id 構築中テーブルのフィールドコード\n     * @param column テーブルセルに入れるフィールド設定、settings.jsから。\n     * @param value 保存されていた値\n     * @param row_count 行番号\n     * @returns\n     */\n    build_table_cell(table_id, column, value, row_count) {\n        // TableMultipleColumnのケース\n        if ('accept' in column) {\n            switch (column.type) {\n                case common_1.FieldType.Checkbox: // チェックボックス\n                    return this.build_checkbox_cell(value, column, table_id, row_count);\n                case common_1.FieldType.Dropdown: // ドロップダウン\n                    return this.build_dropdown_cell(value, column);\n                case common_1.FieldType.Dropdown_FieldSelect: // フィールド選択ドロップダウン\n                    return this.build_dropdown_fieldselect_cell(value, column);\n            }\n        }\n        // TableColumnのケース\n        else {\n            switch (column.type) {\n                case common_1.FieldType.Text: // 一行テキスト\n                    return this.build_textcell(value);\n            }\n        }\n        throw new Error(`未定義のFieldTypeが渡されました。FieldTypeに${column.type} を実装してください。`);\n    }\n    /**\n     * 一行テキストセルを構築\n     * @param preset 設定画面の保存値\n     * @param column セルの設定情報\n     * @returns\n     */\n    build_textcell = (preset) => {\n        preset = preset === undefined ? '' : preset;\n        return commonutils_1.Utils.createElement('div', 'kintoneplugin-input-outer', [\n            commonutils_1.Utils.createElement('input', 'kintoneplugin-input-text', [], undefined, {\n                'type': 'text',\n                'value': preset\n            })\n        ]);\n    };\n    /**\n     * チェックボックスセルを構築\n     * @param preset 設定画面の保存値\n     * @param column セルの設定情報\n     * @returns\n     */\n    build_checkbox_cell = (preset, column, table_id, row_count) => {\n        const list_checkbox = column.accept.map(box_value => {\n            const checkbox_id = `${table_id}-${row_count}-${box_value}`;\n            preset = preset === undefined ? [] : preset;\n            console.log({ box_value });\n            console.log({ preset });\n            const checked = preset.includes(box_value) ? \"checked\" : \"\";\n            const node_checkbox = commonutils_1.Utils.ce('input', '', [], '', {\n                'type': 'checkbox',\n                'name': 'checkbox',\n                'value': box_value,\n                'id': checkbox_id\n            });\n            if (checked != \"\") {\n                node_checkbox.setAttribute('checked', checked);\n            }\n            return commonutils_1.Utils.ce('div', 'kintoneplugin-input-checkbox', [\n                commonutils_1.Utils.createElement('span', 'kintoneplugin-input-checkbox-item', [\n                    node_checkbox,\n                    commonutils_1.Utils.ce('label', '', [], box_value, {\n                        'for': checkbox_id\n                    })\n                ])\n            ]);\n        });\n        return commonutils_1.Utils.createElement('div', '', list_checkbox);\n    };\n    build_dropdown_cell = (preset, column) => {\n        if (column == undefined || !('accept' in column)) {\n            throw new Error('選択肢情報としてundefinedが渡されました。');\n        }\n        preset = preset === undefined ? '' : preset;\n        // static build_fields_dropdown(\n        //     props: any\n        //     , accepts: string[]\n        //     , selected_fieldcode: string = \"\"\n        //     , selected_node_id = \"\"\n        //     , empty_label: string | null = null\n        // ) {\n        const field_dropdown = commonutils_1.Utils.createElement('select', 'select-kintone-field');\n        if (column.empty_label != null) {\n            const empty_item = commonutils_1.Utils.createElement('option');\n            empty_item.label = column.empty_label;\n            field_dropdown.appendChild(empty_item);\n        }\n        column.accept.forEach((label) => {\n            const item = commonutils_1.Utils.createElement('option');\n            item.label = label;\n            if (label == preset) {\n                item.setAttribute('selected', '');\n            }\n            field_dropdown.appendChild(item);\n        });\n        return commonutils_1.Utils.createElement('div', '', [\n            commonutils_1.Utils.createElement('div', \"kintoneplugin-select-outer\", [\n                commonutils_1.Utils.createElement('div', 'kintoneplugin-select', [field_dropdown])\n            ])\n        ]);\n    };\n    /**\n     *\n     * @param preset 保存済み設定情報\n     * @param column フィールド選択ドロップダウンの選択肢として列挙したいフィールドの型情報を含むデータ\n     */\n    build_dropdown_fieldselect_cell = (preset, column) => {\n        if (column == undefined || !('accept' in column)) {\n            throw new Error('選択肢情報としてundefinedが渡されました。');\n        }\n        const parts = config_builder_1.ConfigBuilder.get_formparts(this.props, column.accept);\n        const field_dropdown = commonutils_1.Utils.createElement('select', 'select-kintone-field');\n        field_dropdown.id = preset === undefined ? '' : preset;\n        // 未選択アイテム（初期値）を作成\n        const empty_item = commonutils_1.Utils.createElement('option');\n        empty_item.label = this.empty_label;\n        field_dropdown.appendChild(empty_item);\n        for (const code in parts) {\n            const prop = parts[code];\n            const item = commonutils_1.Utils.createElement('option');\n            item.setAttribute('fieldcode', code);\n            item.label = prop.label;\n            if (code == preset) {\n                item.setAttribute('selected', '');\n            }\n            field_dropdown.appendChild(item);\n        }\n        return commonutils_1.Utils.createElement('div', '', [\n            commonutils_1.Utils.createElement('div', \"kintoneplugin-select-outer\", [\n                commonutils_1.Utils.createElement('div', 'kintoneplugin-select', [field_dropdown])\n            ])\n        ]);\n    };\n}\nexports.FieldBuilder = FieldBuilder;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IncrementalTableBuilder = void 0;\nconst commonutils_1 = require(\"commonutils\");\nconst config_builder_1 = require(\"./config-builder\");\nclass IncrementalTableBuilder {\n    table_conf;\n    saved_rows;\n    table_rows;\n    field_builder;\n    rows_count; // テーブル内部にもつ行数\n    constructor(input_field, saved_rows, field_builder) {\n        this.table_conf = input_field;\n        this.saved_rows = saved_rows;\n        this.field_builder = field_builder;\n        this.table_rows = [];\n        this.rows_count = 0;\n    }\n    build() {\n        // const fieldcode = this.table_conf.code\n        const table_cols = this.table_conf.table_cols; // カラム見出しの辞書\n        const spacer_count = table_cols.length - 3;\n        if (this.saved_rows == null || Object.keys(this.saved_rows).length == 0) {\n            // 保存されていない場合は空白の1行を追加する\n            this.table_rows.push(this.build_table_row(0, table_cols, undefined, spacer_count));\n        }\n        else {\n            // 保存されていた場合は全行を復旧する\n            // for (const opt of this.saved_rows) {\n            this.saved_rows.forEach((opt, index) => {\n                const row = this.build_table_row(index, table_cols, opt, spacer_count);\n                this.table_rows.push(row);\n            });\n            // })\n        }\n        return this.table_rows;\n    }\n    /**\n     * 設定テーブルの1行を構築する。ここではヘッダは構築しない。\n     * @param table_cols  カラムの見出しとセルのFieldStyleの辞書配列\n     * @param saved_data    保存された値、初期値はundefined\n     * @param spacer_cols   スペーサーをどこに入れるか？\n     * @returns\n     */\n    build_table_row(row_number, table_cols, saved_data = undefined, spacer_cols = 0) {\n        // 行を構築\n        console.log({ table_cols });\n        console.log({ saved_data });\n        const built_row = [];\n        for (let index = 0; index < table_cols.length; index++) {\n            const column = table_cols[index];\n            // const type = column.type        // FieldType\n            const value = saved_data == undefined ? undefined : saved_data[column.header];\n            console.log({ value });\n            const input_field = this.field_builder.build_table_cell(this.table_conf.code, column, value, row_number);\n            built_row.push(commonutils_1.Utils.ce('td', '', [\n                commonutils_1.Utils.ce('div', 'kintoneplugin-table-td-control', [\n                    commonutils_1.Utils.ce('div', 'kintoneplugin-table-td-control-value', [\n                        input_field\n                    ])\n                ])\n            ]));\n        }\n        // [+]ボタン\n        const node_button_add = this.create_button_row_add(table_cols);\n        // [-]ボタン\n        const node_button_remove = this.create_button_row_remove();\n        // スペーサー\n        console.log({ spacer_cols });\n        spacer_cols = spacer_cols < 0 ? 0 : spacer_cols;\n        const spacers = [...Array(spacer_cols)].map(() => {\n            return commonutils_1.Utils.createElement('td', 'td_spacer');\n        });\n        // 一行分を構築\n        const tds = [\n            ...built_row,\n            ...spacers,\n            commonutils_1.Utils.createElement('td', 'kintoneplugin-table-td-operation', [\n                node_button_add,\n                node_button_remove\n            ])\n        ];\n        this.rows_count = built_row.length;\n        const table_row = commonutils_1.Utils.createElement('tr', '', tds);\n        return table_row;\n    }\n    get_table_rows_count() {\n        const table_id = `table-${this.table_conf.code}`;\n        const table_node = document.getElementById(table_id);\n        if (table_node) {\n            return table_node.getElementsByTagName('tr').length;\n        }\n        throw new Error(`指定したテーブルID ${table_id} が存在しません。`);\n    }\n    /**\n     * プルダウンテーブルの[+]ボタンを生成する\n     * @param table_cols プルダウンの選択肢として並べるフィールド一覧\n     * @param classname_select_element 追加する行のプルダウンフィールドに与えるクラス名\n     * @returns\n     */\n    // static create_button_row_add(fields: { [key: string]: DropdownData }, classname_select_element: string): HTMLButtonElement {\n    create_button_row_add(table_cols) {\n        const node_button_add = document.createElement('button');\n        node_button_add.className = 'kintoneplugin-button-add-row-image';\n        node_button_add.setAttribute('type', 'button');\n        node_button_add.setAttribute('title', 'Add row');\n        node_button_add.addEventListener('click', (event) => {\n            // テーブルを一行追加する\n            console.log(`テーブルを一行追加する${event}`);\n            const grand_tr = config_builder_1.ConfigBuilder.get_grand_tr(event.target);\n            const ancestor_tbody = grand_tr?.parentNode;\n            // const ancestor_tbody = self.closest('tbody')\n            if (grand_tr == null || ancestor_tbody == null) {\n                throw 'ERROR: 祖先のtbodyを取得できませんでした。';\n            }\n            const target = event?.target;\n            if (target == null) {\n                return;\n            }\n            const spacer_count = grand_tr.children.length - 1 - table_cols.length; // 列数 - プラマイボタン - デフォルト列数\n            const rows_count = this.get_table_rows_count() + 1;\n            const add_elem = this.build_table_row(rows_count, table_cols, undefined, spacer_count);\n            ancestor_tbody.insertBefore(add_elem, grand_tr.nextElementSibling);\n        });\n        return node_button_add;\n    }\n    // プルダウンテーブルの[-]ボタンを生成する\n    create_button_row_remove() {\n        const node_button_remove = document.createElement('button');\n        node_button_remove.className = 'kintoneplugin-button-remove-row-image';\n        node_button_remove.setAttribute('type', 'button');\n        node_button_remove.setAttribute('title', 'Delete this row');\n        node_button_remove.addEventListener('click', (event) => {\n            const grand_tr = config_builder_1.ConfigBuilder.get_grand_tr(event.target);\n            if (grand_tr.parentNode?.childNodes.length == 1) {\n                return;\n            }\n            grand_tr.parentNode?.removeChild(grand_tr);\n            // テーブルを一行削除する\n            console.log(`テーブルを一行削除する${event}`);\n        });\n        return node_button_remove;\n    }\n}\nexports.IncrementalTableBuilder = IncrementalTableBuilder;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./config-builder\"), exports);\n__exportStar(require(\"./config-manager\"), exports);\n__exportStar(require(\"./config-utilities\"), exports);\n__exportStar(require(\"./field-builder\"), exports);\n__exportStar(require(\"./incremental-table-builder\"), exports);\n__exportStar(require(\"./common\"), exports);\n","module.exports = {};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ButtonInstaller = void 0;\nconst utils_1 = require(\"./utils\");\nrequire(\"@shin-chan/kypes\"); // kintone types\n// ボタンを設置するライブラリ、イベントはset_button()する前にボタンに付与しておく前提\n// create_button(): ボタンノードを構築して取得する\n// add_button(): 取得したボタンノードを追加する\n// install(): 格納しているボタンをhmsに設置する\nclass ButtonInstaller {\n    class_hms_button = 'button-hms-items';\n    buttons = []; // 設置するボタン配列\n    // labelling_column: string | undefined    // 昇順・降順を付与したいカラムのヘッダ文字列\n    // definitions: ShortcutDefinitions        // ショートカットの定義\n    canvas; // プラグインキャンバス\n    constructor(classname = '') {\n        if (classname != '') {\n            this.class_hms_button = classname;\n        }\n    }\n    /**\n     * ボタンを構築する\n     * @param icon_label ボタンの表記\n     * @param tooltip ツールチップ表示\n     * @returns\n     */\n    create_button(icon_label, tooltip = '') {\n        const icon = utils_1.Utils.ce('span', '', [], icon_label);\n        icon.style.color = 'dodgerblue';\n        let button = utils_1.Utils.ce('button', this.class_hms_button, [icon], '', {\n            'title': tooltip\n        });\n        button = utils_1.Utils.decorate_menu_icon(button);\n        console.log(icon_label.length);\n        if (icon_label.length > 2) { // 2⃣文字までは28px、🐈など絵文字は2文字カウント\n            button.style.fontSize = '16px';\n        }\n        return button;\n    }\n    add_button(button) {\n        this.buttons.push(button);\n    }\n    install() {\n        if (this.already_installed()) {\n            console.info('ボタンはすでに設置済みです。');\n            return;\n        }\n        // const buttons = this.create_buttons()\n        if (this.buttons.length == 0) {\n            console.info('ボタンが設定されていません。何もせずに終了します。');\n            return;\n        }\n        this.put_buttons(this.buttons);\n    }\n    set_canvas(canvas) {\n        this.canvas = canvas;\n    }\n    get_hms() {\n        const hms = kintone.app.getHeaderMenuSpaceElement();\n        if (hms == undefined) {\n            const msg = 'ボタン配置スペースが取得できませんでした。';\n            console.error(msg);\n            throw new Error(msg);\n        }\n        return hms;\n    }\n    already_installed() {\n        const hms_buttons = document.getElementsByClassName(this.class_hms_button);\n        if (hms_buttons.length > 0) {\n            return true;\n        }\n        return false;\n    }\n    put_buttons(buttons) {\n        const hms = this.canvas === undefined ? this.get_hms() : this.canvas;\n        buttons.forEach((btn) => {\n            console.log(hms);\n            hms.append(btn);\n        });\n    }\n    // create_shortcut_button(shortcut: Shortcut): HTMLElement {\n    //     const icon_label = shortcut.icon\n    //     const url = shortcut.link\n    //     const tip = shortcut.tooltip\n    //     const icon = Utils.ce('span', '', [], icon_label)\n    //     icon.style.color = 'dodgerblue'\n    //     let button = Utils.ce('button', this.class_hms_button, [icon], '', {\n    //         'title': tip\n    //     })\n    //     button = Utils.decorate_menu_icon(button)\n    //     console.log(icon_label.length)\n    //     if (icon_label.length > 2) {    // 2⃣文字までは28px、🐈など絵文字は2文字カウント\n    //         button.style.fontSize = '16px'\n    //     }\n    //     if (url != \"\") {\n    //         console.log({ url })\n    //         button.addEventListener('click', (_event) => {\n    //             location.href = url\n    //         })\n    //     }\n    //     return button\n    // }\n    get_header_element(index_text) {\n        const headers = document.querySelectorAll('.recordlist-header-label-gaia');\n        return Array.from(headers).filter((header) => {\n            return header.textContent == index_text;\n        });\n    }\n}\nexports.ButtonInstaller = ButtonInstaller;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./utils\"), exports);\n__exportStar(require(\"./button_installer\"), exports);\n__exportStar(require(\"./plugin_canvas\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PluginCanvas = void 0;\nconst utils_1 = require(\"./utils\");\n// import 'bootstrap'\n// import \"../scss/style.scss\";    // bootstrapのスタイル\nrequire(\"@shin-chan/kypes\"); // kintone types\nclass PluginCanvas {\n    static CLASS_DISMISS = 'offcanvas-dismiss';\n    id_island;\n    id_offcanvas;\n    title_offcanvas;\n    island; // マウスホバーでプラグインアイコンを表示する島ノード\n    enable_offcanvas;\n    constructor(title, id_island, default_element = null, icon_element = undefined) {\n        this.title_offcanvas = title;\n        this.id_island = `plugin_island_id_${id_island}`;\n        this.id_offcanvas = `offcanvas_${this.id_island}`;\n        // 初期化またはオフキャンバスを使わない\n        if (id_island == \"\") {\n            console.log(`[${this.constructor.name}] オフキャンバスを使いません。`);\n            if (default_element == null) {\n                default_element = kintone.app.getHeaderMenuSpaceElement();\n            }\n            if (default_element == null) {\n                throw new Error('kintone.app.HeaderMenuSpaceElement() を取得できませんでした。');\n            }\n            this.island = default_element;\n            this.enable_offcanvas = false;\n            return;\n        }\n        // オフキャンバスを使用する\n        this.enable_offcanvas = true;\n        const already = document.getElementById(this.id_island);\n        if (already) { // 同じIDで既存の島があればそれを使う\n            console.log(`[${this.constructor.name}] 既存のオフキャンバスを使用します。`);\n            this.island = already;\n        }\n        else {\n            console.log(`[${this.constructor.name}] オフキャンバスをID[${this.id_island}]で作成します。`);\n            // オフキャンバスのアイコン\n            const icon_balloon = ((icon) => {\n                if (icon) {\n                    return icon;\n                }\n                else {\n                    // return ut.ce('i', 'fa-solid fa-comment-dots ps-2')\n                    const baloon = utils_1.Utils.ce('span', '', [], '🎈');\n                    baloon.style.cursor = 'pointer';\n                    return baloon;\n                }\n            })(icon_element);\n            icon_balloon.style.color = 'dodgerblue';\n            let island = utils_1.Utils.ce('div', 'bbk-tool-icon-box', [icon_balloon], '', {\n                'id': this.id_island,\n                'data-bs-toggle': 'offcanvas',\n                'aria-controls': this.id_offcanvas,\n                'data-bs-target': `#${this.id_offcanvas}`\n            });\n            island = utils_1.Utils.decorate_menu_icon(island);\n            this.island = island;\n            this.init_offcanvas();\n        }\n    }\n    init_offcanvas() {\n        const headerSpace = kintone.app.getHeaderMenuSpaceElement();\n        if (headerSpace) {\n            headerSpace.appendChild(this.get_node());\n            headerSpace.appendChild(this.build_node_offcanvas());\n        }\n    }\n    get_node() {\n        return this.island;\n    }\n    build_node_offcanvas() {\n        return utils_1.Utils.ce('div', 'offcanvas offcanvas-start', [\n            utils_1.Utils.ce('div', 'offcanvas-header', [\n                utils_1.Utils.ce('h5', 'offcanvas-title', [], this.title_offcanvas, {\n                    'id': `${this.id_offcanvas}Label`\n                }),\n                utils_1.Utils.ce('button', 'btn-close text-reset', [], '', {\n                    'data-bs-dismiss': 'offcanvas',\n                    'aria-label': 'Close'\n                })\n            ]),\n            utils_1.Utils.ce('div', 'offcanvas-body', [\n                utils_1.Utils.ce('div', 'mb-4', [], 'ここから各種プラグインを呼び出せます。')\n            ], '', {\n                'id': `${this.id_offcanvas}-body`\n            })\n        ], '', {\n            'tabindex': '-1',\n            'id': `${this.id_offcanvas}`,\n            'aria-labelledby': `${this.id_offcanvas}Label`,\n            'data-bs-backdrop': 'false'\n        });\n    }\n    append(node) {\n        if (this.enable_offcanvas) {\n            const offcanvas = document.getElementById(`${this.id_offcanvas}-body`);\n            // node.setAttribute('data-bs-dismiss', \"offcanvas\")\n            this.deal_dismiss_attribute(node);\n            offcanvas?.appendChild(node);\n        }\n        else {\n            this.island.append(node);\n        }\n    }\n    deal_dismiss_attribute(node) {\n        const dismissElements = Array.from(node.querySelectorAll(`.${PluginCanvas.CLASS_DISMISS}`));\n        console.log(dismissElements);\n        if (dismissElements.length > 0) {\n            dismissElements.map((element) => {\n                element.setAttribute('data-bs-dismiss', \"offcanvas\");\n            });\n        }\n        else {\n            node.setAttribute('data-bs-dismiss', \"offcanvas\");\n        }\n    }\n}\nexports.PluginCanvas = PluginCanvas;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Utils = void 0;\nclass Utils {\n    /**\n     * 重複禁止フィールドだけをピックアップする\n     * @param properties fields.jsonのレスポンスのproperties\n     * @param with_record_number RECORD_NUMBERフィールドを返すフラグ\n     */\n    static unique_properties(props, with_record_number = false) {\n        const results = [];\n        for (const fieldcode of Object.keys(props)) {\n            const prop = props[fieldcode];\n            if (prop.unique == true) {\n                results.push(prop);\n            }\n            else if (with_record_number && prop['type'] == 'RECORD_NUMBER') {\n                results.push(prop);\n            }\n        }\n        return results;\n    }\n    // 空文字列ではないことをチェックする\n    static is_not_empty_string(test_str) {\n        return !Utils.is_empty_string(test_str);\n    }\n    // 空文字列であることをチェックする\n    static is_empty_string(test_str) {\n        if (test_str == null || test_str == undefined) {\n            return true;\n        }\n        if (test_str.length > 0) {\n            return false;\n        }\n        return true;\n    }\n    // 設定値またはデフォルト値を取得\n    static get_from = (dic, conf_key, defaults) => {\n        if (dic.hasOwnProperty(conf_key)) {\n            return dic[conf_key];\n        }\n        return defaults;\n    };\n    static buildElement = (params) => {\n        const tag = params['tagName'];\n        const cl = params['className'] ? params['className'] : \"\";\n        const ce = params['childElements'] ? params['childElements'] : [];\n        const tc = params['textContent'] ? params['textContent'] : \"\";\n        const at = params['attrs'] ? params['attrs'] : {};\n        return Utils.createElement(tag, cl, ce, tc, at);\n    };\n    // ノードを構築して返す\n    static createElement = (tagName, className = \"\", childElements = [], textContent = \"\", attrs = undefined) => {\n        const el = document.createElement(tagName);\n        el.className = className;\n        el.textContent = textContent;\n        if (childElements.length > 0) {\n            childElements.forEach((child) => {\n                el.appendChild(child);\n            });\n        }\n        // 属性値をセット\n        if (attrs) {\n            Object.entries(attrs).forEach(([key, value]) => {\n                el.setAttribute(key, value);\n            });\n        }\n        return el;\n    };\n    // shotcut for createElement\n    static ce = (t, c = \"\", ce = [], tc = \"\", at = undefined) => {\n        return this.createElement(t, c, ce, tc, at);\n    };\n    /**\n     * kintoneのメニューアイコン風にスタイルを付与する\n     * @param el 装飾対象のノード\n     */\n    static decorate_menu_icon(el) {\n        el.style.height = '48px';\n        el.style.backgroundColor = '#f7f9fa';\n        el.style.fontSize = '28px';\n        el.style.border = '1px solid #e3e7e8';\n        el.style.display = 'inline';\n        el.style.marginLeft = '2px';\n        el.style.marginRight = '2px';\n        el.style.verticalAlign = 'middle';\n        return el;\n    }\n    /**\n     * テキストだけを持ったDIV要素を構築して返す\n     * @param msg innerText\n     * @returns\n     */\n    static simpleDiv = (msg) => {\n        return Utils.createElement('div', '', [], msg);\n    };\n    // 配列のうち、重複したものがあればTrueを返す\n    static is_overlapped = (list) => {\n        const overlapped = Utils.overlapped(list);\n        if (overlapped.length > 0) {\n            return true;\n        }\n        return false;\n    };\n    // 配列のうち、重複したものをUniqして返す\n    static overlapped = (list) => {\n        const overlapped = list.filter((x, _i, self) => {\n            return self.indexOf(x) !== self.lastIndexOf(x);\n        });\n        return Array.from(new Set(overlapped));\n    };\n    // 現在開いているkintoneドメインのうち指定した番号のアプリのURLを構築して返す\n    static get_application_url(appid) {\n        return `${location.protocol}//${location.host}/k/${appid}`;\n    }\n    // kintone clientのエラーを受け取ってメッセージを抽出し、文字列配列の形で返す\n    static retrieve_errors(error, max_msgs = -1) {\n        const errors = error?.error?.errors;\n        if (errors == undefined) {\n            return undefined;\n        }\n        // メッセージの構築\n        let whole_errors = [];\n        Object.keys(errors).forEach((field) => {\n            const msgs = errors[field].messages;\n            const comments = msgs.map((msg) => {\n                return `[${field}] ${msg}`;\n            });\n            whole_errors = whole_errors.concat(comments);\n        });\n        // ソート\n        whole_errors.sort();\n        // エラーレコードの件数が多い場合に省略\n        if (max_msgs >= 0 && max_msgs < whole_errors.length) {\n            const remain_msgs = whole_errors.length - max_msgs;\n            whole_errors = whole_errors.splice(0, max_msgs);\n            whole_errors.push(`以下${remain_msgs}件のエラーメッセージを省略しました。`);\n        }\n        return whole_errors;\n    }\n}\nexports.Utils = Utils;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// 定数定義、configとdesktopの双方で使う定義値をここで記述する\r\nexport const CONSTANTS = {\r\n    // プラグインのタイトル\r\n    PLUGIN_NAME: 'ChatGPT連携プラグイン'\r\n\r\n    // 分類が未選択の場合に表示する文字列\r\n    , EMPTY_LABEL: \"----\"\r\n\r\n    // API Key\r\n    , API_KEY: 'api_key'\r\n\r\n    // 固定プロンプト\r\n    , STATIC_PROMPT: 'static_prompt'\r\n\r\n    // レコード個別プロンプト\r\n    , UNIQUE_PROMPT: 'unique_prompt'\r\n\r\n    // 入力フィールド選択\r\n    , INPUT_FIELD: 'input_field'\r\n\r\n    // 出力フィールド選択\r\n    , OUTPUT_FIELD: 'output_field'\r\n\r\n    // 実行ボタン配置スペース\r\n    , BTN_SPACE_FIELD: 'btn_space_field'\r\n\r\n};\r\n","import { FieldType, KintoneConfigSetting, KintonePluginPreference } from \"plugin-parameters-helper\";\r\nimport { CONSTANTS } from \"../constants\";\r\n\r\n// 設定項目に関する設定、デスクトップ側からも参照する。\r\nexport class Settings {\r\n    // 設定項目の定義\r\n    static preference: KintonePluginPreference = {\r\n        'title': 'ChatGPT連携プラグインの設定'\r\n        , 'description': ''\r\n    }\r\n\r\n    static input: KintoneConfigSetting = [\r\n        {\r\n            'label': 'ChatGPTの設定'\r\n            , 'desc': 'API呼び出しに必要な項目を指定します。'\r\n            , 'type': FieldType.Label\r\n        }\r\n        , {\r\n            'label': 'API Key'\r\n            , 'desc': 'ChatGPT APIのAPI Tokenを指定してください。'\r\n            , 'code': CONSTANTS.API_KEY\r\n            , 'type': FieldType.Text\r\n            , 'required': true\r\n        }\r\n        , {\r\n            'label': '固定プロンプト'\r\n            , 'desc': '入力として毎回渡す固定のプロンプトを記入してください。'\r\n            , 'code': CONSTANTS.STATIC_PROMPT\r\n            , 'type': FieldType.MultilineText\r\n            // , 'type': FieldType.Text\r\n            // , 'accept': ['MULTI_LINE_TEXT']\r\n            , 'required': false\r\n        }\r\n        , {\r\n            'label': 'レコード別プロンプト'\r\n            , 'desc': 'レコード別に指定するプロンプトフィールドを選択してください。'\r\n            , 'code': CONSTANTS.UNIQUE_PROMPT\r\n            , 'type': FieldType.Dropdown_FieldSelect\r\n            , 'accept': ['SINGLE_LINE_TEXT', 'MULTI_LINE_TEXT']\r\n            , 'default': CONSTANTS.EMPTY_LABEL\r\n            , 'required': false\r\n        }\r\n        , {\r\n            'label': ''\r\n            , 'desc': ''\r\n            , 'type': FieldType.Separator\r\n            , 'required': false\r\n        }\r\n        , {\r\n            'label': 'kintoneのフィールド設定'\r\n            , 'desc': '入出力フィールドなどを設定します。'\r\n            , 'type': FieldType.Label\r\n        }\r\n        , {\r\n            'label': '入力フィールド選択'\r\n            , 'desc': '入力として使用するフィールドを選択してください'\r\n            , 'code': CONSTANTS.INPUT_FIELD\r\n            , 'type': FieldType.Dropdown_FieldSelect\r\n            , 'accept': ['SINGLE_LINE_TEXT', 'MULTI_LINE_TEXT']\r\n            , 'required': true\r\n        }\r\n        , {\r\n            'label': '出力フィールド選択'\r\n            , 'desc': 'ChatGPTの返答を入力するフィールドを選択してください。'\r\n            , 'code': CONSTANTS.OUTPUT_FIELD\r\n            , 'type': FieldType.Dropdown_FieldSelect\r\n            , 'accept': ['MULTI_LINE_TEXT']\r\n            , 'required': true\r\n        }\r\n        // スペーサー選択がまだ未実装\r\n        , {\r\n            'label': '実行ボタン配置スペース選択'\r\n            , 'desc': 'API呼び出しを実行するボタンを配置するスペースを選択してください。'\r\n            , 'code': CONSTANTS.BTN_SPACE_FIELD\r\n            , 'type': FieldType.Dropdown_FieldSelect\r\n            , 'accept': ['SPACER']\r\n            , 'required': true\r\n        }\r\n    ]\r\n}\r\n","import { ConfigManager } from \"plugin-parameters-helper\";\nimport { Settings } from \"./settings\";\n\n(function (PLUGIN_ID) {\n    'use strict';\n    console.info('run config main')\n\n\n    if (PLUGIN_ID == undefined) {\n        throw new Error('PLUGIN_ID == undefined で呼び出されました。')\n    }\n\n    const setting_prefs = Settings.preference\n    const setting_input = Settings.input\n    const manager = new ConfigManager(PLUGIN_ID, setting_input, setting_prefs)\n    manager.build()\n\n})(kintone.$PLUGIN_ID);\n\n"],"names":["Object","defineProperty","exports","value","FieldType","ConfigBuilder","require","commonutils_1","config_utilities_1","field_builder_1","incremental_table_builder_1","constructor","props","config","undefined","this","field_builder","FieldBuilder","static","type","LAYOUT_PARTS","includes","types","reduce","prev","curr","is_layout_info","build_incremental_table","input_field","saved_rows","table_rows","IncrementalTableBuilder","build","elements_th","table_cols","map","column","el_span","Utils","createElement","textContent","header","push","tr","thead","tbody","code","target","self","parent_td","parentNode","accept_types","lists","key","hasOwnProperty","prop","label","sorted","keys","k","sort","a","b","toString","toLowerCase","assign","item","select_set","select","addEventListener","event","selected","selectedIndex","option","getAttribute","ancestor","closest","inputs","getElementsByTagName","accepts","selected_fieldcode","selected_node_id","empty_label","parts","get_formparts","field_dropdown","id","empty_item","appendChild","setAttribute","app_id","selected_label","ConfigUtilities","DEFAULT_OPTION","empty_dropdown","resp_fields","kintone","api","app","parseInt","build_fields_dropdown","properties","main_node","title","comment","block_class","comment_node","buildElement","tagName","className","caption_node","childElements","parent_dropdown","parent_fieldcode","appid","then","single_line_items","filter","field","dd_item","td_fieldcode","make_fieldcode_cell","firstChild","remove","fieldcode","node_input","node_dropdown","node_radio","event_type","callback_object","querySelectorAll","forEach","input","make_string_block","Error","saved_value","default","el_str","ce","make_parts_block","desc","make_multiline_block","make_checkbox_block","accept","list_checkbox","box_value","checkbox_id","attr_checkbox","make_radio_block","saved_string","el_options","name","el_radio","el_label","make_dropdown_fieldselect_block","form_types","layout_types","length","layout","make_incremental_table_block","el_table","make_subtitle_block","heading","async","layout_infos","getId","spacers","row_prev","row_curr","row_spacers","fields","row_field","concat","elementId","ConfigManager","config_builder_1","common_1","PLUGIN_ID","setting_input","settings_preference","CONF","plugin","getConfig","set_config","set_preference","prefs","node_title","document","getElementById","node_description","description","node_settings","make_setting_fields","resp","btn_submit","make_button_submit","btn_cancel","make_button_cancel","form_node","node","top","buttons","_resp","call_target_event","catch","err","event_name","funcs","hooks","func","layout_inputs","builder","make_paragraph","Text","MultilineText","Radio","Number","Checkbox","IncrementalTable","Label","Separator","Dropdown_FieldSelect","serialized","get_from","KEY_CONFIG","JSON","parse","get_config","load_layout_info","store_parameters","store","this_form","config_tinker","required","get_selected","msg","isComposing","preventDefault","stringify","setConfig","alert","window","location","href","error","add_hook","config_form","whole_selected_field_codes","select_node_id","options","selectedOptions","is_overlapped","additional_labels","overlapped","clear_selected_field_labels","get_selected_radio","radio_id","radio_name","nodes","getElementsByName","idx","checked","get_string_value","field_id","get_multilinetext_value","get_incremental_table_values","node_table","abstruct_from_incremental_table","headers","Array","from","rows","row","nodeName","cells","cell","innerText","values","input_element","getElementsByClassName","selected_element","checkbox_element","index","attributes","checkbox_items","childNodes","node_id","field_type","Dropdown","get_selected_label","get_selected_fieldcode","preset","table_id","row_count","node_checkbox","build_table_cell","build_checkbox_cell","build_dropdown_cell","build_dropdown_fieldselect_cell","build_textcell","table_conf","rows_count","spacer_count","build_table_row","opt","row_number","saved_data","spacer_cols","built_row","node_button_add","create_button_row_add","node_button_remove","create_button_row_remove","tds","get_table_rows_count","table_node","grand_tr","get_grand_tr","ancestor_tbody","children","add_elem","insertBefore","nextElementSibling","removeChild","__createBinding","create","o","m","k2","enumerable","get","__exportStar","p","prototype","call","module","ButtonInstaller","utils_1","class_hms_button","canvas","classname","create_button","icon_label","tooltip","icon","style","color","button","decorate_menu_icon","fontSize","add_button","install","already_installed","put_buttons","set_canvas","get_hms","hms","getHeaderMenuSpaceElement","btn","append","get_header_element","index_text","PluginCanvas","id_island","id_offcanvas","title_offcanvas","island","enable_offcanvas","default_element","icon_element","already","icon_balloon","baloon","cursor","init_offcanvas","headerSpace","get_node","build_node_offcanvas","offcanvas","deal_dismiss_attribute","dismissElements","CLASS_DISMISS","element","with_record_number","results","unique","test_str","is_empty_string","dic","conf_key","defaults","params","tag","cl","tc","at","attrs","el","child","entries","t","c","height","backgroundColor","border","display","marginLeft","marginRight","verticalAlign","list","x","_i","indexOf","lastIndexOf","Set","protocol","host","max_msgs","errors","whole_errors","comments","messages","remain_msgs","splice","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","CONSTANTS","Settings","setting_prefs","preference","$PLUGIN_ID"],"sourceRoot":""}